{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","simba","--edition=2018","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"std\"","--cfg","feature=\"wide\"","-C","metadata=f5a16fabdfbfbe00","-C","extra-filename=-f5a16fabdfbfbe00","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","--extern","approx=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libapprox-c344624c08f3137f.rmeta","--extern","num_complex=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libnum_complex-1d407b770af2c0f9.rmeta","--extern","num_traits=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libnum_traits-44a227803e9fe6e4.rmeta","--extern","paste=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libpaste-ae5fc75ce29b0fd2.dylib","--extern","wide=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libwide-5d31652469748aee.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libsimba-f5a16fabdfbfbe00.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[645198492641384830,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17597776811017068767,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4080074450655046920,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5907259990925294111,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10493878511363669042,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12555285910560445398,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[2828314771408876961,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7582621806116120425,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2324381425420720695,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17777536701376484160,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[15325470721438668960,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[11693887763302245694,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[8512928500809439288,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[14797301622246846764,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[3748356315237825087,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8278577221625794805,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[8521860849321575787,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[9422041066241490255,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","num":21,"id":{"name":"approx","disambiguator":[7807329181119742247,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","num":22,"id":{"name":"num_complex","disambiguator":[16657372006355141068,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","num":23,"id":{"name":"wide","disambiguator":[6023564641847291213,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","num":24,"id":{"name":"safe_arch","disambiguator":[17419305550695342125,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","num":25,"id":{"name":"bytemuck","disambiguator":[637236782545552179,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","num":26,"id":{"name":"paste","disambiguator":[15053001045086349339,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2149,"byte_end":2161,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2185,"byte_end":2194,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2196,"byte_end":2205,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2207,"byte_end":2216,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2218,"byte_end":2227,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2229,"byte_end":2238,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2240,"byte_end":2245,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2345,"byte_end":2354,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2379,"byte_end":2387,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2389,"byte_end":2399,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57548,"byte_end":57549,"line_start":3,"line_end":3,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57643,"byte_end":57651,"line_start":6,"line_end":6,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57681,"byte_end":57697,"line_start":7,"line_end":7,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57726,"byte_end":57736,"line_start":8,"line_end":8,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":771},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57770,"byte_end":57784,"line_start":9,"line_end":9,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":810},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57811,"byte_end":57824,"line_start":10,"line_end":10,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":856},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57853,"byte_end":57863,"line_start":11,"line_end":11,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":887},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57892,"byte_end":57910,"line_start":12,"line_end":12,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":873},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57912,"byte_end":57921,"line_start":12,"line_end":12,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43128},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57985,"byte_end":57998,"line_start":15,"line_end":15,"column_start":5,"column_end":18},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43129},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57985,"byte_end":57998,"line_start":15,"line_end":15,"column_start":5,"column_end":18},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43144},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58000,"byte_end":58013,"line_start":15,"line_end":15,"column_start":20,"column_end":33},"alias_span":null,"name":"WideBoolF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43145},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58000,"byte_end":58013,"line_start":15,"line_end":15,"column_start":20,"column_end":33},"alias_span":null,"name":"WideBoolF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43160},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58015,"byte_end":58028,"line_start":15,"line_end":15,"column_start":35,"column_end":48},"alias_span":null,"name":"WideBoolF64x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43161},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58015,"byte_end":58028,"line_start":15,"line_end":15,"column_start":35,"column_end":48},"alias_span":null,"name":"WideBoolF64x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43120},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58030,"byte_end":58039,"line_start":15,"line_end":15,"column_start":50,"column_end":59},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43121},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58030,"byte_end":58039,"line_start":15,"line_end":15,"column_start":50,"column_end":59},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43136},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58041,"byte_end":58050,"line_start":15,"line_end":15,"column_start":61,"column_end":70},"alias_span":null,"name":"WideF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43137},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58041,"byte_end":58050,"line_start":15,"line_end":15,"column_start":61,"column_end":70},"alias_span":null,"name":"WideF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43152},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58052,"byte_end":58061,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"alias_span":null,"name":"WideF64x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43153},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":58052,"byte_end":58061,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"alias_span":null,"name":"WideF64x4","value":"","parent":{"krate":0,"index":289}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":289}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"*\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. The types are wrappers around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":84},{"krate":0,"index":190},{"krate":0,"index":255}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/mod.rs","byte_start":2074,"byte_end":2124,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3024,"byte_end":3033,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + PartialOrd","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":2960,"byte_end":2990,"line_start":20,"line_end":20,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":2991,"byte_end":3013,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3221,"byte_end":3237,"line_start":30,"line_end":30,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"fn is_sign_positive(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3168,"byte_end":3213,"line_start":29,"line_end":29,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3311,"byte_end":3327,"line_start":32,"line_end":32,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"fn is_sign_negative(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3258,"byte_end":3303,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3557,"byte_end":3565,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"fn copysign(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3348,"byte_end":3388,"line_start":33,"line_end":33,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3393,"byte_end":3396,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3401,"byte_end":3472,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3477,"byte_end":3549,"line_start":36,"line_end":36,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3601,"byte_end":3604,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"fn max(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3640,"byte_end":3643,"line_start":40,"line_end":40,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"fn min(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3679,"byte_end":3684,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"fn clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3729,"byte_end":3734,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3845,"byte_end":3854,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"min_value","qualname":"::scalar::real::RealField::min_value","value":"fn min_value() -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The smallest finite positive value representable using this type.\n","sig":null,"attributes":[{"value":"/ The smallest finite positive value representable using this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3768,"byte_end":3837,"line_start":44,"line_end":44,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3954,"byte_end":3963,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"max_value","qualname":"::scalar::real::RealField::max_value","value":"fn max_value() -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The largest finite positive value representable using this type.\n","sig":null,"attributes":[{"value":"/ The largest finite positive value representable using this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3878,"byte_end":3946,"line_start":46,"line_end":46,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3991,"byte_end":3993,"line_start":49,"line_end":49,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"fn pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4012,"byte_end":4018,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"fn two_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4037,"byte_end":4046,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"fn frac_pi_2() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4065,"byte_end":4074,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"fn frac_pi_3() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4093,"byte_end":4102,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"fn frac_pi_4() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4121,"byte_end":4130,"line_start":54,"line_end":54,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"fn frac_pi_6() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4149,"byte_end":4158,"line_start":55,"line_end":55,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"fn frac_pi_8() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4177,"byte_end":4186,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"fn frac_1_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4205,"byte_end":4214,"line_start":57,"line_end":57,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"fn frac_2_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4233,"byte_end":4247,"line_start":58,"line_end":58,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4267,"byte_end":4268,"line_start":60,"line_end":60,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"fn e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4287,"byte_end":4293,"line_start":61,"line_end":61,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"fn log2_e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4312,"byte_end":4319,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"fn log10_e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4338,"byte_end":4342,"line_start":63,"line_end":63,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"fn ln_2() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":4361,"byte_end":4366,"line_start":64,"line_end":64,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"fn ln_10() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16235,"byte_end":16247,"line_start":169,"line_end":169,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + FromPrimitive + Field<Element = Self,\nSimdBool = bool> + Neg<Output = Self> + Clone + Send + Sync + Any + 'static +\nDebug + Display","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":15753,"byte_end":15830,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":15831,"byte_end":15834,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":15835,"byte_end":15935,"line_start":164,"line_end":164,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":15936,"byte_end":16040,"line_start":165,"line_end":165,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16202,"byte_end":16224,"line_start":168,"line_end":168,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":133},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16523,"byte_end":16532,"line_start":185,"line_end":185,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16592,"byte_end":16601,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"fn is_finite(&Self) -> bool","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16625,"byte_end":16633,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":33965,"byte_end":33974,"line_start":1064,"line_end":1064,"column_start":8,"column_end":17},"name":"from_real","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::from_real","value":"fn from_real(Self::RealField) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1080},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":33948,"byte_end":33957,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34081,"byte_end":34085,"line_start":1069,"line_end":1069,"column_start":8,"column_end":12},"name":"real","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::real","value":"fn real(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1081},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34064,"byte_end":34073,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34157,"byte_end":34166,"line_start":1074,"line_end":1074,"column_start":8,"column_end":17},"name":"imaginary","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::imaginary","value":"fn imaginary(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1082},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34140,"byte_end":34149,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34238,"byte_end":34246,"line_start":1079,"line_end":1079,"column_start":8,"column_end":16},"name":"argument","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::argument","value":"fn argument(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1085},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34221,"byte_end":34230,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34333,"byte_end":34340,"line_start":1084,"line_end":1084,"column_start":8,"column_end":15},"name":"modulus","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::modulus","value":"fn modulus(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1083},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34316,"byte_end":34325,"line_start":1083,"line_end":1083,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34427,"byte_end":34442,"line_start":1089,"line_end":1089,"column_start":8,"column_end":23},"name":"modulus_squared","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::modulus_squared","value":"fn modulus_squared(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1084},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34410,"byte_end":34419,"line_start":1088,"line_end":1088,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34560,"byte_end":34565,"line_start":1094,"line_end":1094,"column_start":8,"column_end":13},"name":"norm1","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::norm1","value":"fn norm1(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1086},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34543,"byte_end":34552,"line_start":1093,"line_end":1093,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34659,"byte_end":34664,"line_start":1099,"line_end":1099,"column_start":8,"column_end":13},"name":"recip","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::recip","value":"fn recip(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1100},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34642,"byte_end":34651,"line_start":1098,"line_end":1098,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34736,"byte_end":34745,"line_start":1104,"line_end":1104,"column_start":8,"column_end":17},"name":"conjugate","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::conjugate","value":"fn conjugate(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1101},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34719,"byte_end":34728,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34810,"byte_end":34815,"line_start":1109,"line_end":1109,"column_start":8,"column_end":13},"name":"scale","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::scale","value":"fn scale(Self, Self::RealField) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34793,"byte_end":34802,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34907,"byte_end":34914,"line_start":1114,"line_end":1114,"column_start":8,"column_end":15},"name":"unscale","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::unscale","value":"fn unscale(Self, Self::RealField) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1088},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34890,"byte_end":34899,"line_start":1113,"line_end":1113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35006,"byte_end":35011,"line_start":1119,"line_end":1119,"column_start":8,"column_end":13},"name":"floor","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::floor","value":"fn floor(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1092},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":34989,"byte_end":34998,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35108,"byte_end":35112,"line_start":1124,"line_end":1124,"column_start":8,"column_end":12},"name":"ceil","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::ceil","value":"fn ceil(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1093},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35091,"byte_end":35100,"line_start":1123,"line_end":1123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35207,"byte_end":35212,"line_start":1129,"line_end":1129,"column_start":8,"column_end":13},"name":"round","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::round","value":"fn round(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1094},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35190,"byte_end":35199,"line_start":1128,"line_end":1128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35309,"byte_end":35314,"line_start":1134,"line_end":1134,"column_start":8,"column_end":13},"name":"trunc","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::trunc","value":"fn trunc(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1095},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35292,"byte_end":35301,"line_start":1133,"line_end":1133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35411,"byte_end":35416,"line_start":1139,"line_end":1139,"column_start":8,"column_end":13},"name":"fract","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::fract","value":"fn fract(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1096},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35394,"byte_end":35403,"line_start":1138,"line_end":1138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35513,"byte_end":35520,"line_start":1144,"line_end":1144,"column_start":8,"column_end":15},"name":"mul_add","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::mul_add","value":"fn mul_add(Self, Self, Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1097},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35496,"byte_end":35505,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35604,"byte_end":35607,"line_start":1149,"line_end":1149,"column_start":8,"column_end":11},"name":"abs","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::abs","value":"fn abs(Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1098},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35587,"byte_end":35596,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35686,"byte_end":35690,"line_start":1154,"line_end":1154,"column_start":8,"column_end":12},"name":"exp2","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::exp2","value":"fn exp2(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1127},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35669,"byte_end":35678,"line_start":1153,"line_end":1153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35833,"byte_end":35839,"line_start":1160,"line_end":1160,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::exp_m1","value":"fn exp_m1(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1128},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35816,"byte_end":35825,"line_start":1159,"line_end":1159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35917,"byte_end":35922,"line_start":1165,"line_end":1165,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::ln_1p","value":"fn ln_1p(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1124},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35900,"byte_end":35909,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36001,"byte_end":36005,"line_start":1170,"line_end":1170,"column_start":8,"column_end":12},"name":"log2","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::log2","value":"fn log2(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1121},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":35984,"byte_end":35993,"line_start":1169,"line_end":1169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36109,"byte_end":36114,"line_start":1176,"line_end":1176,"column_start":8,"column_end":13},"name":"log10","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::log10","value":"fn log10(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1122},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36092,"byte_end":36101,"line_start":1175,"line_end":1175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36225,"byte_end":36229,"line_start":1182,"line_end":1182,"column_start":8,"column_end":12},"name":"cbrt","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::cbrt","value":"fn cbrt(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1132},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36208,"byte_end":36217,"line_start":1181,"line_end":1181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36357,"byte_end":36361,"line_start":1188,"line_end":1188,"column_start":8,"column_end":12},"name":"powi","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::powi","value":"fn powi(Self, i32) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1129},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36340,"byte_end":36349,"line_start":1187,"line_end":1187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36533,"byte_end":36542,"line_start":1195,"line_end":1195,"column_start":8,"column_end":17},"name":"is_finite","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::is_finite","value":"fn is_finite(&Self) -> bool","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":134},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36516,"byte_end":36525,"line_start":1194,"line_end":1194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36932,"byte_end":36935,"line_start":1210,"line_end":1210,"column_start":8,"column_end":11},"name":"exp","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::exp","value":"fn exp(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1126},"docs":" Computes `e^(self)`, where `e` is the base of the natural logarithm.\n","sig":null,"attributes":[{"value":"/ Computes `e^(self)`, where `e` is the base of the natural logarithm.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36838,"byte_end":36910,"line_start":1208,"line_end":1208,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":36915,"byte_end":36924,"line_start":1209,"line_end":1209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37359,"byte_end":37361,"line_start":1224,"line_end":1224,"column_start":8,"column_end":10},"name":"ln","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::ln","value":"fn ln(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1123},"docs":" Computes the principal value of natural logarithm of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of natural logarithm of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37103,"byte_end":37167,"line_start":1216,"line_end":1216,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37172,"byte_end":37175,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ This function has one branch cut:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37180,"byte_end":37217,"line_start":1218,"line_end":1218,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37222,"byte_end":37225,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, 0]`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37230,"byte_end":37271,"line_start":1220,"line_end":1220,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37276,"byte_end":37279,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π ≤ arg(ln(z)) ≤ π`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37284,"byte_end":37337,"line_start":1222,"line_end":1222,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37342,"byte_end":37351,"line_start":1223,"line_end":1223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37769,"byte_end":37773,"line_start":1238,"line_end":1238,"column_start":8,"column_end":12},"name":"sqrt","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::sqrt","value":"fn sqrt(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1125},"docs":" Computes the principal value of the square root of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of the square root of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37509,"byte_end":37571,"line_start":1230,"line_end":1230,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37576,"byte_end":37579,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ This function has one branch cut:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37584,"byte_end":37621,"line_start":1232,"line_end":1232,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37626,"byte_end":37629,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, 0)`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37634,"byte_end":37675,"line_start":1234,"line_end":1234,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37680,"byte_end":37683,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π/2 ≤ arg(sqrt(z)) ≤ π/2`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37688,"byte_end":37747,"line_start":1236,"line_end":1236,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37752,"byte_end":37761,"line_start":1237,"line_end":1237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38003,"byte_end":38011,"line_start":1246,"line_end":1246,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::try_sqrt","value":"fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":135},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":37986,"byte_end":37995,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38090,"byte_end":38095,"line_start":1251,"line_end":1251,"column_start":8,"column_end":13},"name":"hypot","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::hypot","value":"fn hypot(Self, Self) -> Self::RealField","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1099},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38073,"byte_end":38082,"line_start":1250,"line_end":1250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38271,"byte_end":38275,"line_start":1257,"line_end":1257,"column_start":8,"column_end":12},"name":"powf","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::powf","value":"fn powf(Self, Self::RealField) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1130},"docs":" Raises `self` to a floating point power.\n","sig":null,"attributes":[{"value":"/ Raises `self` to a floating point power.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38205,"byte_end":38249,"line_start":1255,"line_end":1255,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38254,"byte_end":38263,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38616,"byte_end":38619,"line_start":1266,"line_end":1266,"column_start":8,"column_end":11},"name":"log","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::log","value":"fn log(Self, N) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1120},"docs":" Returns the logarithm of `self` with respect to an arbitrary base.\n","sig":null,"attributes":[{"value":"/ Returns the logarithm of `self` with respect to an arbitrary base.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38524,"byte_end":38594,"line_start":1264,"line_end":1264,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38599,"byte_end":38608,"line_start":1265,"line_end":1265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38979,"byte_end":38983,"line_start":1276,"line_end":1276,"column_start":8,"column_end":12},"name":"powc","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::powc","value":"fn powc(Self, Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1131},"docs":" Raises `self` to a complex power.\n","sig":null,"attributes":[{"value":"/ Raises `self` to a complex power.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38920,"byte_end":38957,"line_start":1274,"line_end":1274,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":38962,"byte_end":38971,"line_start":1275,"line_end":1275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40185,"byte_end":40188,"line_start":1307,"line_end":1307,"column_start":8,"column_end":11},"name":"sin","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::sin","value":"fn sin(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1102},"docs":" Computes the sine of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the sine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40131,"byte_end":40163,"line_start":1305,"line_end":1305,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40168,"byte_end":40177,"line_start":1306,"line_end":1306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40471,"byte_end":40474,"line_start":1317,"line_end":1317,"column_start":8,"column_end":11},"name":"cos","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::cos","value":"fn cos(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1103},"docs":" Computes the cosine of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the cosine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40415,"byte_end":40449,"line_start":1315,"line_end":1315,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40454,"byte_end":40463,"line_start":1316,"line_end":1316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40719,"byte_end":40726,"line_start":1326,"line_end":1326,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::sin_cos","value":"fn sin_cos(Self) -> (Self, Self)","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1104},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":40702,"byte_end":40711,"line_start":1325,"line_end":1325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41082,"byte_end":41085,"line_start":1337,"line_end":1337,"column_start":8,"column_end":11},"name":"tan","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::tan","value":"fn tan(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1106},"docs":" Computes the tangent of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the tangent of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41025,"byte_end":41060,"line_start":1335,"line_end":1335,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41065,"byte_end":41074,"line_start":1336,"line_end":1336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41686,"byte_end":41690,"line_start":1352,"line_end":1352,"column_start":8,"column_end":12},"name":"asin","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::asin","value":"fn asin(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1107},"docs":" Computes the principal value of the inverse sine of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of the inverse sine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41379,"byte_end":41442,"line_start":1343,"line_end":1343,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41447,"byte_end":41450,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ This function has two branch cuts:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41455,"byte_end":41493,"line_start":1345,"line_end":1345,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41498,"byte_end":41501,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, -1)`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41506,"byte_end":41548,"line_start":1347,"line_end":1347,"column_start":5,"column_end":45}},{"value":"/ * `(1, ∞)`, continuous from below.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41553,"byte_end":41593,"line_start":1348,"line_end":1348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41598,"byte_end":41601,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π/2 ≤ Re(asin(z)) ≤ π/2`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41606,"byte_end":41664,"line_start":1350,"line_end":1350,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41669,"byte_end":41678,"line_start":1351,"line_end":1351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42194,"byte_end":42198,"line_start":1367,"line_end":1367,"column_start":8,"column_end":12},"name":"acos","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::acos","value":"fn acos(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1108},"docs":" Computes the principal value of the inverse cosine of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of the inverse cosine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41891,"byte_end":41956,"line_start":1358,"line_end":1358,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41961,"byte_end":41964,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This function has two branch cuts:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":41969,"byte_end":42007,"line_start":1360,"line_end":1360,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42012,"byte_end":42015,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, -1)`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42020,"byte_end":42062,"line_start":1362,"line_end":1362,"column_start":5,"column_end":45}},{"value":"/ * `(1, ∞)`, continuous from below.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42067,"byte_end":42107,"line_start":1363,"line_end":1363,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42112,"byte_end":42115,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `0 ≤ Re(acos(z)) ≤ π`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42120,"byte_end":42172,"line_start":1365,"line_end":1365,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42177,"byte_end":42186,"line_start":1366,"line_end":1366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42719,"byte_end":42723,"line_start":1382,"line_end":1382,"column_start":8,"column_end":12},"name":"atan","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::atan","value":"fn atan(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1109},"docs":" Computes the principal value of the inverse tangent of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of the inverse tangent of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42400,"byte_end":42466,"line_start":1373,"line_end":1373,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42471,"byte_end":42474,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ This function has two branch cuts:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42479,"byte_end":42517,"line_start":1375,"line_end":1375,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42522,"byte_end":42525,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ * `(-∞i, -i]`, continuous from the left.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42530,"byte_end":42576,"line_start":1377,"line_end":1377,"column_start":5,"column_end":49}},{"value":"/ * `[i, ∞i)`, continuous from the right.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42581,"byte_end":42626,"line_start":1378,"line_end":1378,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42631,"byte_end":42634,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π/2 ≤ Re(atan(z)) ≤ π/2`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42639,"byte_end":42697,"line_start":1380,"line_end":1380,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":42702,"byte_end":42711,"line_start":1381,"line_end":1381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43279,"byte_end":43283,"line_start":1399,"line_end":1399,"column_start":8,"column_end":12},"name":"sinh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::sinh","value":"fn sinh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1110},"docs":" Computes the hyperbolic sine of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the hyperbolic sine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43214,"byte_end":43257,"line_start":1397,"line_end":1397,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43262,"byte_end":43271,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43578,"byte_end":43582,"line_start":1409,"line_end":1409,"column_start":8,"column_end":12},"name":"cosh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::cosh","value":"fn cosh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1111},"docs":" Computes the hyperbolic cosine of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the hyperbolic cosine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43511,"byte_end":43556,"line_start":1407,"line_end":1407,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43561,"byte_end":43570,"line_start":1408,"line_end":1408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43827,"byte_end":43836,"line_start":1418,"line_end":1418,"column_start":8,"column_end":17},"name":"sinh_cosh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::sinh_cosh","value":"fn sinh_cosh(Self) -> (Self, Self)","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1105},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":43810,"byte_end":43819,"line_start":1417,"line_end":1417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44202,"byte_end":44206,"line_start":1429,"line_end":1429,"column_start":8,"column_end":12},"name":"tanh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::tanh","value":"fn tanh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1112},"docs":" Computes the hyperbolic tangent of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the hyperbolic tangent of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44134,"byte_end":44180,"line_start":1427,"line_end":1427,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44185,"byte_end":44194,"line_start":1428,"line_end":1428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44825,"byte_end":44830,"line_start":1444,"line_end":1444,"column_start":8,"column_end":13},"name":"asinh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::asinh","value":"fn asinh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1113},"docs":" Computes the principal value of inverse hyperbolic sine of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of inverse hyperbolic sine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44501,"byte_end":44571,"line_start":1435,"line_end":1435,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44576,"byte_end":44579,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ This function has two branch cuts:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44584,"byte_end":44622,"line_start":1437,"line_end":1437,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44627,"byte_end":44630,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ * `(-∞i, -i)`, continuous from the left.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44635,"byte_end":44681,"line_start":1439,"line_end":1439,"column_start":5,"column_end":49}},{"value":"/ * `(i, ∞i)`, continuous from the right.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44686,"byte_end":44731,"line_start":1440,"line_end":1440,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44736,"byte_end":44739,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π/2 ≤ Im(asinh(z)) ≤ π/2`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44744,"byte_end":44803,"line_start":1442,"line_end":1442,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":44808,"byte_end":44817,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45304,"byte_end":45309,"line_start":1458,"line_end":1458,"column_start":8,"column_end":13},"name":"acosh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::acosh","value":"fn acosh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1114},"docs":" Computes the principal value of inverse hyperbolic cosine of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of inverse hyperbolic cosine of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45007,"byte_end":45079,"line_start":1450,"line_end":1450,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45084,"byte_end":45087,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ This function has one branch cut:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45092,"byte_end":45129,"line_start":1452,"line_end":1452,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45134,"byte_end":45137,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, 1)`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45142,"byte_end":45183,"line_start":1454,"line_end":1454,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45188,"byte_end":45191,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π ≤ Im(acosh(z)) ≤ π` and `0 ≤ Re(acosh(z)) < ∞`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45196,"byte_end":45282,"line_start":1456,"line_end":1456,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45287,"byte_end":45296,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45940,"byte_end":45945,"line_start":1476,"line_end":1476,"column_start":8,"column_end":13},"name":"atanh","qualname":"<num_complex::Complex<N> as scalar::complex::ComplexField>::atanh","value":"fn atanh(Self) -> Self","parent":{"krate":0,"index":132},"children":[],"decl_id":{"krate":0,"index":1115},"docs":" Computes the principal value of inverse hyperbolic tangent of `self`.","sig":null,"attributes":[{"value":"/ Computes the principal value of inverse hyperbolic tangent of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45622,"byte_end":45695,"line_start":1467,"line_end":1467,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45700,"byte_end":45703,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ This function has two branch cuts:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45708,"byte_end":45746,"line_start":1469,"line_end":1469,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45751,"byte_end":45754,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ * `(-∞, -1]`, continuous from above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45759,"byte_end":45801,"line_start":1471,"line_end":1471,"column_start":5,"column_end":45}},{"value":"/ * `[1, ∞)`, continuous from below.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45806,"byte_end":45846,"line_start":1472,"line_end":1472,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45851,"byte_end":45854,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ The branch satisfies `-π/2 ≤ Im(atanh(z)) ≤ π/2`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45859,"byte_end":45918,"line_start":1474,"line_end":1474,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":45923,"byte_end":45932,"line_start":1475,"line_end":1475,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48268,"byte_end":48277,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48184,"byte_end":48257,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":230},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48434,"byte_end":48443,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48350,"byte_end":48423,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":232},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48600,"byte_end":48609,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48516,"byte_end":48589,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":234},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48766,"byte_end":48775,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48682,"byte_end":48755,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":236},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48916,"byte_end":48925,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48848,"byte_end":48905,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":251},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49456,"byte_end":49461,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49379,"byte_end":49445,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51046,"byte_end":51054,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":49854,"byte_end":49948,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":49949,"byte_end":50045,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50046,"byte_end":50138,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50139,"byte_end":50158,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50159,"byte_end":50162,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50163,"byte_end":50255,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50256,"byte_end":50347,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50348,"byte_end":50360,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50361,"byte_end":50457,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50458,"byte_end":50494,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50495,"byte_end":50593,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50594,"byte_end":50613,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50614,"byte_end":50710,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50711,"byte_end":50749,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50750,"byte_end":50753,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50754,"byte_end":50849,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50850,"byte_end":50938,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":50939,"byte_end":51035,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51160,"byte_end":51171,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"fn to_superset(&Self) -> T","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51071,"byte_end":51152,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51387,"byte_end":51400,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51190,"byte_end":51284,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51289,"byte_end":51302,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51307,"byte_end":51310,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51315,"byte_end":51379,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51688,"byte_end":51711,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51585,"byte_end":51680,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51838,"byte_end":51850,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51739,"byte_end":51830,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53023,"byte_end":53033,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51876,"byte_end":51973,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51974,"byte_end":52062,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52063,"byte_end":52133,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52134,"byte_end":52137,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52138,"byte_end":52230,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52231,"byte_end":52322,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52323,"byte_end":52335,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52336,"byte_end":52432,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52433,"byte_end":52469,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52470,"byte_end":52567,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52568,"byte_end":52590,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52591,"byte_end":52687,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52688,"byte_end":52726,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52727,"byte_end":52730,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52731,"byte_end":52826,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52827,"byte_end":52915,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":52916,"byte_end":53012,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53247,"byte_end":53256,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53050,"byte_end":53144,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53149,"byte_end":53162,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53167,"byte_end":53170,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53175,"byte_end":53239,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53505,"byte_end":53517,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53412,"byte_end":53497,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53640,"byte_end":53659,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53539,"byte_end":53632,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53767,"byte_end":53778,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"fn from_subset(&T) -> Self","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53678,"byte_end":53759,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53876,"byte_end":53885,"line_start":89,"line_end":89,"column_start":8,"column_end":17},"name":"to_subset","qualname":"<SP as scalar::subset::SupersetOf>::to_subset","value":"fn to_subset(&Self) -> Option<SS>","parent":{"krate":0,"index":268},"children":[],"decl_id":{"krate":0,"index":270},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53859,"byte_end":53868,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53969,"byte_end":53981,"line_start":94,"line_end":94,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"<SP as scalar::subset::SupersetOf>::is_in_subset","value":"fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":268},"children":[],"decl_id":{"krate":0,"index":271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53952,"byte_end":53961,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":54058,"byte_end":54077,"line_start":99,"line_end":99,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"<SP as scalar::subset::SupersetOf>::to_subset_unchecked","value":"fn to_subset_unchecked(&Self) -> SS","parent":{"krate":0,"index":268},"children":[],"decl_id":{"krate":0,"index":272},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":54041,"byte_end":54050,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":54163,"byte_end":54174,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"from_subset","qualname":"<SP as scalar::subset::SupersetOf>::from_subset","value":"fn from_subset(&SS) -> Self","parent":{"krate":0,"index":268},"children":[],"decl_id":{"krate":0,"index":273},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":54146,"byte_end":54155,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56103,"byte_end":56114,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"to_superset","qualname":"<Complex<N1> as scalar::subset::SubsetOf>::to_superset","value":"fn to_superset(&Self) -> Complex<N2>","parent":{"krate":0,"index":262},"children":[],"decl_id":{"krate":0,"index":264},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56086,"byte_end":56095,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56281,"byte_end":56304,"line_start":179,"line_end":179,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"<Complex<N1> as scalar::subset::SubsetOf>::from_superset_unchecked","value":"fn from_superset_unchecked(&Complex<N2>) -> Complex<N1>","parent":{"krate":0,"index":262},"children":[],"decl_id":{"krate":0,"index":266},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56264,"byte_end":56273,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56501,"byte_end":56513,"line_start":187,"line_end":187,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"<Complex<N1> as scalar::subset::SubsetOf>::is_in_subset","value":"fn is_in_subset(&Complex<N2>) -> bool","parent":{"krate":0,"index":262},"children":[],"decl_id":{"krate":0,"index":267},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56484,"byte_end":56493,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":289},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":572},{"krate":0,"index":641},{"krate":0,"index":746},{"krate":0,"index":767},{"krate":0,"index":796},{"krate":0,"index":849},{"krate":0,"index":869},{"krate":0,"index":902}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"/ Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/mod.rs","byte_start":57460,"byte_end":57516,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1851},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61190,"byte_end":61198,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"AutoSimd","qualname":"::simd::auto_simd_impl::AutoSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SIMD structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ A SIMD structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":60741,"byte_end":60824,"line_start":39,"line_end":39,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":60825,"byte_end":60828,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":60829,"byte_end":60877,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":60878,"byte_end":60896,"line_start":42,"line_end":42,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1854},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61202,"byte_end":61207,"line_start":50,"line_end":50,"column_start":24,"column_end":29},"name":"0","qualname":"::simd::auto_simd_impl::AutoSimd::0","value":"N","parent":{"krate":0,"index":1851},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61607,"byte_end":61619,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"name":"AutoBoolSimd","qualname":"::simd::auto_simd_impl::AutoBoolSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SIMD boolean structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ A SIMD boolean structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61211,"byte_end":61302,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61303,"byte_end":61306,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61307,"byte_end":61355,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61356,"byte_end":61374,"line_start":55,"line_end":55,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1877},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":61623,"byte_end":61628,"line_start":62,"line_end":62,"column_start":28,"column_end":33},"name":"0","qualname":"::simd::auto_simd_impl::AutoBoolSimd::0","value":"N","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":443},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":112942,"byte_end":112951,"line_start":1573,"line_end":1573,"column_start":10,"column_end":19},"name":"AutoF32x2","qualname":"::simd::auto_simd_impl::AutoF32x2","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":445},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":112983,"byte_end":112992,"line_start":1574,"line_end":1574,"column_start":10,"column_end":19},"name":"AutoF32x4","qualname":"::simd::auto_simd_impl::AutoF32x4","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":447},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113024,"byte_end":113033,"line_start":1575,"line_end":1575,"column_start":10,"column_end":19},"name":"AutoF32x8","qualname":"::simd::auto_simd_impl::AutoF32x8","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":449},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113065,"byte_end":113075,"line_start":1576,"line_end":1576,"column_start":10,"column_end":20},"name":"AutoF32x16","qualname":"::simd::auto_simd_impl::AutoF32x16","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":451},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113108,"byte_end":113117,"line_start":1577,"line_end":1577,"column_start":10,"column_end":19},"name":"AutoF64x2","qualname":"::simd::auto_simd_impl::AutoF64x2","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113149,"byte_end":113158,"line_start":1578,"line_end":1578,"column_start":10,"column_end":19},"name":"AutoF64x4","qualname":"::simd::auto_simd_impl::AutoF64x4","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":455},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113190,"byte_end":113199,"line_start":1579,"line_end":1579,"column_start":10,"column_end":19},"name":"AutoF64x8","qualname":"::simd::auto_simd_impl::AutoF64x8","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":457},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113231,"byte_end":113241,"line_start":1580,"line_end":1580,"column_start":10,"column_end":20},"name":"AutoI128x1","qualname":"::simd::auto_simd_impl::AutoI128x1","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113274,"byte_end":113284,"line_start":1581,"line_end":1581,"column_start":10,"column_end":20},"name":"AutoI128x2","qualname":"::simd::auto_simd_impl::AutoI128x2","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":461},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113317,"byte_end":113327,"line_start":1582,"line_end":1582,"column_start":10,"column_end":20},"name":"AutoI128x4","qualname":"::simd::auto_simd_impl::AutoI128x4","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113360,"byte_end":113369,"line_start":1583,"line_end":1583,"column_start":10,"column_end":19},"name":"AutoI16x2","qualname":"::simd::auto_simd_impl::AutoI16x2","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":465},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113401,"byte_end":113410,"line_start":1584,"line_end":1584,"column_start":10,"column_end":19},"name":"AutoI16x4","qualname":"::simd::auto_simd_impl::AutoI16x4","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":467},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113442,"byte_end":113451,"line_start":1585,"line_end":1585,"column_start":10,"column_end":19},"name":"AutoI16x8","qualname":"::simd::auto_simd_impl::AutoI16x8","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":469},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113483,"byte_end":113493,"line_start":1586,"line_end":1586,"column_start":10,"column_end":20},"name":"AutoI16x16","qualname":"::simd::auto_simd_impl::AutoI16x16","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":471},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113526,"byte_end":113536,"line_start":1587,"line_end":1587,"column_start":10,"column_end":20},"name":"AutoI16x32","qualname":"::simd::auto_simd_impl::AutoI16x32","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":473},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113569,"byte_end":113578,"line_start":1588,"line_end":1588,"column_start":10,"column_end":19},"name":"AutoI32x2","qualname":"::simd::auto_simd_impl::AutoI32x2","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":475},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113610,"byte_end":113619,"line_start":1589,"line_end":1589,"column_start":10,"column_end":19},"name":"AutoI32x4","qualname":"::simd::auto_simd_impl::AutoI32x4","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":477},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113651,"byte_end":113660,"line_start":1590,"line_end":1590,"column_start":10,"column_end":19},"name":"AutoI32x8","qualname":"::simd::auto_simd_impl::AutoI32x8","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":479},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113692,"byte_end":113702,"line_start":1591,"line_end":1591,"column_start":10,"column_end":20},"name":"AutoI32x16","qualname":"::simd::auto_simd_impl::AutoI32x16","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":481},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113735,"byte_end":113744,"line_start":1592,"line_end":1592,"column_start":10,"column_end":19},"name":"AutoI64x2","qualname":"::simd::auto_simd_impl::AutoI64x2","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":483},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113776,"byte_end":113785,"line_start":1593,"line_end":1593,"column_start":10,"column_end":19},"name":"AutoI64x4","qualname":"::simd::auto_simd_impl::AutoI64x4","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":485},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113817,"byte_end":113826,"line_start":1594,"line_end":1594,"column_start":10,"column_end":19},"name":"AutoI64x8","qualname":"::simd::auto_simd_impl::AutoI64x8","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":487},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113858,"byte_end":113866,"line_start":1595,"line_end":1595,"column_start":10,"column_end":18},"name":"AutoI8x2","qualname":"::simd::auto_simd_impl::AutoI8x2","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":489},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113897,"byte_end":113905,"line_start":1596,"line_end":1596,"column_start":10,"column_end":18},"name":"AutoI8x4","qualname":"::simd::auto_simd_impl::AutoI8x4","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113936,"byte_end":113944,"line_start":1597,"line_end":1597,"column_start":10,"column_end":18},"name":"AutoI8x8","qualname":"::simd::auto_simd_impl::AutoI8x8","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":493},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":113975,"byte_end":113984,"line_start":1598,"line_end":1598,"column_start":10,"column_end":19},"name":"AutoI8x16","qualname":"::simd::auto_simd_impl::AutoI8x16","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":495},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114016,"byte_end":114025,"line_start":1599,"line_end":1599,"column_start":10,"column_end":19},"name":"AutoI8x32","qualname":"::simd::auto_simd_impl::AutoI8x32","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114101,"byte_end":114112,"line_start":1601,"line_end":1601,"column_start":10,"column_end":21},"name":"AutoIsizex2","qualname":"::simd::auto_simd_impl::AutoIsizex2","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":499},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114146,"byte_end":114157,"line_start":1602,"line_end":1602,"column_start":10,"column_end":21},"name":"AutoIsizex4","qualname":"::simd::auto_simd_impl::AutoIsizex4","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":501},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114191,"byte_end":114202,"line_start":1603,"line_end":1603,"column_start":10,"column_end":21},"name":"AutoIsizex8","qualname":"::simd::auto_simd_impl::AutoIsizex8","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114236,"byte_end":114246,"line_start":1604,"line_end":1604,"column_start":10,"column_end":20},"name":"AutoU128x1","qualname":"::simd::auto_simd_impl::AutoU128x1","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":505},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114279,"byte_end":114289,"line_start":1605,"line_end":1605,"column_start":10,"column_end":20},"name":"AutoU128x2","qualname":"::simd::auto_simd_impl::AutoU128x2","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":507},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114322,"byte_end":114332,"line_start":1606,"line_end":1606,"column_start":10,"column_end":20},"name":"AutoU128x4","qualname":"::simd::auto_simd_impl::AutoU128x4","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":509},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114365,"byte_end":114374,"line_start":1607,"line_end":1607,"column_start":10,"column_end":19},"name":"AutoU16x2","qualname":"::simd::auto_simd_impl::AutoU16x2","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":511},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114406,"byte_end":114415,"line_start":1608,"line_end":1608,"column_start":10,"column_end":19},"name":"AutoU16x4","qualname":"::simd::auto_simd_impl::AutoU16x4","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114447,"byte_end":114456,"line_start":1609,"line_end":1609,"column_start":10,"column_end":19},"name":"AutoU16x8","qualname":"::simd::auto_simd_impl::AutoU16x8","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":515},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114488,"byte_end":114498,"line_start":1610,"line_end":1610,"column_start":10,"column_end":20},"name":"AutoU16x16","qualname":"::simd::auto_simd_impl::AutoU16x16","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114531,"byte_end":114541,"line_start":1611,"line_end":1611,"column_start":10,"column_end":20},"name":"AutoU16x32","qualname":"::simd::auto_simd_impl::AutoU16x32","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":519},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114574,"byte_end":114583,"line_start":1612,"line_end":1612,"column_start":10,"column_end":19},"name":"AutoU32x2","qualname":"::simd::auto_simd_impl::AutoU32x2","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":521},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114615,"byte_end":114624,"line_start":1613,"line_end":1613,"column_start":10,"column_end":19},"name":"AutoU32x4","qualname":"::simd::auto_simd_impl::AutoU32x4","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":523},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114656,"byte_end":114665,"line_start":1614,"line_end":1614,"column_start":10,"column_end":19},"name":"AutoU32x8","qualname":"::simd::auto_simd_impl::AutoU32x8","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":525},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114697,"byte_end":114707,"line_start":1615,"line_end":1615,"column_start":10,"column_end":20},"name":"AutoU32x16","qualname":"::simd::auto_simd_impl::AutoU32x16","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114740,"byte_end":114749,"line_start":1616,"line_end":1616,"column_start":10,"column_end":19},"name":"AutoU64x2","qualname":"::simd::auto_simd_impl::AutoU64x2","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":529},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114781,"byte_end":114790,"line_start":1617,"line_end":1617,"column_start":10,"column_end":19},"name":"AutoU64x4","qualname":"::simd::auto_simd_impl::AutoU64x4","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":531},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114822,"byte_end":114831,"line_start":1618,"line_end":1618,"column_start":10,"column_end":19},"name":"AutoU64x8","qualname":"::simd::auto_simd_impl::AutoU64x8","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":533},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114863,"byte_end":114871,"line_start":1619,"line_end":1619,"column_start":10,"column_end":18},"name":"AutoU8x2","qualname":"::simd::auto_simd_impl::AutoU8x2","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":535},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114902,"byte_end":114910,"line_start":1620,"line_end":1620,"column_start":10,"column_end":18},"name":"AutoU8x4","qualname":"::simd::auto_simd_impl::AutoU8x4","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":537},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114941,"byte_end":114949,"line_start":1621,"line_end":1621,"column_start":10,"column_end":18},"name":"AutoU8x8","qualname":"::simd::auto_simd_impl::AutoU8x8","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":539},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":114980,"byte_end":114989,"line_start":1622,"line_end":1622,"column_start":10,"column_end":19},"name":"AutoU8x16","qualname":"::simd::auto_simd_impl::AutoU8x16","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":541},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115021,"byte_end":115030,"line_start":1623,"line_end":1623,"column_start":10,"column_end":19},"name":"AutoU8x32","qualname":"::simd::auto_simd_impl::AutoU8x32","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":543},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115106,"byte_end":115117,"line_start":1625,"line_end":1625,"column_start":10,"column_end":21},"name":"AutoUsizex2","qualname":"::simd::auto_simd_impl::AutoUsizex2","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":545},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115151,"byte_end":115162,"line_start":1626,"line_end":1626,"column_start":10,"column_end":21},"name":"AutoUsizex4","qualname":"::simd::auto_simd_impl::AutoUsizex4","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":547},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115196,"byte_end":115207,"line_start":1627,"line_end":1627,"column_start":10,"column_end":21},"name":"AutoUsizex8","qualname":"::simd::auto_simd_impl::AutoUsizex8","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":549},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115242,"byte_end":115252,"line_start":1629,"line_end":1629,"column_start":10,"column_end":20},"name":"AutoBoolx1","qualname":"::simd::auto_simd_impl::AutoBoolx1","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":551},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115285,"byte_end":115296,"line_start":1630,"line_end":1630,"column_start":10,"column_end":21},"name":"AutoBoolx16","qualname":"::simd::auto_simd_impl::AutoBoolx16","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":553},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115330,"byte_end":115340,"line_start":1631,"line_end":1631,"column_start":10,"column_end":20},"name":"AutoBoolx2","qualname":"::simd::auto_simd_impl::AutoBoolx2","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":555},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115373,"byte_end":115384,"line_start":1632,"line_end":1632,"column_start":10,"column_end":21},"name":"AutoBoolx32","qualname":"::simd::auto_simd_impl::AutoBoolx32","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":557},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115418,"byte_end":115428,"line_start":1633,"line_end":1633,"column_start":10,"column_end":20},"name":"AutoBoolx4","qualname":"::simd::auto_simd_impl::AutoBoolx4","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":559},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115509,"byte_end":115519,"line_start":1635,"line_end":1635,"column_start":10,"column_end":20},"name":"AutoBoolx8","qualname":"::simd::auto_simd_impl::AutoBoolx8","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":589},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118233,"byte_end":118241,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self> + Not<Output = Self>","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":607}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":117940,"byte_end":117997,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":117998,"byte_end":118001,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118002,"byte_end":118095,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118096,"byte_end":118190,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118191,"byte_end":118222,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118556,"byte_end":118563,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"fn bitmask(Self) -> u64","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118384,"byte_end":118454,"line_start":16,"line_end":16,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118459,"byte_end":118462,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118467,"byte_end":118548,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118639,"byte_end":118642,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"fn and(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118582,"byte_end":118631,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118718,"byte_end":118720,"line_start":23,"line_end":23,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"fn or(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118662,"byte_end":118710,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118797,"byte_end":118800,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"fn xor(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118740,"byte_end":118789,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118858,"byte_end":118861,"line_start":27,"line_end":27,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"fn all(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118820,"byte_end":118850,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118917,"byte_end":118920,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"fn any(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118881,"byte_end":118909,"line_start":28,"line_end":28,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118979,"byte_end":118983,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"fn none(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118940,"byte_end":118971,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119473,"byte_end":119480,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"fn if_else<Res, impl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119003,"byte_end":119092,"line_start":32,"line_end":32,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119097,"byte_end":119100,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119105,"byte_end":119214,"line_start":34,"line_end":34,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119219,"byte_end":119330,"line_start":35,"line_end":35,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119335,"byte_end":119338,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119343,"byte_end":119449,"line_start":37,"line_end":37,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119454,"byte_end":119465,"line_start":38,"line_end":38,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120357,"byte_end":120365,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"fn if_else2<Res, impl FnOnce() -> Res, impl FnOnce() -> Self,\nimpl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce() ->\nRes, impl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119630,"byte_end":119755,"line_start":45,"line_end":45,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119760,"byte_end":119763,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119768,"byte_end":119877,"line_start":47,"line_end":47,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":119882,"byte_end":120054,"line_start":48,"line_end":48,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120059,"byte_end":120232,"line_start":49,"line_end":49,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120237,"byte_end":120240,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120245,"byte_end":120349,"line_start":51,"line_end":51,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121442,"byte_end":121450,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"fn if_else3<Res, impl FnOnce() -> Res, impl FnOnce() -> Self,\nimpl FnOnce() -> Res, impl FnOnce() -> Self, impl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res),\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce() ->\nRes, impl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce()\n-> Res, impl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120579,"byte_end":120750,"line_start":59,"line_end":59,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120755,"byte_end":120758,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120763,"byte_end":120872,"line_start":61,"line_end":61,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":120877,"byte_end":121049,"line_start":62,"line_end":62,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121054,"byte_end":121240,"line_start":63,"line_end":63,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121245,"byte_end":121317,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121322,"byte_end":121325,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121330,"byte_end":121434,"line_start":66,"line_end":66,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121785,"byte_end":121792,"line_start":78,"line_end":78,"column_start":8,"column_end":15},"name":"bitmask","qualname":"<bool as simd::simd_bool::SimdBool>::bitmask","value":"fn bitmask(Self) -> u64","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":590},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121760,"byte_end":121777,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121864,"byte_end":121867,"line_start":83,"line_end":83,"column_start":8,"column_end":11},"name":"and","qualname":"<bool as simd::simd_bool::SimdBool>::and","value":"fn and(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":591},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121839,"byte_end":121856,"line_start":82,"line_end":82,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121933,"byte_end":121935,"line_start":88,"line_end":88,"column_start":8,"column_end":10},"name":"or","qualname":"<bool as simd::simd_bool::SimdBool>::or","value":"fn or(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":592},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121908,"byte_end":121925,"line_start":87,"line_end":87,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122001,"byte_end":122004,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"xor","qualname":"<bool as simd::simd_bool::SimdBool>::xor","value":"fn xor(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":593},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":121976,"byte_end":121993,"line_start":92,"line_end":92,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122070,"byte_end":122073,"line_start":98,"line_end":98,"column_start":8,"column_end":11},"name":"all","qualname":"<bool as simd::simd_bool::SimdBool>::all","value":"fn all(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":594},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122045,"byte_end":122062,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122139,"byte_end":122142,"line_start":103,"line_end":103,"column_start":8,"column_end":11},"name":"any","qualname":"<bool as simd::simd_bool::SimdBool>::any","value":"fn any(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":595},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122114,"byte_end":122131,"line_start":102,"line_end":102,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122208,"byte_end":122212,"line_start":108,"line_end":108,"column_start":8,"column_end":12},"name":"none","qualname":"<bool as simd::simd_bool::SimdBool>::none","value":"fn none(Self) -> bool","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":596},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122183,"byte_end":122200,"line_start":107,"line_end":107,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122279,"byte_end":122286,"line_start":113,"line_end":113,"column_start":8,"column_end":15},"name":"if_else","qualname":"<bool as simd::simd_bool::SimdBool>::if_else","value":"fn if_else<Res, impl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":597},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122254,"byte_end":122271,"line_start":112,"line_end":112,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122561,"byte_end":122569,"line_start":126,"line_end":126,"column_start":8,"column_end":16},"name":"if_else2","qualname":"<bool as simd::simd_bool::SimdBool>::if_else2","value":"fn if_else2<Res, impl FnOnce() -> Res, impl FnOnce() -> Self,\nimpl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce() ->\nRes, impl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":601},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122536,"byte_end":122553,"line_start":125,"line_end":125,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122964,"byte_end":122972,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"if_else3","qualname":"<bool as simd::simd_bool::SimdBool>::if_else3","value":"fn if_else3<Res, impl FnOnce() -> Res, impl FnOnce() -> Self,\nimpl FnOnce() -> Res, impl FnOnce() -> Self, impl FnOnce() -> Res,\nimpl FnOnce() -> Res>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res),\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res\nwhere Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce() -> Res,\nimpl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce() ->\nRes, impl FnOnce() -> Self: FnOnce() -> Self, impl FnOnce() -> Res: FnOnce()\n-> Res, impl FnOnce() -> Res: FnOnce() -> Res","parent":{"krate":0,"index":589},"children":[],"decl_id":{"krate":0,"index":607},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":122939,"byte_end":122956,"line_start":141,"line_end":141,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":684},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123881,"byte_end":123897,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Clone + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":42902},{"krate":0,"index":42903},{"krate":0,"index":42904},{"krate":0,"index":42905},{"krate":0,"index":42906},{"krate":0,"index":42907},{"krate":0,"index":42908},{"krate":0,"index":42909},{"krate":0,"index":42910},{"krate":0,"index":42911},{"krate":0,"index":42912},{"krate":0,"index":42913},{"krate":0,"index":42914},{"krate":0,"index":42915},{"krate":0,"index":42916},{"krate":0,"index":42917},{"krate":0,"index":42918},{"krate":0,"index":42919},{"krate":0,"index":42920},{"krate":0,"index":42921},{"krate":0,"index":42922},{"krate":0,"index":42923},{"krate":0,"index":42924},{"krate":0,"index":42925},{"krate":0,"index":42926},{"krate":0,"index":42927},{"krate":0,"index":42928},{"krate":0,"index":42929},{"krate":0,"index":42930},{"krate":0,"index":42931},{"krate":0,"index":42932},{"krate":0,"index":42933},{"krate":0,"index":42934},{"krate":0,"index":42935},{"krate":0,"index":42936},{"krate":0,"index":42937},{"krate":0,"index":42938},{"krate":0,"index":42939},{"krate":0,"index":42940},{"krate":0,"index":42941},{"krate":0,"index":42942},{"krate":0,"index":42943},{"krate":0,"index":42944},{"krate":0,"index":42945},{"krate":0,"index":42946},{"krate":0,"index":42947},{"krate":0,"index":42948},{"krate":0,"index":42949},{"krate":0,"index":42950},{"krate":0,"index":42951},{"krate":0,"index":42952},{"krate":0,"index":42953},{"krate":0,"index":42954},{"krate":0,"index":686},{"krate":0,"index":687}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123698,"byte_end":123770,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123771,"byte_end":123774,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123775,"byte_end":123847,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123848,"byte_end":123870,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":685},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124208,"byte_end":124221,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124149,"byte_end":124198,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124391,"byte_end":124410,"line_start":36,"line_end":36,"column_start":8,"column_end":27},"name":"simd_horizontal_sum","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_sum","value":"fn simd_horizontal_sum(Self) -> Self::Element","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":" Computes the sum of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the sum of all the lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124335,"byte_end":124383,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124500,"byte_end":124523,"line_start":39,"line_end":39,"column_start":8,"column_end":31},"name":"simd_horizontal_product","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_product","value":"fn simd_horizontal_product(Self) -> Self::Element","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":" Computes the product of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the product of all the lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124440,"byte_end":124492,"line_start":38,"line_end":38,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124717,"byte_end":124731,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"from_simd_real","qualname":"<T as simd::simd_complex::SimdComplexField>::from_simd_real","value":"fn from_simd_real(Self::SimdRealField) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42902},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124692,"byte_end":124709,"line_start":46,"line_end":46,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124830,"byte_end":124839,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"simd_real","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_real","value":"fn simd_real(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42903},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124805,"byte_end":124822,"line_start":50,"line_end":50,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124926,"byte_end":124940,"line_start":55,"line_end":55,"column_start":8,"column_end":22},"name":"simd_imaginary","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_imaginary","value":"fn simd_imaginary(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42904},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124901,"byte_end":124918,"line_start":54,"line_end":54,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125032,"byte_end":125044,"line_start":59,"line_end":59,"column_start":8,"column_end":20},"name":"simd_modulus","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_modulus","value":"fn simd_modulus(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42905},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125007,"byte_end":125024,"line_start":58,"line_end":58,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125134,"byte_end":125154,"line_start":63,"line_end":63,"column_start":8,"column_end":28},"name":"simd_modulus_squared","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_modulus_squared","value":"fn simd_modulus_squared(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42906},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125109,"byte_end":125126,"line_start":62,"line_end":62,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125252,"byte_end":125265,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"simd_argument","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_argument","value":"fn simd_argument(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42907},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125227,"byte_end":125244,"line_start":66,"line_end":66,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125356,"byte_end":125366,"line_start":71,"line_end":71,"column_start":8,"column_end":18},"name":"simd_norm1","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_norm1","value":"fn simd_norm1(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42908},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125331,"byte_end":125348,"line_start":70,"line_end":70,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125454,"byte_end":125464,"line_start":75,"line_end":75,"column_start":8,"column_end":18},"name":"simd_scale","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_scale","value":"fn simd_scale(Self, Self::SimdRealField) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42909},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125429,"byte_end":125446,"line_start":74,"line_end":74,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125572,"byte_end":125584,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"simd_unscale","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_unscale","value":"fn simd_unscale(Self, Self::SimdRealField) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42910},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125547,"byte_end":125564,"line_start":78,"line_end":78,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125694,"byte_end":125707,"line_start":83,"line_end":83,"column_start":8,"column_end":21},"name":"simd_to_polar","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_to_polar","value":"fn simd_to_polar(Self) -> (Self::SimdRealField, Self::SimdRealField)","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42911},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125669,"byte_end":125686,"line_start":82,"line_end":82,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125821,"byte_end":125832,"line_start":87,"line_end":87,"column_start":8,"column_end":19},"name":"simd_to_exp","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_to_exp","value":"fn simd_to_exp(Self) -> (Self::SimdRealField, Self)","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42912},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125796,"byte_end":125813,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125929,"byte_end":125940,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_signum","value":"fn simd_signum(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42913},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125904,"byte_end":125921,"line_start":90,"line_end":90,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126015,"byte_end":126025,"line_start":96,"line_end":96,"column_start":8,"column_end":18},"name":"simd_floor","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_floor","value":"fn simd_floor(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42914},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":125990,"byte_end":126007,"line_start":95,"line_end":95,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126098,"byte_end":126107,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"simd_ceil","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_ceil","value":"fn simd_ceil(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42915},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126073,"byte_end":126090,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126179,"byte_end":126189,"line_start":104,"line_end":104,"column_start":8,"column_end":18},"name":"simd_round","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_round","value":"fn simd_round(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42916},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126154,"byte_end":126171,"line_start":103,"line_end":103,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126262,"byte_end":126272,"line_start":108,"line_end":108,"column_start":8,"column_end":18},"name":"simd_trunc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_trunc","value":"fn simd_trunc(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42917},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126237,"byte_end":126254,"line_start":107,"line_end":107,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126345,"byte_end":126355,"line_start":112,"line_end":112,"column_start":8,"column_end":18},"name":"simd_fract","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_fract","value":"fn simd_fract(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42918},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126320,"byte_end":126337,"line_start":111,"line_end":111,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126428,"byte_end":126440,"line_start":116,"line_end":116,"column_start":8,"column_end":20},"name":"simd_mul_add","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_mul_add","value":"fn simd_mul_add(Self, Self, Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42919},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126403,"byte_end":126420,"line_start":115,"line_end":115,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126538,"byte_end":126546,"line_start":121,"line_end":121,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_abs","value":"fn simd_abs(Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42920},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126513,"byte_end":126530,"line_start":120,"line_end":120,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126632,"byte_end":126642,"line_start":125,"line_end":125,"column_start":8,"column_end":18},"name":"simd_hypot","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_hypot","value":"fn simd_hypot(Self, Self) -> Self::SimdRealField","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42921},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126607,"byte_end":126624,"line_start":124,"line_end":124,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126749,"byte_end":126759,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"simd_recip","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_recip","value":"fn simd_recip(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42922},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126724,"byte_end":126741,"line_start":129,"line_end":129,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126832,"byte_end":126846,"line_start":134,"line_end":134,"column_start":8,"column_end":22},"name":"simd_conjugate","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_conjugate","value":"fn simd_conjugate(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42923},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126807,"byte_end":126824,"line_start":133,"line_end":133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126923,"byte_end":126931,"line_start":138,"line_end":138,"column_start":8,"column_end":16},"name":"simd_sin","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sin","value":"fn simd_sin(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42924},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126898,"byte_end":126915,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127002,"byte_end":127010,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"simd_cos","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_cos","value":"fn simd_cos(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42925},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":126977,"byte_end":126994,"line_start":141,"line_end":141,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127081,"byte_end":127093,"line_start":146,"line_end":146,"column_start":8,"column_end":20},"name":"simd_sin_cos","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sin_cos","value":"fn simd_sin_cos(Self) -> (Self, Self)","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42926},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127056,"byte_end":127073,"line_start":145,"line_end":145,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127176,"byte_end":127190,"line_start":150,"line_end":150,"column_start":8,"column_end":22},"name":"simd_sinh_cosh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sinh_cosh","value":"fn simd_sinh_cosh(Self) -> (Self, Self)","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42927},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127151,"byte_end":127168,"line_start":149,"line_end":149,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127275,"byte_end":127283,"line_start":154,"line_end":154,"column_start":8,"column_end":16},"name":"simd_tan","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_tan","value":"fn simd_tan(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42928},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127250,"byte_end":127267,"line_start":153,"line_end":153,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127354,"byte_end":127363,"line_start":158,"line_end":158,"column_start":8,"column_end":17},"name":"simd_asin","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_asin","value":"fn simd_asin(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42929},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127329,"byte_end":127346,"line_start":157,"line_end":157,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127435,"byte_end":127444,"line_start":162,"line_end":162,"column_start":8,"column_end":17},"name":"simd_acos","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_acos","value":"fn simd_acos(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42930},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127410,"byte_end":127427,"line_start":161,"line_end":161,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127516,"byte_end":127525,"line_start":166,"line_end":166,"column_start":8,"column_end":17},"name":"simd_atan","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_atan","value":"fn simd_atan(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42931},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127491,"byte_end":127508,"line_start":165,"line_end":165,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127597,"byte_end":127606,"line_start":170,"line_end":170,"column_start":8,"column_end":17},"name":"simd_sinh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sinh","value":"fn simd_sinh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42932},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127572,"byte_end":127589,"line_start":169,"line_end":169,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127678,"byte_end":127687,"line_start":174,"line_end":174,"column_start":8,"column_end":17},"name":"simd_cosh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_cosh","value":"fn simd_cosh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42933},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127653,"byte_end":127670,"line_start":173,"line_end":173,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127759,"byte_end":127768,"line_start":178,"line_end":178,"column_start":8,"column_end":17},"name":"simd_tanh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_tanh","value":"fn simd_tanh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42934},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127734,"byte_end":127751,"line_start":177,"line_end":177,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127840,"byte_end":127850,"line_start":182,"line_end":182,"column_start":8,"column_end":18},"name":"simd_asinh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_asinh","value":"fn simd_asinh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42935},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127815,"byte_end":127832,"line_start":181,"line_end":181,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127923,"byte_end":127933,"line_start":186,"line_end":186,"column_start":8,"column_end":18},"name":"simd_acosh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_acosh","value":"fn simd_acosh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42936},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127898,"byte_end":127915,"line_start":185,"line_end":185,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128006,"byte_end":128016,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"simd_atanh","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_atanh","value":"fn simd_atanh(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42937},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":127981,"byte_end":127998,"line_start":189,"line_end":189,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128090,"byte_end":128099,"line_start":195,"line_end":195,"column_start":8,"column_end":17},"name":"simd_sinc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sinc","value":"fn simd_sinc(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42938},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128065,"byte_end":128082,"line_start":194,"line_end":194,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128171,"byte_end":128181,"line_start":199,"line_end":199,"column_start":8,"column_end":18},"name":"simd_sinhc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sinhc","value":"fn simd_sinhc(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42939},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128146,"byte_end":128163,"line_start":198,"line_end":198,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128255,"byte_end":128264,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"simd_cosc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_cosc","value":"fn simd_cosc(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42940},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128230,"byte_end":128247,"line_start":203,"line_end":203,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128336,"byte_end":128346,"line_start":208,"line_end":208,"column_start":8,"column_end":18},"name":"simd_coshc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_coshc","value":"fn simd_coshc(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42941},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128311,"byte_end":128328,"line_start":207,"line_end":207,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128420,"byte_end":128428,"line_start":213,"line_end":213,"column_start":8,"column_end":16},"name":"simd_log","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_log","value":"fn simd_log(Self, Self::SimdRealField) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42942},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128395,"byte_end":128412,"line_start":212,"line_end":212,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128530,"byte_end":128539,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"simd_log2","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_log2","value":"fn simd_log2(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42943},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128505,"byte_end":128522,"line_start":216,"line_end":216,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128611,"byte_end":128621,"line_start":221,"line_end":221,"column_start":8,"column_end":18},"name":"simd_log10","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_log10","value":"fn simd_log10(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42944},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128586,"byte_end":128603,"line_start":220,"line_end":220,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128694,"byte_end":128701,"line_start":225,"line_end":225,"column_start":8,"column_end":15},"name":"simd_ln","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_ln","value":"fn simd_ln(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42945},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128669,"byte_end":128686,"line_start":224,"line_end":224,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128771,"byte_end":128781,"line_start":229,"line_end":229,"column_start":8,"column_end":18},"name":"simd_ln_1p","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_ln_1p","value":"fn simd_ln_1p(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42946},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128746,"byte_end":128763,"line_start":228,"line_end":228,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128854,"byte_end":128863,"line_start":233,"line_end":233,"column_start":8,"column_end":17},"name":"simd_sqrt","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_sqrt","value":"fn simd_sqrt(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42947},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128829,"byte_end":128846,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128935,"byte_end":128943,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"simd_exp","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_exp","value":"fn simd_exp(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42948},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128910,"byte_end":128927,"line_start":236,"line_end":236,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129014,"byte_end":129023,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"simd_exp2","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_exp2","value":"fn simd_exp2(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42949},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":128989,"byte_end":129006,"line_start":240,"line_end":240,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129095,"byte_end":129106,"line_start":245,"line_end":245,"column_start":8,"column_end":19},"name":"simd_exp_m1","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_exp_m1","value":"fn simd_exp_m1(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42950},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129070,"byte_end":129087,"line_start":244,"line_end":244,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129180,"byte_end":129189,"line_start":249,"line_end":249,"column_start":8,"column_end":17},"name":"simd_powi","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_powi","value":"fn simd_powi(Self, i32) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42951},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129155,"byte_end":129172,"line_start":248,"line_end":248,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129270,"byte_end":129279,"line_start":253,"line_end":253,"column_start":8,"column_end":17},"name":"simd_powf","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_powf","value":"fn simd_powf(Self, Self::SimdRealField) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42952},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129245,"byte_end":129262,"line_start":252,"line_end":252,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129376,"byte_end":129385,"line_start":257,"line_end":257,"column_start":8,"column_end":17},"name":"simd_powc","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_powc","value":"fn simd_powc(Self, Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42953},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129351,"byte_end":129368,"line_start":256,"line_end":256,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129467,"byte_end":129476,"line_start":261,"line_end":261,"column_start":8,"column_end":17},"name":"simd_cbrt","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_cbrt","value":"fn simd_cbrt(Self) -> Self","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":42954},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129442,"byte_end":129459,"line_start":260,"line_end":260,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129549,"byte_end":129568,"line_start":266,"line_end":266,"column_start":8,"column_end":27},"name":"simd_horizontal_sum","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_horizontal_sum","value":"fn simd_horizontal_sum(Self) -> Self::Element","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":686},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129524,"byte_end":129541,"line_start":265,"line_end":265,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129642,"byte_end":129665,"line_start":270,"line_end":270,"column_start":8,"column_end":31},"name":"simd_horizontal_product","qualname":"<T as simd::simd_complex::SimdComplexField>::simd_horizontal_product","value":"fn simd_horizontal_product(Self) -> Self::Element","parent":{"krate":0,"index":684},"children":[],"decl_id":{"krate":0,"index":687},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":129617,"byte_end":129634,"line_start":269,"line_end":269,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130629,"byte_end":130639,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130567,"byte_end":130617,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130850,"byte_end":130853,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"fn new(V, V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130733,"byte_end":130838,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130991,"byte_end":130995,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"fn mask(&Self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130935,"byte_end":130979,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131104,"byte_end":131109,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"fn value(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131049,"byte_end":131092,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131378,"byte_end":131384,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"fn option(Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131154,"byte_end":131206,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131211,"byte_end":131214,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131219,"byte_end":131300,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131305,"byte_end":131366,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131677,"byte_end":131688,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"fn simd_unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131517,"byte_end":131588,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131593,"byte_end":131596,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131601,"byte_end":131651,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131656,"byte_end":131665,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132398,"byte_end":132412,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"fn simd_unwrap_or<impl FnOnce() -> V>(Self, impl FnOnce() -> V) -> V where\nimpl FnOnce() -> V: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131863,"byte_end":131920,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131925,"byte_end":131928,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":131933,"byte_end":132062,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132067,"byte_end":132191,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132196,"byte_end":132199,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132204,"byte_end":132324,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132329,"byte_end":132364,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":132369,"byte_end":132386,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":771},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132620,"byte_end":132634,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132535,"byte_end":132609,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132703,"byte_end":132710,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132652,"byte_end":132695,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132801,"byte_end":132808,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132753,"byte_end":132793,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132907,"byte_end":132914,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132851,"byte_end":132899,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133010,"byte_end":133017,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132957,"byte_end":133002,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133105,"byte_end":133112,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133060,"byte_end":133097,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133204,"byte_end":133211,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133155,"byte_end":133196,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133286,"byte_end":133294,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133255,"byte_end":133278,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133358,"byte_end":133366,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133327,"byte_end":133350,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133488,"byte_end":133498,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133399,"byte_end":133480,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133593,"byte_end":133612,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133541,"byte_end":133585,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133693,"byte_end":133712,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133641,"byte_end":133685,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133854,"byte_end":133861,"line_start":33,"line_end":33,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_gt","value":"fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":772},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133829,"byte_end":133846,"line_start":32,"line_end":32,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133958,"byte_end":133965,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_lt","value":"fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":773},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133933,"byte_end":133950,"line_start":37,"line_end":37,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134062,"byte_end":134069,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_ge","value":"fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":774},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134037,"byte_end":134054,"line_start":42,"line_end":42,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134167,"byte_end":134174,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"simd_le","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_le","value":"fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":775},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134142,"byte_end":134159,"line_start":47,"line_end":47,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134272,"byte_end":134279,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_eq","value":"fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":776},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134247,"byte_end":134264,"line_start":52,"line_end":52,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134377,"byte_end":134384,"line_start":58,"line_end":58,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_ne","value":"fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":777},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134352,"byte_end":134369,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134482,"byte_end":134490,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"simd_max","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_max","value":"fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":778},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134457,"byte_end":134474,"line_start":62,"line_end":62,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134645,"byte_end":134653,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"simd_min","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_min","value":"fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":779},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134620,"byte_end":134637,"line_start":71,"line_end":71,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134808,"byte_end":134818,"line_start":81,"line_end":81,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_clamp","value":"fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":780},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134783,"byte_end":134800,"line_start":80,"line_end":80,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":135024,"byte_end":135043,"line_start":92,"line_end":92,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_horizontal_min","value":"fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":781},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":134999,"byte_end":135016,"line_start":91,"line_end":91,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":135118,"byte_end":135137,"line_start":97,"line_end":97,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"<T as simd::simd_partial_ord::SimdPartialOrd>::simd_horizontal_max","value":"fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":771},"children":[],"decl_id":{"krate":0,"index":782},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":135093,"byte_end":135110,"line_start":96,"line_end":96,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":810},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135554,"byte_end":135567,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135281,"byte_end":135339,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135340,"byte_end":135343,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135344,"byte_end":135410,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135411,"byte_end":135520,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135521,"byte_end":135543,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135857,"byte_end":135870,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135648,"byte_end":135688,"line_start":12,"line_end":12,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135693,"byte_end":135696,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135701,"byte_end":135772,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135777,"byte_end":135849,"line_start":15,"line_end":15,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135905,"byte_end":135915,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135952,"byte_end":135972,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135991,"byte_end":135998,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"fn simd_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136017,"byte_end":136028,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"fn simd_two_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136047,"byte_end":136061,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136080,"byte_end":136094,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136113,"byte_end":136127,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136146,"byte_end":136160,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136179,"byte_end":136193,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136212,"byte_end":136226,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136245,"byte_end":136259,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136278,"byte_end":136297,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136317,"byte_end":136323,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"fn simd_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136342,"byte_end":136353,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"fn simd_log2_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136372,"byte_end":136384,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"fn simd_log10_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136403,"byte_end":136412,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"fn simd_ln_2() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136431,"byte_end":136441,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"fn simd_ln_10() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136569,"byte_end":136579,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"<T as simd::simd_real::SimdRealField>::simd_atan2","value":"fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":812},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136544,"byte_end":136561,"line_start":40,"line_end":40,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136671,"byte_end":136691,"line_start":46,"line_end":46,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"<T as simd::simd_real::SimdRealField>::simd_default_epsilon","value":"fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":813},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136646,"byte_end":136663,"line_start":45,"line_end":45,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136771,"byte_end":136784,"line_start":50,"line_end":50,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"<T as simd::simd_real::SimdRealField>::simd_copysign","value":"fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":811},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136746,"byte_end":136763,"line_start":49,"line_end":49,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136876,"byte_end":136883,"line_start":54,"line_end":54,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"<T as simd::simd_real::SimdRealField>::simd_pi","value":"fn simd_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":814},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136851,"byte_end":136868,"line_start":53,"line_end":53,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136950,"byte_end":136961,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"<T as simd::simd_real::SimdRealField>::simd_two_pi","value":"fn simd_two_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":815},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136925,"byte_end":136942,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137032,"byte_end":137046,"line_start":62,"line_end":62,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_pi_2","value":"fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":816},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137007,"byte_end":137024,"line_start":61,"line_end":61,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137120,"byte_end":137134,"line_start":66,"line_end":66,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_pi_3","value":"fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":817},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137095,"byte_end":137112,"line_start":65,"line_end":65,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137208,"byte_end":137222,"line_start":70,"line_end":70,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_pi_4","value":"fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":818},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137183,"byte_end":137200,"line_start":69,"line_end":69,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137296,"byte_end":137310,"line_start":74,"line_end":74,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_pi_6","value":"fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":819},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137271,"byte_end":137288,"line_start":73,"line_end":73,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137384,"byte_end":137398,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_pi_8","value":"fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":820},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137359,"byte_end":137376,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137472,"byte_end":137486,"line_start":82,"line_end":82,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_1_pi","value":"fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":821},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137447,"byte_end":137464,"line_start":81,"line_end":81,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137560,"byte_end":137574,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_2_pi","value":"fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":822},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137535,"byte_end":137552,"line_start":85,"line_end":85,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137648,"byte_end":137667,"line_start":90,"line_end":90,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"<T as simd::simd_real::SimdRealField>::simd_frac_2_sqrt_pi","value":"fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":823},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137623,"byte_end":137640,"line_start":89,"line_end":89,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137747,"byte_end":137753,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"simd_e","qualname":"<T as simd::simd_real::SimdRealField>::simd_e","value":"fn simd_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":824},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137722,"byte_end":137739,"line_start":94,"line_end":94,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137819,"byte_end":137830,"line_start":99,"line_end":99,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"<T as simd::simd_real::SimdRealField>::simd_log2_e","value":"fn simd_log2_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":825},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137794,"byte_end":137811,"line_start":98,"line_end":98,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137901,"byte_end":137913,"line_start":103,"line_end":103,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"<T as simd::simd_real::SimdRealField>::simd_log10_e","value":"fn simd_log10_e() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":826},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137876,"byte_end":137893,"line_start":102,"line_end":102,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137985,"byte_end":137994,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"<T as simd::simd_real::SimdRealField>::simd_ln_2","value":"fn simd_ln_2() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":827},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":137960,"byte_end":137977,"line_start":106,"line_end":106,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":138063,"byte_end":138073,"line_start":111,"line_end":111,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"<T as simd::simd_real::SimdRealField>::simd_ln_10","value":"fn simd_ln_10() -> Self","parent":{"krate":0,"index":810},"children":[],"decl_id":{"krate":0,"index":828},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":138038,"byte_end":138055,"line_start":110,"line_end":110,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":856},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138294,"byte_end":138304,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138163,"byte_end":138283,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138376,"byte_end":138384,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138322,"byte_end":138368,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138675,"byte_end":138687,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138405,"byte_end":138456,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138461,"byte_end":138464,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138469,"byte_end":138574,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138579,"byte_end":138667,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138768,"byte_end":138779,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138722,"byte_end":138760,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138841,"byte_end":138857,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138800,"byte_end":138833,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138929,"byte_end":138945,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138888,"byte_end":138921,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139068,"byte_end":139076,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"<T as simd::simd_signed::SimdSigned>::simd_abs","value":"fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":{"krate":0,"index":857},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139043,"byte_end":139060,"line_start":22,"line_end":22,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139149,"byte_end":139161,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"<T as simd::simd_signed::SimdSigned>::simd_abs_sub","value":"fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":{"krate":0,"index":858},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139124,"byte_end":139141,"line_start":27,"line_end":27,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139257,"byte_end":139268,"line_start":33,"line_end":33,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"<T as simd::simd_signed::SimdSigned>::simd_signum","value":"fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":{"krate":0,"index":859},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139232,"byte_end":139249,"line_start":32,"line_end":32,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139344,"byte_end":139360,"line_start":38,"line_end":38,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"<T as simd::simd_signed::SimdSigned>::is_simd_positive","value":"fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":856},"children":[],"decl_id":{"krate":0,"index":860},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139319,"byte_end":139336,"line_start":37,"line_end":37,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139451,"byte_end":139467,"line_start":43,"line_end":43,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"<T as simd::simd_signed::SimdSigned>::is_simd_negative","value":"fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":856},"children":[],"decl_id":{"krate":0,"index":861},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139426,"byte_end":139443,"line_start":42,"line_end":42,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":873},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139606,"byte_end":139615,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":885}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139559,"byte_end":139595,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139700,"byte_end":139707,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139629,"byte_end":139690,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":875},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139840,"byte_end":139848,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139766,"byte_end":139830,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139916,"byte_end":139921,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"fn lanes() -> usize","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139865,"byte_end":139908,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140005,"byte_end":140010,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"fn splat(Self::Element) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139938,"byte_end":139997,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140137,"byte_end":140144,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140044,"byte_end":140081,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140086,"byte_end":140089,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140094,"byte_end":140129,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140259,"byte_end":140276,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140184,"byte_end":140244,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140418,"byte_end":140425,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140316,"byte_end":140362,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140367,"byte_end":140370,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140375,"byte_end":140410,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140556,"byte_end":140573,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140472,"byte_end":140541,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140923,"byte_end":140929,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140621,"byte_end":140684,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140689,"byte_end":140692,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140697,"byte_end":140803,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140808,"byte_end":140915,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141255,"byte_end":141264,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"fn map_lanes<impl Fn(Self::Element) -> Self::Element>(Self,\nimpl Fn(Self::Element) -> Self::Element) -> Self where Self: Clone,\nimpl Fn(Self::Element) -> Self::Element: Fn(Self::Element) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":140985,"byte_end":141031,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141036,"byte_end":141039,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141044,"byte_end":141118,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141123,"byte_end":141199,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141204,"byte_end":141225,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141230,"byte_end":141247,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141866,"byte_end":141879,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"fn zip_map_lanes<impl Fn(Self::Element, Self::Element) -> Self::Element>(Self,\nSelf, impl Fn(Self::Element, Self::Element) -> Self::Element) -> Self where\nSelf: Clone,\nimpl Fn(Self::Element, Self::Element) -> Self::Element: Fn(Self::Element,\nSelf::Element) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141554,"byte_end":141642,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141647,"byte_end":141650,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141655,"byte_end":141729,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141734,"byte_end":141810,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141815,"byte_end":141836,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":141841,"byte_end":141858,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":887},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142699,"byte_end":142717,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142328,"byte_end":142403,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142404,"byte_end":142407,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142408,"byte_end":142485,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142486,"byte_end":142572,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142573,"byte_end":142662,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142663,"byte_end":142688,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142915,"byte_end":142920,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"lanes","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::lanes","value":"fn lanes() -> usize","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":876},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142890,"byte_end":142907,"line_start":92,"line_end":92,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142989,"byte_end":142994,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"splat","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::splat","value":"fn splat(Self::Element) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":877},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142964,"byte_end":142981,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143170,"byte_end":143177,"line_start":106,"line_end":106,"column_start":8,"column_end":15},"name":"extract","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::extract","value":"fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":878},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143145,"byte_end":143162,"line_start":105,"line_end":105,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143370,"byte_end":143387,"line_start":114,"line_end":114,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::extract_unchecked","value":"unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":879},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143338,"byte_end":143355,"line_start":113,"line_end":113,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143593,"byte_end":143600,"line_start":122,"line_end":122,"column_start":8,"column_end":15},"name":"replace","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::replace","value":"fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":880},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143568,"byte_end":143585,"line_start":121,"line_end":121,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143759,"byte_end":143776,"line_start":128,"line_end":128,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::replace_unchecked","value":"unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":881},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143727,"byte_end":143744,"line_start":127,"line_end":127,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143948,"byte_end":143954,"line_start":134,"line_end":134,"column_start":8,"column_end":14},"name":"select","qualname":"<num_complex::Complex<N> as simd::simd_value::SimdValue>::select","value":"fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":{"krate":0,"index":882},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":143923,"byte_end":143940,"line_start":133,"line_end":133,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":43120},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146544,"byte_end":146553,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"WideF32x4","qualname":"::simd::wide_simd_impl::WideF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146329,"byte_end":146428,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146429,"byte_end":146432,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146433,"byte_end":146481,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146482,"byte_end":146502,"line_start":26,"line_end":26,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43122},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146554,"byte_end":146569,"line_start":28,"line_end":28,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43128},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146800,"byte_end":146813,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"WideBoolF32x4","qualname":"::simd::wide_simd_impl::WideBoolF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146573,"byte_end":146684,"line_start":30,"line_end":30,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146685,"byte_end":146688,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146689,"byte_end":146737,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146738,"byte_end":146758,"line_start":33,"line_end":33,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43130},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146814,"byte_end":146829,"line_start":35,"line_end":35,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43128},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43136},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147048,"byte_end":147057,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"WideF32x8","qualname":"::simd::wide_simd_impl::WideF32x8","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f32x8` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f32x8` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146833,"byte_end":146932,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146933,"byte_end":146936,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146937,"byte_end":146985,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":146986,"byte_end":147006,"line_start":40,"line_end":40,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43138},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147058,"byte_end":147073,"line_start":42,"line_end":42,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF32x8::0","value":"wide::f32x8","parent":{"krate":0,"index":43136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43144},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147304,"byte_end":147317,"line_start":49,"line_end":49,"column_start":12,"column_end":25},"name":"WideBoolF32x8","qualname":"::simd::wide_simd_impl::WideBoolF32x8","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f32x8` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f32x8` that implements all the relevant traits from `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147077,"byte_end":147188,"line_start":44,"line_end":44,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147189,"byte_end":147192,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147193,"byte_end":147241,"line_start":46,"line_end":46,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147242,"byte_end":147262,"line_start":47,"line_end":47,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43146},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147318,"byte_end":147333,"line_start":49,"line_end":49,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF32x8::0","value":"wide::f32x8","parent":{"krate":0,"index":43144},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43152},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147552,"byte_end":147561,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"WideF64x4","qualname":"::simd::wide_simd_impl::WideF64x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f64x4` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f64x4` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147337,"byte_end":147436,"line_start":51,"line_end":51,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147437,"byte_end":147440,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147441,"byte_end":147489,"line_start":53,"line_end":53,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147490,"byte_end":147510,"line_start":54,"line_end":54,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43154},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147562,"byte_end":147577,"line_start":56,"line_end":56,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF64x4::0","value":"wide::f64x4","parent":{"krate":0,"index":43152},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43160},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147808,"byte_end":147821,"line_start":63,"line_end":63,"column_start":12,"column_end":25},"name":"WideBoolF64x4","qualname":"::simd::wide_simd_impl::WideBoolF64x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f64x4` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f64x4` that implements all the relevant traits from `simba`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147581,"byte_end":147692,"line_start":58,"line_end":58,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147693,"byte_end":147696,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147697,"byte_end":147745,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147746,"byte_end":147766,"line_start":61,"line_end":61,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43162},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/wide_simd_impl.rs","byte_start":147822,"byte_end":147837,"line_start":63,"line_end":63,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF64x4::0","value":"wide::f64x4","parent":{"krate":0,"index":43160},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":33906,"byte_end":33913,"line_start":1060,"line_end":1060,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48994,"byte_end":48995,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49086,"byte_end":49087,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49178,"byte_end":49179,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49270,"byte_end":49271,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49348,"byte_end":49349,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49575,"byte_end":49582,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53850,"byte_end":53852,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56068,"byte_end":56075,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124644,"byte_end":124645,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130713,"byte_end":130723,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133821,"byte_end":133822,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136536,"byte_end":136537,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139035,"byte_end":139036,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142786,"byte_end":142793,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":144216,"byte_end":144223,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":289}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3039,"byte_end":3051,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3076,"byte_end":3086,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":21,"index":60},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3109,"byte_end":3115,"line_start":25,"line_end":25,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":21,"index":100},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3138,"byte_end":3144,"line_start":26,"line_end":26,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":20,"index":943},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/real.rs","byte_start":3151,"byte_end":3161,"line_start":27,"line_end":27,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2877},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16253,"byte_end":16261,"line_start":170,"line_end":170,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16274,"byte_end":16284,"line_start":171,"line_end":171,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":268},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16296,"byte_end":16309,"line_start":172,"line_end":172,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":20,"index":337},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16316,"byte_end":16321,"line_start":173,"line_end":173,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16361,"byte_end":16364,"line_start":174,"line_end":174,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3274},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16386,"byte_end":16391,"line_start":175,"line_end":175,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2801},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16446,"byte_end":16450,"line_start":178,"line_end":178,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16457,"byte_end":16461,"line_start":179,"line_end":179,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16468,"byte_end":16471,"line_start":180,"line_end":180,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3906},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16492,"byte_end":16497,"line_start":182,"line_end":182,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":10131},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":16504,"byte_end":16511,"line_start":183,"line_end":183,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":10138},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/complex.rs","byte_start":33906,"byte_end":33913,"line_start":1060,"line_end":1060,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":22,"index":524},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48293,"byte_end":48298,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":228}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48301,"byte_end":48304,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3247},"to":{"krate":0,"index":228}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48329,"byte_end":48338,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3278},"to":{"krate":0,"index":228}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48459,"byte_end":48464,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":230}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48467,"byte_end":48470,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3252},"to":{"krate":0,"index":230}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48495,"byte_end":48504,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3282},"to":{"krate":0,"index":230}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48625,"byte_end":48630,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":232}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48633,"byte_end":48636,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3257},"to":{"krate":0,"index":232}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48661,"byte_end":48670,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3286},"to":{"krate":0,"index":232}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48791,"byte_end":48796,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":234}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48799,"byte_end":48802,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3262},"to":{"krate":0,"index":234}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48827,"byte_end":48836,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3290},"to":{"krate":0,"index":234}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48927,"byte_end":48932,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":236}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48935,"byte_end":48938,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3274},"to":{"krate":0,"index":236}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":48994,"byte_end":48995,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":228}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49086,"byte_end":49087,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":241},"to":{"krate":0,"index":230}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49178,"byte_end":49179,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":244},"to":{"krate":0,"index":232}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49270,"byte_end":49271,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":234}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49348,"byte_end":49349,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":250},"to":{"krate":0,"index":236}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49463,"byte_end":49472,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":873},"to":{"krate":0,"index":251}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49475,"byte_end":49484,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":995},"to":{"krate":0,"index":251}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49487,"byte_end":49496,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":236},"to":{"krate":0,"index":251}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/field.rs","byte_start":49575,"byte_end":49582,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":22,"index":524},"to":{"krate":0,"index":251}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":51059,"byte_end":51064,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53038,"byte_end":53043,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":53850,"byte_end":53852,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":276},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/scalar/subset.rs","byte_start":56068,"byte_end":56075,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":22,"index":524},"to":{"krate":0,"index":262}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/auto_simd_impl.rs","byte_start":115610,"byte_end":115619,"line_start":1640,"line_end":1640,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":873},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118247,"byte_end":118251,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":3189},"to":{"krate":0,"index":589}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118258,"byte_end":118264,"line_start":11,"line_end":11,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3306},"to":{"krate":0,"index":589}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118292,"byte_end":118297,"line_start":12,"line_end":12,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":3311},"to":{"krate":0,"index":589}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118325,"byte_end":118331,"line_start":13,"line_end":13,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3316},"to":{"krate":0,"index":589}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_bool.rs","byte_start":118359,"byte_end":118362,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3299},"to":{"krate":0,"index":589}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123903,"byte_end":123911,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123924,"byte_end":123934,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":268},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123946,"byte_end":123951,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123958,"byte_end":123963,"line_start":18,"line_end":18,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2801},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":123970,"byte_end":123973,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3274},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124043,"byte_end":124047,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124054,"byte_end":124058,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124065,"byte_end":124068,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3906},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124089,"byte_end":124094,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":10131},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124101,"byte_end":124113,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":20,"index":990},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124120,"byte_end":124126,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":20,"index":971},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124133,"byte_end":124142,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2831},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_complex.rs","byte_start":124644,"byte_end":124645,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":689},"to":{"krate":0,"index":684}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_option.rs","byte_start":130713,"byte_end":130723,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":132636,"byte_end":132645,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":873},"to":{"krate":0,"index":771}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_partial_ord.rs","byte_start":133821,"byte_end":133822,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":784},"to":{"krate":0,"index":771}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135573,"byte_end":135587,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":771},"to":{"krate":0,"index":810}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135590,"byte_end":135600,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":856},"to":{"krate":0,"index":810}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":135603,"byte_end":135619,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":684},"to":{"krate":0,"index":810}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_real.rs","byte_start":136536,"byte_end":136537,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":810}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":138306,"byte_end":138315,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":873},"to":{"krate":0,"index":856}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_signed.rs","byte_start":139035,"byte_end":139036,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":863},"to":{"krate":0,"index":856}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":139617,"byte_end":139622,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":873}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142719,"byte_end":142723,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3189},"to":{"krate":0,"index":887}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142726,"byte_end":142735,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":873},"to":{"krate":0,"index":887}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":142786,"byte_end":142793,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":169}},"from":{"krate":22,"index":524},"to":{"krate":0,"index":873}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.8.0/src/simd/simd_value.rs","byte_start":144216,"byte_end":144223,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":170}},"from":{"krate":22,"index":524},"to":{"krate":0,"index":887}}]}