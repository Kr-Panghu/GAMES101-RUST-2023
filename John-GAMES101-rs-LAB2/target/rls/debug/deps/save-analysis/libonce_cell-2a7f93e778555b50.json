{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","once_cell","--edition=2021","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"race\"","--cfg","feature=\"std\"","-C","metadata=2a7f93e778555b50","-C","extra-filename=-2a7f93e778555b50","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libonce_cell-2a7f93e778555b50.rmeta"},"prelude":{"crate_id":{"name":"once_cell","disambiguator":[3129552388584877793,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17597776811017068767,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4080074450655046920,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5907259990925294111,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10493878511363669042,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12555285910560445398,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[2828314771408876961,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7582621806116120425,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2324381425420720695,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17777536701376484160,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[15325470721438668960,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[11693887763302245694,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[8512928500809439288,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[14797301622246846764,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[3748356315237825087,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8278577221625794805,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[8521860849321575787,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":0,"byte_end":45904,"line_start":1,"line_end":1387,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":422},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68142,"byte_end":68149,"line_start":291,"line_end":291,"column_start":25,"column_end":32},"alias_span":null,"name":"OnceBox","value":"","parent":{"krate":0,"index":321}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":0,"byte_end":45904,"line_start":1,"line_end":1387,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":91},{"krate":0,"index":206},{"krate":0,"index":321},{"krate":0,"index":450}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19,"byte_end":126,"line_start":3,"line_end":3,"column_start":1,"column_end":108}},{"value":"/ might store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":127,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":103}},{"value":"/ to the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":230,"byte_end":338,"line_start":5,"line_end":5,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":339,"byte_end":342,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":343,"byte_end":361,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/ impl<T> OnceCell<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":362,"byte_end":387,"line_start":8,"line_end":8,"column_start":1,"column_end":26}},{"value":"/     const fn new() -> OnceCell<T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":388,"byte_end":433,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/     fn set(&self, value: T) -> Result<(), T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":434,"byte_end":490,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/     fn get(&self) -> Option<&T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":491,"byte_end":534,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":535,"byte_end":540,"line_start":12,"line_end":12,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":541,"byte_end":548,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":549,"byte_end":552,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":553,"byte_end":655,"line_start":15,"line_end":15,"column_start":1,"column_end":103}},{"value":"/ Because of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":656,"byte_end":748,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ or `MutexGuard<T>`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":749,"byte_end":772,"line_start":17,"line_end":17,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":773,"byte_end":776,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":777,"byte_end":886,"line_start":19,"line_end":19,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":887,"byte_end":890,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`unsync::OnceCell`]: unsync/struct.OnceCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":891,"byte_end":944,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ [`sync::OnceCell`]: sync/struct.OnceCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":945,"byte_end":994,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":995,"byte_end":1066,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ [`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1067,"byte_end":1134,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1135,"byte_end":1201,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1202,"byte_end":1205,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Recipes","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1206,"byte_end":1219,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1220,"byte_end":1223,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `OnceCell` might be useful for a variety of patterns.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1224,"byte_end":1281,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Safe Initialization of Global Data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1286,"byte_end":1327,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1328,"byte_end":1331,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1332,"byte_end":1343,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ use std::{env, io};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1344,"byte_end":1367,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1368,"byte_end":1371,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1372,"byte_end":1406,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1407,"byte_end":1410,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1411,"byte_end":1431,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/ pub struct Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1432,"byte_end":1455,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/     // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1456,"byte_end":1470,"line_start":40,"line_end":40,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1471,"byte_end":1476,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ static INSTANCE: OnceCell<Logger> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1477,"byte_end":1533,"line_start":42,"line_end":42,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1534,"byte_end":1537,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ impl Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1538,"byte_end":1555,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/     pub fn global() -> &'static Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1556,"byte_end":1600,"line_start":45,"line_end":45,"column_start":1,"column_end":45}},{"value":"/         INSTANCE.get().expect(\"logger is not initialized\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1601,"byte_end":1663,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1664,"byte_end":1673,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1674,"byte_end":1677,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1678,"byte_end":1750,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/        // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1751,"byte_end":1768,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ #      Ok(Logger {})","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1769,"byte_end":1793,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1794,"byte_end":1803,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1804,"byte_end":1809,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1810,"byte_end":1813,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1814,"byte_end":1829,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"/     let logger = Logger::from_cli(env::args()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1830,"byte_end":1890,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/     INSTANCE.set(logger).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1891,"byte_end":1929,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/     // use `Logger::global()` from now on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1930,"byte_end":1975,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1976,"byte_end":1981,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1982,"byte_end":1989,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1990,"byte_end":1993,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Lazy Initialized Global Data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":1994,"byte_end":2029,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2030,"byte_end":2033,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This is essentially the `lazy_static!` macro, but without a macro.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2034,"byte_end":2104,"line_start":64,"line_end":64,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2105,"byte_end":2108,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2109,"byte_end":2120,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2121,"byte_end":2170,"line_start":67,"line_end":67,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2171,"byte_end":2174,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2175,"byte_end":2209,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2210,"byte_end":2213,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ fn global_data() -> &'static Mutex<HashMap<i32, String>> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2214,"byte_end":2276,"line_start":71,"line_end":71,"column_start":1,"column_end":63}},{"value":"/     static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2277,"byte_end":2358,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/     INSTANCE.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2359,"byte_end":2392,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"/         let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2393,"byte_end":2432,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/         m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2433,"byte_end":2479,"line_start":75,"line_end":75,"column_start":1,"column_end":47}},{"value":"/         m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2480,"byte_end":2527,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/         Mutex::new(m)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2528,"byte_end":2553,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     })","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2554,"byte_end":2564,"line_start":78,"line_end":78,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2565,"byte_end":2570,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2571,"byte_end":2578,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2579,"byte_end":2582,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ There are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2583,"byte_end":2687,"line_start":82,"line_end":82,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2688,"byte_end":2691,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2692,"byte_end":2703,"line_start":84,"line_end":84,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2704,"byte_end":2753,"line_start":85,"line_end":85,"column_start":1,"column_end":50}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2754,"byte_end":2784,"line_start":86,"line_end":86,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2785,"byte_end":2788,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ static GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2789,"byte_end":2863,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2864,"byte_end":2899,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2900,"byte_end":2942,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2943,"byte_end":2986,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/     Mutex::new(m)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":2987,"byte_end":3008,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3009,"byte_end":3016,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3017,"byte_end":3020,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3021,"byte_end":3036,"line_start":95,"line_end":95,"column_start":1,"column_end":16}},{"value":"/     println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3037,"byte_end":3091,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3092,"byte_end":3097,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3098,"byte_end":3105,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Note that the variable that holds `Lazy` is declared as `static`, *not*","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3110,"byte_end":3185,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ `const`. This is important: using `const` instead compiles, but works wrong.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3186,"byte_end":3266,"line_start":101,"line_end":101,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3267,"byte_end":3270,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`sync::Lazy`]: sync/struct.Lazy.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3271,"byte_end":3312,"line_start":103,"line_end":103,"column_start":1,"column_end":42}},{"value":"/ [`unsync::Lazy`]: unsync/struct.Lazy.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3313,"byte_end":3358,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3359,"byte_end":3362,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ## General purpose lazy evaluation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3363,"byte_end":3401,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3402,"byte_end":3405,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Unlike `lazy_static!`, `Lazy` works with local variables.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3406,"byte_end":3467,"line_start":108,"line_end":108,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3468,"byte_end":3471,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3472,"byte_end":3483,"line_start":110,"line_end":110,"column_start":1,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3484,"byte_end":3516,"line_start":111,"line_end":111,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3517,"byte_end":3520,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3521,"byte_end":3536,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/     let ctx = vec![1, 2, 3];","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3537,"byte_end":3569,"line_start":114,"line_end":114,"column_start":1,"column_end":33}},{"value":"/     let thunk = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3570,"byte_end":3604,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/         ctx.iter().sum::<i32>()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3605,"byte_end":3640,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3641,"byte_end":3652,"line_start":117,"line_end":117,"column_start":1,"column_end":12}},{"value":"/     assert_eq!(*thunk, 6);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3653,"byte_end":3683,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3684,"byte_end":3689,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3690,"byte_end":3697,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3698,"byte_end":3701,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ If you need a lazy field in a struct, you probably should use `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3702,"byte_end":3778,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/ directly, because that will allow you to access `self` during initialization.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3779,"byte_end":3860,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3861,"byte_end":3864,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3865,"byte_end":3876,"line_start":125,"line_end":125,"column_start":1,"column_end":12}},{"value":"/ use std::{fs, path::PathBuf};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3877,"byte_end":3910,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3915,"byte_end":3951,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3952,"byte_end":3955,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ struct Ctx {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3956,"byte_end":3972,"line_start":130,"line_end":130,"column_start":1,"column_end":17}},{"value":"/     config_path: PathBuf,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":3973,"byte_end":4002,"line_start":131,"line_end":131,"column_start":1,"column_end":30}},{"value":"/     config: OnceCell<String>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4003,"byte_end":4036,"line_start":132,"line_end":132,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4037,"byte_end":4042,"line_start":133,"line_end":133,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4043,"byte_end":4046,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ impl Ctx {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4047,"byte_end":4061,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/     pub fn get_config(&self) -> Result<&str, std::io::Error> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4062,"byte_end":4128,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/         let cfg = self.config.get_or_try_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4129,"byte_end":4183,"line_start":137,"line_end":137,"column_start":1,"column_end":55}},{"value":"/             fs::read_to_string(&self.config_path)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4184,"byte_end":4237,"line_start":138,"line_end":138,"column_start":1,"column_end":54}},{"value":"/         })?;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4238,"byte_end":4254,"line_start":139,"line_end":139,"column_start":1,"column_end":17}},{"value":"/         Ok(cfg.as_str())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4255,"byte_end":4283,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4284,"byte_end":4293,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4294,"byte_end":4299,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4300,"byte_end":4307,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4308,"byte_end":4311,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ## Lazily Compiled Regex","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4312,"byte_end":4340,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4341,"byte_end":4344,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ This is a `regex!` macro which takes a string literal and returns an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4345,"byte_end":4417,"line_start":147,"line_end":147,"column_start":1,"column_end":73}},{"value":"/ *expression* that evaluates to a `&'static Regex`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4418,"byte_end":4472,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4473,"byte_end":4476,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4477,"byte_end":4484,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ macro_rules! regex {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4485,"byte_end":4509,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/     ($re:literal $(,)?) => {{","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4510,"byte_end":4543,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/         static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4544,"byte_end":4642,"line_start":153,"line_end":153,"column_start":1,"column_end":99}},{"value":"/         RE.get_or_init(|| regex::Regex::new($re).unwrap())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4643,"byte_end":4705,"line_start":154,"line_end":154,"column_start":1,"column_end":63}},{"value":"/     }};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4706,"byte_end":4717,"line_start":155,"line_end":155,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4718,"byte_end":4723,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4724,"byte_end":4731,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4732,"byte_end":4735,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This macro can be useful to avoid the \"compile regex on every loop iteration\" problem.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4736,"byte_end":4826,"line_start":159,"line_end":159,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4827,"byte_end":4830,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ## Runtime `include_bytes!`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4831,"byte_end":4862,"line_start":161,"line_end":161,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4863,"byte_end":4866,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ The `include_bytes` macro is useful to include test resources, but it slows","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4867,"byte_end":4946,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ down test compilation a lot. An alternative is to load the resources at","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":4947,"byte_end":5022,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ runtime:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5023,"byte_end":5035,"line_start":165,"line_end":165,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5036,"byte_end":5039,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5040,"byte_end":5047,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ use std::path::Path;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5048,"byte_end":5072,"line_start":168,"line_end":168,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5073,"byte_end":5076,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5077,"byte_end":5111,"line_start":170,"line_end":170,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5112,"byte_end":5115,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ pub struct TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5116,"byte_end":5145,"line_start":172,"line_end":172,"column_start":1,"column_end":30}},{"value":"/     path: &'static str,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5146,"byte_end":5173,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/     cell: OnceCell<Vec<u8>>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5174,"byte_end":5206,"line_start":174,"line_end":174,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5207,"byte_end":5212,"line_start":175,"line_end":175,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5213,"byte_end":5216,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ impl TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5217,"byte_end":5240,"line_start":177,"line_end":177,"column_start":1,"column_end":24}},{"value":"/     pub const fn new(path: &'static str) -> TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5241,"byte_end":5303,"line_start":178,"line_end":178,"column_start":1,"column_end":63}},{"value":"/         TestResource { path, cell: OnceCell::new() }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5304,"byte_end":5360,"line_start":179,"line_end":179,"column_start":1,"column_end":57}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5361,"byte_end":5370,"line_start":180,"line_end":180,"column_start":1,"column_end":10}},{"value":"/     pub fn bytes(&self) -> &[u8] {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5371,"byte_end":5409,"line_start":181,"line_end":181,"column_start":1,"column_end":39}},{"value":"/         self.cell.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5410,"byte_end":5448,"line_start":182,"line_end":182,"column_start":1,"column_end":39}},{"value":"/             let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5449,"byte_end":5520,"line_start":183,"line_end":183,"column_start":1,"column_end":72}},{"value":"/             let path = Path::new(dir.as_str()).join(self.path);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5521,"byte_end":5588,"line_start":184,"line_end":184,"column_start":1,"column_end":68}},{"value":"/             std::fs::read(&path).unwrap_or_else(|_err| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5589,"byte_end":5649,"line_start":185,"line_end":185,"column_start":1,"column_end":61}},{"value":"/                 panic!(\"failed to load test resource: {}\", path.display())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5650,"byte_end":5728,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/             })","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5729,"byte_end":5747,"line_start":187,"line_end":187,"column_start":1,"column_end":19}},{"value":"/         }).as_slice()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5748,"byte_end":5773,"line_start":188,"line_end":188,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5774,"byte_end":5783,"line_start":189,"line_end":189,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5784,"byte_end":5789,"line_start":190,"line_end":190,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5790,"byte_end":5793,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ static TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5794,"byte_end":5872,"line_start":192,"line_end":192,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5873,"byte_end":5876,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5877,"byte_end":5888,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"/ fn test_sobel_filter() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5889,"byte_end":5917,"line_start":195,"line_end":195,"column_start":1,"column_end":29}},{"value":"/     let rgb: &[u8] = TEST_IMAGE.bytes();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5918,"byte_end":5962,"line_start":196,"line_end":196,"column_start":1,"column_end":45}},{"value":"/     // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5963,"byte_end":5977,"line_start":197,"line_end":197,"column_start":1,"column_end":15}},{"value":"/ # drop(rgb);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5978,"byte_end":5994,"line_start":198,"line_end":198,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":5995,"byte_end":6000,"line_start":199,"line_end":199,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6001,"byte_end":6008,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6009,"byte_end":6012,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ## `lateinit`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6013,"byte_end":6030,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6031,"byte_end":6034,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ `LateInit` type for delayed initialization. It is reminiscent of Kotlin's","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6035,"byte_end":6112,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ `lateinit` keyword and allows construction of cyclic data structures:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6113,"byte_end":6186,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6187,"byte_end":6190,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6191,"byte_end":6194,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6195,"byte_end":6202,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6203,"byte_end":6237,"line_start":209,"line_end":209,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6238,"byte_end":6241,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ pub struct LateInit<T> { cell: OnceCell<T> }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6242,"byte_end":6290,"line_start":211,"line_end":211,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6291,"byte_end":6294,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ impl<T> LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6295,"byte_end":6320,"line_start":213,"line_end":213,"column_start":1,"column_end":26}},{"value":"/     pub fn init(&self, value: T) {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6321,"byte_end":6359,"line_start":214,"line_end":214,"column_start":1,"column_end":39}},{"value":"/         assert!(self.cell.set(value).is_ok())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6360,"byte_end":6409,"line_start":215,"line_end":215,"column_start":1,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6410,"byte_end":6419,"line_start":216,"line_end":216,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6420,"byte_end":6425,"line_start":217,"line_end":217,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6426,"byte_end":6429,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ impl<T> Default for LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6430,"byte_end":6467,"line_start":219,"line_end":219,"column_start":1,"column_end":38}},{"value":"/     fn default() -> Self { LateInit { cell: OnceCell::default() } }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6468,"byte_end":6539,"line_start":220,"line_end":220,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6540,"byte_end":6545,"line_start":221,"line_end":221,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6546,"byte_end":6549,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ impl<T> std::ops::Deref for LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6550,"byte_end":6595,"line_start":223,"line_end":223,"column_start":1,"column_end":46}},{"value":"/     type Target = T;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6596,"byte_end":6620,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"/     fn deref(&self) -> &T {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6621,"byte_end":6652,"line_start":225,"line_end":225,"column_start":1,"column_end":32}},{"value":"/         self.cell.get().unwrap()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6653,"byte_end":6689,"line_start":226,"line_end":226,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6690,"byte_end":6699,"line_start":227,"line_end":227,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6700,"byte_end":6705,"line_start":228,"line_end":228,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6706,"byte_end":6709,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6710,"byte_end":6732,"line_start":230,"line_end":230,"column_start":1,"column_end":23}},{"value":"/ struct A<'a> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6733,"byte_end":6751,"line_start":231,"line_end":231,"column_start":1,"column_end":19}},{"value":"/     b: LateInit<&'a B<'a>>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6752,"byte_end":6783,"line_start":232,"line_end":232,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6784,"byte_end":6789,"line_start":233,"line_end":233,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6790,"byte_end":6793,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6794,"byte_end":6816,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/ struct B<'a> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6817,"byte_end":6835,"line_start":236,"line_end":236,"column_start":1,"column_end":19}},{"value":"/     a: LateInit<&'a A<'a>>","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6836,"byte_end":6866,"line_start":237,"line_end":237,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6867,"byte_end":6872,"line_start":238,"line_end":238,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6873,"byte_end":6876,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6877,"byte_end":6880,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ fn build_cycle() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6881,"byte_end":6903,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/     let a = A::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6904,"byte_end":6933,"line_start":242,"line_end":242,"column_start":1,"column_end":30}},{"value":"/     let b = B::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6934,"byte_end":6963,"line_start":243,"line_end":243,"column_start":1,"column_end":30}},{"value":"/     a.b.init(&b);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6964,"byte_end":6985,"line_start":244,"line_end":244,"column_start":1,"column_end":22}},{"value":"/     b.a.init(&a);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":6986,"byte_end":7007,"line_start":245,"line_end":245,"column_start":1,"column_end":22}},{"value":"/     ","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7008,"byte_end":7016,"line_start":246,"line_end":246,"column_start":1,"column_end":9}},{"value":"/     let _a = &a.b.a.b.a;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7017,"byte_end":7045,"line_start":247,"line_end":247,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7046,"byte_end":7051,"line_start":248,"line_end":248,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7052,"byte_end":7059,"line_start":249,"line_end":249,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7060,"byte_end":7063,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ # Comparison with std","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7064,"byte_end":7089,"line_start":251,"line_end":251,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7090,"byte_end":7093,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ |`!Sync` types         | Access Mode            | Drawbacks                                     |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7094,"byte_end":7195,"line_start":253,"line_end":253,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7196,"byte_end":7297,"line_start":254,"line_end":254,"column_start":1,"column_end":102}},{"value":"/ |`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7298,"byte_end":7399,"line_start":255,"line_end":255,"column_start":1,"column_end":102}},{"value":"/ |`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7400,"byte_end":7501,"line_start":256,"line_end":256,"column_start":1,"column_end":102}},{"value":"/ |`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7502,"byte_end":7603,"line_start":257,"line_end":257,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7604,"byte_end":7607,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ |`Sync` types          | Access Mode            | Drawbacks                                     |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7608,"byte_end":7709,"line_start":259,"line_end":259,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7710,"byte_end":7811,"line_start":260,"line_end":260,"column_start":1,"column_end":102}},{"value":"/ |`AtomicT`             | `T`                    | works only with certain `Copy` types          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7812,"byte_end":7913,"line_start":261,"line_end":261,"column_start":1,"column_end":102}},{"value":"/ |`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":7914,"byte_end":8015,"line_start":262,"line_end":262,"column_start":1,"column_end":102}},{"value":"/ |`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8016,"byte_end":8117,"line_start":263,"line_end":263,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8118,"byte_end":8121,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ Technically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8122,"byte_end":8222,"line_start":265,"line_end":265,"column_start":1,"column_end":101}},{"value":"/ itself. However, because the assignment can happen only once, such cases should be more rare than","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8223,"byte_end":8324,"line_start":266,"line_end":266,"column_start":1,"column_end":102}},{"value":"/ equivalents with `RefCell` and `Mutex`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8325,"byte_end":8368,"line_start":267,"line_end":267,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8369,"byte_end":8372,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported `rustc` Version","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8373,"byte_end":8412,"line_start":269,"line_end":269,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8413,"byte_end":8416,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ This crate's minimum supported `rustc` version is `1.56.0`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8417,"byte_end":8480,"line_start":271,"line_end":271,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8481,"byte_end":8484,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ If only the `std` feature is enabled, MSRV will be updated conservatively, supporting at least latest 8 versions of the compiler.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8485,"byte_end":8618,"line_start":273,"line_end":273,"column_start":1,"column_end":134}},{"value":"/ When using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8619,"byte_end":8733,"line_start":274,"line_end":274,"column_start":1,"column_end":115}},{"value":"/ In both cases, increasing MSRV is *not* considered a semver-breaking change.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8734,"byte_end":8814,"line_start":275,"line_end":275,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8815,"byte_end":8818,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ # Implementation details","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8819,"byte_end":8847,"line_start":277,"line_end":277,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8848,"byte_end":8851,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ The implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8852,"byte_end":8960,"line_start":279,"line_end":279,"column_start":1,"column_end":109}},{"value":"/ and [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":8961,"byte_end":9066,"line_start":280,"line_end":280,"column_start":1,"column_end":106}},{"value":"/ `once_cell` just streamlines and unifies those APIs.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9067,"byte_end":9123,"line_start":281,"line_end":281,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9124,"byte_end":9127,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ To implement a sync flavor of `OnceCell`, this crates uses either a custom","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9128,"byte_end":9206,"line_start":283,"line_end":283,"column_start":1,"column_end":79}},{"value":"/ re-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9207,"byte_end":9282,"line_start":284,"line_end":284,"column_start":1,"column_end":76}},{"value":"/ controlled by the `parking_lot` feature (disabled by default). Performance","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9283,"byte_end":9361,"line_start":285,"line_end":285,"column_start":1,"column_end":79}},{"value":"/ is the same for both cases, but the `parking_lot` based `OnceCell<T>` is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9362,"byte_end":9438,"line_start":286,"line_end":286,"column_start":1,"column_end":77}},{"value":"/ smaller by up to 16 bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9439,"byte_end":9469,"line_start":287,"line_end":287,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9470,"byte_end":9473,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ This crate uses `unsafe`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9474,"byte_end":9503,"line_start":289,"line_end":289,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9504,"byte_end":9507,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ [`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9508,"byte_end":9584,"line_start":291,"line_end":291,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9585,"byte_end":9588,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ # F.A.Q.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9589,"byte_end":9601,"line_start":293,"line_end":293,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9602,"byte_end":9605,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ **Should I use lazy_static or once_cell?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9606,"byte_end":9652,"line_start":295,"line_end":295,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9653,"byte_end":9656,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ To the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9657,"byte_end":9761,"line_start":297,"line_end":297,"column_start":1,"column_end":105}},{"value":"/ and should be preferred.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9762,"byte_end":9790,"line_start":298,"line_end":298,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9791,"byte_end":9794,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ Unlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9795,"byte_end":9900,"line_start":300,"line_end":300,"column_start":1,"column_end":106}},{"value":"/ `#![no_std]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9901,"byte_end":9918,"line_start":301,"line_end":301,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9919,"byte_end":9922,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ `lazy_static` has received significantly more real world testing, but `once_cell` is also a widely","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":9923,"byte_end":10025,"line_start":303,"line_end":303,"column_start":1,"column_end":103}},{"value":"/ used crate.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10026,"byte_end":10041,"line_start":304,"line_end":304,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10042,"byte_end":10045,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ **Should I use the sync or unsync flavor?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10046,"byte_end":10093,"line_start":306,"line_end":306,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10094,"byte_end":10097,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ Because Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10098,"byte_end":10204,"line_start":308,"line_end":308,"column_start":1,"column_end":107}},{"value":"/ `sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10205,"byte_end":10309,"line_start":309,"line_end":309,"column_start":1,"column_end":105}},{"value":"/ to switch between the two if code becomes multi-threaded later.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10310,"byte_end":10377,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10378,"byte_end":10381,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ At the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10382,"byte_end":10487,"line_start":312,"line_end":312,"column_start":1,"column_end":106}},{"value":"/ might be easier to debug than a deadlock.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10488,"byte_end":10533,"line_start":313,"line_end":313,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10534,"byte_end":10537,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ **Does this crate support async?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10538,"byte_end":10576,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10577,"byte_end":10580,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ No, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10581,"byte_end":10675,"line_start":317,"line_end":317,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10676,"byte_end":10679,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ **Can I bring my own mutex?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10680,"byte_end":10713,"line_start":319,"line_end":319,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10714,"byte_end":10717,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ There is [generic_once_cell](https://crates.io/crates/generic_once_cell) to allow just that.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10718,"byte_end":10814,"line_start":321,"line_end":321,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10815,"byte_end":10818,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ # Related crates","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10819,"byte_end":10839,"line_start":323,"line_end":323,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10840,"byte_end":10843,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ * [double-checked-cell](https://github.com/niklasf/double-checked-cell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10844,"byte_end":10919,"line_start":325,"line_end":325,"column_start":1,"column_end":76}},{"value":"/ * [lazy-init](https://crates.io/crates/lazy-init)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10920,"byte_end":10973,"line_start":326,"line_end":326,"column_start":1,"column_end":54}},{"value":"/ * [lazycell](https://crates.io/crates/lazycell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":10974,"byte_end":11025,"line_start":327,"line_end":327,"column_start":1,"column_end":52}},{"value":"/ * [mitochondria](https://crates.io/crates/mitochondria)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11026,"byte_end":11085,"line_start":328,"line_end":328,"column_start":1,"column_end":60}},{"value":"/ * [lazy_static](https://crates.io/crates/lazy_static)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11086,"byte_end":11143,"line_start":329,"line_end":329,"column_start":1,"column_end":58}},{"value":"/ * [async_once_cell](https://crates.io/crates/async_once_cell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11144,"byte_end":11209,"line_start":330,"line_end":330,"column_start":1,"column_end":66}},{"value":"/ * [generic_once_cell](https://crates.io/crates/generic_once_cell) (bring your own mutex)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11210,"byte_end":11302,"line_start":331,"line_end":331,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11303,"byte_end":11306,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ Most of this crate's functionality is available in `std` in nightly Rust.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11307,"byte_end":11384,"line_start":333,"line_end":333,"column_start":1,"column_end":78}},{"value":"/ See the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11385,"byte_end":11462,"line_start":334,"line_end":334,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11880,"byte_end":11886,"line_start":354,"line_end":354,"column_start":9,"column_end":15},"name":"unsync","qualname":"::unsync","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":165},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":177},{"krate":0,"index":184},{"krate":0,"index":193},{"krate":0,"index":198},{"krate":0,"index":203}],"decl_id":null,"docs":" Single-threaded version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Single-threaded version of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":11829,"byte_end":11871,"line_start":353,"line_end":353,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":123},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12742,"byte_end":12750,"line_start":384,"line_end":384,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::unsync::OnceCell","value":"OnceCell {  }","parent":null,"children":[{"krate":0,"index":125}],"decl_id":null,"docs":" A cell which can be written to only once. It is not thread safe.","sig":null,"attributes":[{"value":"/ A cell which can be written to only once. It is not thread safe.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12079,"byte_end":12147,"line_start":364,"line_end":364,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12152,"byte_end":12155,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Unlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12160,"byte_end":12227,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ references to the contents.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12232,"byte_end":12263,"line_start":367,"line_end":367,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12268,"byte_end":12271,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ [`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12276,"byte_end":12358,"line_start":369,"line_end":369,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12363,"byte_end":12366,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12371,"byte_end":12384,"line_start":371,"line_end":371,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12389,"byte_end":12396,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12401,"byte_end":12437,"line_start":373,"line_end":373,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12442,"byte_end":12445,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12450,"byte_end":12481,"line_start":375,"line_end":375,"column_start":5,"column_end":36}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12486,"byte_end":12520,"line_start":376,"line_end":376,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12525,"byte_end":12528,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let value: &String = cell.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12533,"byte_end":12579,"line_start":378,"line_end":378,"column_start":5,"column_end":51}},{"value":"/     \"Hello, World!\".to_string()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12584,"byte_end":12619,"line_start":379,"line_end":379,"column_start":5,"column_end":40}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12624,"byte_end":12631,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12636,"byte_end":12675,"line_start":381,"line_end":381,"column_start":5,"column_end":44}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12680,"byte_end":12714,"line_start":382,"line_end":382,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":12719,"byte_end":12726,"line_start":383,"line_end":383,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13248,"byte_end":13255,"line_start":397,"line_end":397,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13373,"byte_end":13376,"line_start":403,"line_end":403,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13670,"byte_end":13675,"line_start":412,"line_end":412,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> OnceCell<T>","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2802},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13876,"byte_end":13886,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2803},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14175,"byte_end":14177,"line_start":428,"line_end":428,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &Self) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14352,"byte_end":14356,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14519,"byte_end":14522,"line_start":443,"line_end":443,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14468,"byte_end":14497,"line_start":442,"line_end":442,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14672,"byte_end":14682,"line_start":448,"line_end":448,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14615,"byte_end":14650,"line_start":447,"line_end":447,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14930,"byte_end":14933,"line_start":456,"line_end":456,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14790,"byte_end":14835,"line_start":452,"line_end":452,"column_start":9,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14844,"byte_end":14847,"line_start":453,"line_end":453,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14856,"byte_end":14896,"line_start":454,"line_end":454,"column_start":9,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14905,"byte_end":14914,"line_start":455,"line_end":455,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15991,"byte_end":15998,"line_start":481,"line_end":481,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15298,"byte_end":15351,"line_start":464,"line_end":464,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":465,"line_end":465,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15372,"byte_end":15412,"line_start":466,"line_end":466,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15421,"byte_end":15424,"line_start":467,"line_end":467,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15433,"byte_end":15511,"line_start":468,"line_end":468,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15520,"byte_end":15593,"line_start":469,"line_end":469,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15602,"byte_end":15672,"line_start":470,"line_end":470,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15681,"byte_end":15684,"line_start":471,"line_end":471,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15693,"byte_end":15700,"line_start":472,"line_end":472,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15709,"byte_end":15745,"line_start":473,"line_end":473,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15754,"byte_end":15757,"line_start":474,"line_end":474,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15766,"byte_end":15816,"line_start":475,"line_end":475,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15825,"byte_end":15851,"line_start":476,"line_end":476,"column_start":9,"column_end":35}},{"value":"/ *cell.get_mut().unwrap() = 93;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15860,"byte_end":15894,"line_start":477,"line_end":477,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(cell.get(), Some(&93));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15903,"byte_end":15941,"line_start":478,"line_end":478,"column_start":9,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15950,"byte_end":15957,"line_start":479,"line_end":479,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":15966,"byte_end":15975,"line_start":480,"line_end":480,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16690,"byte_end":16693,"line_start":503,"line_end":503,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16154,"byte_end":16200,"line_start":486,"line_end":486,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16209,"byte_end":16212,"line_start":487,"line_end":487,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16221,"byte_end":16290,"line_start":488,"line_end":488,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16299,"byte_end":16308,"line_start":489,"line_end":489,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16317,"byte_end":16320,"line_start":490,"line_end":490,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16329,"byte_end":16342,"line_start":491,"line_end":491,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16351,"byte_end":16358,"line_start":492,"line_end":492,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16367,"byte_end":16403,"line_start":493,"line_end":493,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16412,"byte_end":16415,"line_start":494,"line_end":494,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16424,"byte_end":16455,"line_start":495,"line_end":495,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16464,"byte_end":16498,"line_start":496,"line_end":496,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16507,"byte_end":16510,"line_start":497,"line_end":497,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.set(92), Ok(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16519,"byte_end":16556,"line_start":498,"line_end":498,"column_start":9,"column_end":46}},{"value":"/ assert_eq!(cell.set(62), Err(62));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16565,"byte_end":16603,"line_start":499,"line_end":499,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16612,"byte_end":16615,"line_start":500,"line_end":500,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16624,"byte_end":16658,"line_start":501,"line_end":501,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16667,"byte_end":16674,"line_start":502,"line_end":502,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17372,"byte_end":17382,"line_start":524,"line_end":524,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert(&Self, T) -> Result<&T, (&T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16886,"byte_end":16968,"line_start":510,"line_end":510,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16977,"byte_end":16980,"line_start":511,"line_end":511,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":16989,"byte_end":17002,"line_start":512,"line_end":512,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17011,"byte_end":17018,"line_start":513,"line_end":513,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17027,"byte_end":17063,"line_start":514,"line_end":514,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17072,"byte_end":17075,"line_start":515,"line_end":515,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17084,"byte_end":17115,"line_start":516,"line_end":516,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17124,"byte_end":17158,"line_start":517,"line_end":517,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17167,"byte_end":17170,"line_start":518,"line_end":518,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17179,"byte_end":17224,"line_start":519,"line_end":519,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17233,"byte_end":17285,"line_start":520,"line_end":520,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17294,"byte_end":17297,"line_start":521,"line_end":521,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17306,"byte_end":17340,"line_start":522,"line_end":522,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17349,"byte_end":17356,"line_start":523,"line_end":523,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18691,"byte_end":18702,"line_start":559,"line_end":559,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f`\n if the cell was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":17952,"byte_end":18011,"line_start":538,"line_end":538,"column_start":9,"column_end":68}},{"value":"/ if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18020,"byte_end":18046,"line_start":539,"line_end":539,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18055,"byte_end":18058,"line_start":540,"line_end":540,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18067,"byte_end":18079,"line_start":541,"line_end":541,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18088,"byte_end":18091,"line_start":542,"line_end":542,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18100,"byte_end":18170,"line_start":543,"line_end":543,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18179,"byte_end":18205,"line_start":544,"line_end":544,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18214,"byte_end":18217,"line_start":545,"line_end":545,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18226,"byte_end":18295,"line_start":546,"line_end":546,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18304,"byte_end":18330,"line_start":547,"line_end":547,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18339,"byte_end":18342,"line_start":548,"line_end":548,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18351,"byte_end":18364,"line_start":549,"line_end":549,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18373,"byte_end":18380,"line_start":550,"line_end":550,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18389,"byte_end":18425,"line_start":551,"line_end":551,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18434,"byte_end":18437,"line_start":552,"line_end":552,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18446,"byte_end":18477,"line_start":553,"line_end":553,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18486,"byte_end":18526,"line_start":554,"line_end":554,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18535,"byte_end":18562,"line_start":555,"line_end":555,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18571,"byte_end":18623,"line_start":556,"line_end":556,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18632,"byte_end":18659,"line_start":557,"line_end":557,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18668,"byte_end":18675,"line_start":558,"line_end":558,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19910,"byte_end":19925,"line_start":595,"line_end":595,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":18977,"byte_end":19039,"line_start":570,"line_end":570,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19048,"byte_end":19112,"line_start":571,"line_end":571,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19121,"byte_end":19143,"line_start":572,"line_end":572,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19152,"byte_end":19155,"line_start":573,"line_end":573,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19164,"byte_end":19176,"line_start":574,"line_end":574,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19185,"byte_end":19188,"line_start":575,"line_end":575,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19197,"byte_end":19267,"line_start":576,"line_end":576,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19276,"byte_end":19302,"line_start":577,"line_end":577,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19311,"byte_end":19314,"line_start":578,"line_end":578,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19323,"byte_end":19392,"line_start":579,"line_end":579,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19401,"byte_end":19427,"line_start":580,"line_end":580,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19436,"byte_end":19439,"line_start":581,"line_end":581,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19448,"byte_end":19461,"line_start":582,"line_end":582,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19470,"byte_end":19477,"line_start":583,"line_end":583,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19486,"byte_end":19522,"line_start":584,"line_end":584,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19531,"byte_end":19534,"line_start":585,"line_end":585,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19543,"byte_end":19574,"line_start":586,"line_end":586,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19583,"byte_end":19641,"line_start":587,"line_end":587,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19650,"byte_end":19684,"line_start":588,"line_end":588,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19693,"byte_end":19753,"line_start":589,"line_end":589,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19762,"byte_end":19776,"line_start":590,"line_end":590,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19785,"byte_end":19792,"line_start":591,"line_end":591,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19801,"byte_end":19832,"line_start":592,"line_end":592,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19841,"byte_end":19878,"line_start":593,"line_end":593,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":19887,"byte_end":19894,"line_start":594,"line_end":594,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21742,"byte_end":21746,"line_start":640,"line_end":640,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20595,"byte_end":20680,"line_start":611,"line_end":611,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20689,"byte_end":20692,"line_start":612,"line_end":612,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20701,"byte_end":20780,"line_start":613,"line_end":613,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20789,"byte_end":20792,"line_start":614,"line_end":614,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20801,"byte_end":20815,"line_start":615,"line_end":615,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20824,"byte_end":20827,"line_start":616,"line_end":616,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20836,"byte_end":20843,"line_start":617,"line_end":617,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20852,"byte_end":20888,"line_start":618,"line_end":618,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20897,"byte_end":20900,"line_start":619,"line_end":619,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20909,"byte_end":20962,"line_start":620,"line_end":620,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":20971,"byte_end":21005,"line_start":621,"line_end":621,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21014,"byte_end":21017,"line_start":622,"line_end":622,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21026,"byte_end":21061,"line_start":623,"line_end":623,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21070,"byte_end":21113,"line_start":624,"line_end":624,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21122,"byte_end":21177,"line_start":625,"line_end":625,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21186,"byte_end":21219,"line_start":626,"line_end":626,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21228,"byte_end":21235,"line_start":627,"line_end":627,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21244,"byte_end":21247,"line_start":628,"line_end":628,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21256,"byte_end":21334,"line_start":629,"line_end":629,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21343,"byte_end":21416,"line_start":630,"line_end":630,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21425,"byte_end":21495,"line_start":631,"line_end":631,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21504,"byte_end":21507,"line_start":632,"line_end":632,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21516,"byte_end":21523,"line_start":633,"line_end":633,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21532,"byte_end":21568,"line_start":634,"line_end":634,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21577,"byte_end":21580,"line_start":635,"line_end":635,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21589,"byte_end":21639,"line_start":636,"line_end":636,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21648,"byte_end":21674,"line_start":637,"line_end":637,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21683,"byte_end":21710,"line_start":638,"line_end":638,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21719,"byte_end":21726,"line_start":639,"line_end":639,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22405,"byte_end":22415,"line_start":660,"line_end":660,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21853,"byte_end":21910,"line_start":644,"line_end":644,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21919,"byte_end":21922,"line_start":645,"line_end":645,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21931,"byte_end":21972,"line_start":646,"line_end":646,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21981,"byte_end":21984,"line_start":647,"line_end":647,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":21993,"byte_end":22007,"line_start":648,"line_end":648,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22016,"byte_end":22019,"line_start":649,"line_end":649,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22028,"byte_end":22035,"line_start":650,"line_end":650,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22044,"byte_end":22080,"line_start":651,"line_end":651,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22089,"byte_end":22092,"line_start":652,"line_end":652,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22101,"byte_end":22150,"line_start":653,"line_end":653,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22159,"byte_end":22199,"line_start":654,"line_end":654,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22208,"byte_end":22211,"line_start":655,"line_end":655,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22220,"byte_end":22251,"line_start":656,"line_end":656,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22260,"byte_end":22303,"line_start":657,"line_end":657,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22312,"byte_end":22373,"line_start":658,"line_end":658,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22382,"byte_end":22389,"line_start":659,"line_end":659,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":165},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23142,"byte_end":23146,"line_start":687,"line_end":687,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::unsync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22675,"byte_end":22728,"line_start":667,"line_end":667,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22733,"byte_end":22736,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22741,"byte_end":22754,"line_start":669,"line_end":669,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22759,"byte_end":22766,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22771,"byte_end":22803,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22808,"byte_end":22811,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ let lazy: Lazy<i32> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22816,"byte_end":22856,"line_start":673,"line_end":673,"column_start":5,"column_end":45}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22861,"byte_end":22894,"line_start":674,"line_end":674,"column_start":5,"column_end":38}},{"value":"/     92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22899,"byte_end":22909,"line_start":675,"line_end":675,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22914,"byte_end":22921,"line_start":676,"line_end":676,"column_start":5,"column_end":12}},{"value":"/ println!(\"ready\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22926,"byte_end":22948,"line_start":677,"line_end":677,"column_start":5,"column_end":27}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22953,"byte_end":22979,"line_start":678,"line_end":678,"column_start":5,"column_end":31}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":22984,"byte_end":23010,"line_start":679,"line_end":679,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23015,"byte_end":23018,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ // Prints:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23023,"byte_end":23037,"line_start":681,"line_end":681,"column_start":5,"column_end":19}},{"value":"/ //   ready","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23042,"byte_end":23056,"line_start":682,"line_end":682,"column_start":5,"column_end":19}},{"value":"/ //   initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23061,"byte_end":23082,"line_start":683,"line_end":683,"column_start":5,"column_end":26}},{"value":"/ //   92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23087,"byte_end":23098,"line_start":684,"line_end":684,"column_start":5,"column_end":16}},{"value":"/ //   92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23103,"byte_end":23114,"line_start":685,"line_end":685,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23119,"byte_end":23126,"line_start":686,"line_end":686,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23394,"byte_end":23397,"line_start":695,"line_end":695,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24024,"byte_end":24027,"line_start":715,"line_end":715,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing function.","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23590,"byte_end":23656,"line_start":701,"line_end":701,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23665,"byte_end":23668,"line_start":702,"line_end":702,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23677,"byte_end":23690,"line_start":703,"line_end":703,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23699,"byte_end":23706,"line_start":704,"line_end":704,"column_start":9,"column_end":16}},{"value":"/ # fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23715,"byte_end":23732,"line_start":705,"line_end":705,"column_start":9,"column_end":26}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23741,"byte_end":23773,"line_start":706,"line_end":706,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23782,"byte_end":23785,"line_start":707,"line_end":707,"column_start":9,"column_end":12}},{"value":"/ let hello = \"Hello, World!\".to_string();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23794,"byte_end":23838,"line_start":708,"line_end":708,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23847,"byte_end":23850,"line_start":709,"line_end":709,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| hello.to_uppercase());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23859,"byte_end":23909,"line_start":710,"line_end":710,"column_start":9,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23918,"byte_end":23921,"line_start":711,"line_end":711,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(&*lazy, \"HELLO, WORLD!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23930,"byte_end":23970,"line_start":712,"line_end":712,"column_start":9,"column_end":49}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23979,"byte_end":23986,"line_start":713,"line_end":713,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23995,"byte_end":24002,"line_start":714,"line_end":714,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24305,"byte_end":24315,"line_start":722,"line_end":722,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24144,"byte_end":24196,"line_start":719,"line_end":719,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24205,"byte_end":24208,"line_start":720,"line_end":720,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24217,"byte_end":24289,"line_start":721,"line_end":721,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25099,"byte_end":25104,"line_start":746,"line_end":746,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24649,"byte_end":24720,"line_start":732,"line_end":732,"column_start":9,"column_end":80}},{"value":"/ the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24729,"byte_end":24744,"line_start":733,"line_end":733,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24753,"byte_end":24756,"line_start":734,"line_end":734,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24765,"byte_end":24825,"line_start":735,"line_end":735,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24834,"byte_end":24837,"line_start":736,"line_end":736,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24846,"byte_end":24859,"line_start":737,"line_end":737,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24868,"byte_end":24875,"line_start":738,"line_end":738,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24884,"byte_end":24916,"line_start":739,"line_end":739,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24925,"byte_end":24928,"line_start":740,"line_end":740,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24937,"byte_end":24969,"line_start":741,"line_end":741,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24978,"byte_end":24981,"line_start":742,"line_end":742,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24990,"byte_end":25030,"line_start":743,"line_end":743,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25039,"byte_end":25067,"line_start":744,"line_end":744,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25076,"byte_end":25083,"line_start":745,"line_end":745,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25809,"byte_end":25818,"line_start":767,"line_end":767,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut(&mut Lazy<T, F>) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a mutable reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a mutable reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25338,"byte_end":25417,"line_start":753,"line_end":753,"column_start":9,"column_end":88}},{"value":"/ the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25426,"byte_end":25441,"line_start":754,"line_end":754,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25450,"byte_end":25453,"line_start":755,"line_end":755,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `DerefMut` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25462,"byte_end":25525,"line_start":756,"line_end":756,"column_start":9,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25534,"byte_end":25537,"line_start":757,"line_end":757,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25546,"byte_end":25559,"line_start":758,"line_end":758,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25568,"byte_end":25575,"line_start":759,"line_end":759,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25584,"byte_end":25616,"line_start":760,"line_end":760,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25625,"byte_end":25628,"line_start":761,"line_end":761,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25637,"byte_end":25673,"line_start":762,"line_end":762,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25682,"byte_end":25685,"line_start":763,"line_end":763,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25694,"byte_end":25742,"line_start":764,"line_end":764,"column_start":9,"column_end":57}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25751,"byte_end":25777,"line_start":765,"line_end":765,"column_start":9,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25786,"byte_end":25793,"line_start":766,"line_end":766,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26412,"byte_end":26415,"line_start":785,"line_end":785,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get(&Lazy<T, F>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":25970,"byte_end":26028,"line_start":772,"line_end":772,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26037,"byte_end":26086,"line_start":773,"line_end":773,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26095,"byte_end":26098,"line_start":774,"line_end":774,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26107,"byte_end":26120,"line_start":775,"line_end":775,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26129,"byte_end":26136,"line_start":776,"line_end":776,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26145,"byte_end":26177,"line_start":777,"line_end":777,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26186,"byte_end":26189,"line_start":778,"line_end":778,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26198,"byte_end":26230,"line_start":779,"line_end":779,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26239,"byte_end":26242,"line_start":780,"line_end":780,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26251,"byte_end":26290,"line_start":781,"line_end":781,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26299,"byte_end":26327,"line_start":782,"line_end":782,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26336,"byte_end":26380,"line_start":783,"line_end":783,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26389,"byte_end":26396,"line_start":784,"line_end":784,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26970,"byte_end":26977,"line_start":802,"line_end":802,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut(&mut Lazy<T, F>) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26498,"byte_end":26564,"line_start":789,"line_end":789,"column_start":9,"column_end":75}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26573,"byte_end":26622,"line_start":790,"line_end":790,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26631,"byte_end":26634,"line_start":791,"line_end":791,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26643,"byte_end":26656,"line_start":792,"line_end":792,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26665,"byte_end":26672,"line_start":793,"line_end":793,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26681,"byte_end":26713,"line_start":794,"line_end":794,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26722,"byte_end":26725,"line_start":795,"line_end":795,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26734,"byte_end":26770,"line_start":796,"line_end":796,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26779,"byte_end":26782,"line_start":797,"line_end":797,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26791,"byte_end":26838,"line_start":798,"line_end":798,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26847,"byte_end":26873,"line_start":799,"line_end":799,"column_start":9,"column_end":35}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26882,"byte_end":26938,"line_start":800,"line_end":800,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":26947,"byte_end":26954,"line_start":801,"line_end":801,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27159,"byte_end":27164,"line_start":809,"line_end":809,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27294,"byte_end":27303,"line_start":815,"line_end":815,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27578,"byte_end":27585,"line_start":823,"line_end":823,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27492,"byte_end":27566,"line_start":822,"line_end":822,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":206},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27770,"byte_end":27774,"line_start":831,"line_end":831,"column_start":9,"column_end":13},"name":"sync","qualname":"::sync","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":276},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":298},{"krate":0,"index":307},{"krate":0,"index":312},{"krate":0,"index":317},{"krate":0,"index":320}],"decl_id":null,"docs":" Thread-safe, blocking version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Thread-safe, blocking version of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27654,"byte_end":27702,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"cfg(any(feature = \"std\", feature = \"critical-section\"))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27703,"byte_end":27761,"line_start":830,"line_end":830,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":234},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29035,"byte_end":29043,"line_start":869,"line_end":869,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::sync::OnceCell","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27963,"byte_end":28020,"line_start":841,"line_end":841,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28025,"byte_end":28028,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ `OnceCell` provides `&` references to the contents without RAII guards.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28033,"byte_end":28108,"line_start":843,"line_end":843,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28113,"byte_end":28116,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ Reading a non-`None` value out of `OnceCell` establishes a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28121,"byte_end":28183,"line_start":845,"line_end":845,"column_start":5,"column_end":67}},{"value":"/ happens-before relationship with a corresponding write. For example, if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28188,"byte_end":28263,"line_start":846,"line_end":846,"column_start":5,"column_end":80}},{"value":"/ thread A initializes the cell with `get_or_init(f)`, and thread B","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28268,"byte_end":28337,"line_start":847,"line_end":847,"column_start":5,"column_end":74}},{"value":"/ subsequently reads the result of this call, B also observes all the side","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28342,"byte_end":28418,"line_start":848,"line_end":848,"column_start":5,"column_end":81}},{"value":"/ effects of `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28423,"byte_end":28442,"line_start":849,"line_end":849,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28447,"byte_end":28450,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28455,"byte_end":28468,"line_start":851,"line_end":851,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28473,"byte_end":28480,"line_start":852,"line_end":852,"column_start":5,"column_end":12}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28485,"byte_end":28519,"line_start":853,"line_end":853,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28524,"byte_end":28527,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ static CELL: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28532,"byte_end":28584,"line_start":855,"line_end":855,"column_start":5,"column_end":57}},{"value":"/ assert!(CELL.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28589,"byte_end":28623,"line_start":856,"line_end":856,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28628,"byte_end":28631,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28636,"byte_end":28663,"line_start":858,"line_end":858,"column_start":5,"column_end":32}},{"value":"/     let value: &String = CELL.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28668,"byte_end":28718,"line_start":859,"line_end":859,"column_start":5,"column_end":55}},{"value":"/         \"Hello, World!\".to_string()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28723,"byte_end":28762,"line_start":860,"line_end":860,"column_start":5,"column_end":44}},{"value":"/     });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28767,"byte_end":28778,"line_start":861,"line_end":861,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28783,"byte_end":28826,"line_start":862,"line_end":862,"column_start":5,"column_end":48}},{"value":"/ }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28831,"byte_end":28854,"line_start":863,"line_end":863,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28859,"byte_end":28862,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ let value: Option<&String> = CELL.get();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28867,"byte_end":28911,"line_start":865,"line_end":865,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28916,"byte_end":28945,"line_start":866,"line_end":866,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.unwrap().as_str(), \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":28950,"byte_end":29007,"line_start":867,"line_end":867,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29012,"byte_end":29019,"line_start":868,"line_end":868,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29106,"byte_end":29113,"line_start":872,"line_end":872,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> OnceCell<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29242,"byte_end":29245,"line_start":878,"line_end":878,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29539,"byte_end":29544,"line_start":887,"line_end":887,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> OnceCell<T>","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2802},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29737,"byte_end":29747,"line_start":894,"line_end":894,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2803},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30023,"byte_end":30027,"line_start":903,"line_end":903,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30163,"byte_end":30165,"line_start":909,"line_end":909,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &OnceCell<T>) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30383,"byte_end":30386,"line_start":918,"line_end":918,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30332,"byte_end":30361,"line_start":917,"line_end":917,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30515,"byte_end":30525,"line_start":923,"line_end":923,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30458,"byte_end":30493,"line_start":922,"line_end":922,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30801,"byte_end":30804,"line_start":931,"line_end":931,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30617,"byte_end":30664,"line_start":927,"line_end":927,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30673,"byte_end":30676,"line_start":928,"line_end":928,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty, or being initialized. This","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30685,"byte_end":30752,"line_start":929,"line_end":929,"column_start":9,"column_end":76}},{"value":"/ method never blocks.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30761,"byte_end":30785,"line_start":930,"line_end":930,"column_start":9,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31845,"byte_end":31849,"line_start":961,"line_end":961,"column_start":16,"column_end":20},"name":"wait","qualname":"<OnceCell<T>>::wait","value":"fn wait(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value, blocking the current\n thread until it is set.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value, blocking the current","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31048,"byte_end":31116,"line_start":940,"line_end":940,"column_start":9,"column_end":77}},{"value":"/ thread until it is set.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31125,"byte_end":31152,"line_start":941,"line_end":941,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31161,"byte_end":31164,"line_start":942,"line_end":942,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31173,"byte_end":31180,"line_start":943,"line_end":943,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31189,"byte_end":31223,"line_start":944,"line_end":944,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31232,"byte_end":31235,"line_start":945,"line_end":945,"column_start":9,"column_end":12}},{"value":"/ let mut cell = std::sync::Arc::new(OnceCell::new());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31244,"byte_end":31300,"line_start":946,"line_end":946,"column_start":9,"column_end":65}},{"value":"/ let t = std::thread::spawn({","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31309,"byte_end":31341,"line_start":947,"line_end":947,"column_start":9,"column_end":41}},{"value":"/     let cell = std::sync::Arc::clone(&cell);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31350,"byte_end":31398,"line_start":948,"line_end":948,"column_start":9,"column_end":57}},{"value":"/     move || cell.set(92).unwrap()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31407,"byte_end":31444,"line_start":949,"line_end":949,"column_start":9,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31453,"byte_end":31460,"line_start":950,"line_end":950,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31469,"byte_end":31472,"line_start":951,"line_end":951,"column_start":9,"column_end":12}},{"value":"/ // Returns immediately, but might return None.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31481,"byte_end":31531,"line_start":952,"line_end":952,"column_start":9,"column_end":59}},{"value":"/ let _value_or_none = cell.get();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31540,"byte_end":31576,"line_start":953,"line_end":953,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31585,"byte_end":31588,"line_start":954,"line_end":954,"column_start":9,"column_end":12}},{"value":"/ // Will return 92, but might block until the other thread does `.set`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31597,"byte_end":31671,"line_start":955,"line_end":955,"column_start":9,"column_end":83}},{"value":"/ let value: &u32 = cell.wait();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31680,"byte_end":31714,"line_start":956,"line_end":956,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(*value, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31723,"byte_end":31750,"line_start":957,"line_end":957,"column_start":9,"column_end":36}},{"value":"/ t.join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31759,"byte_end":31781,"line_start":958,"line_end":958,"column_start":9,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31790,"byte_end":31797,"line_start":959,"line_end":959,"column_start":9,"column_end":16}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":31806,"byte_end":31829,"line_start":960,"line_end":960,"column_start":9,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32818,"byte_end":32825,"line_start":987,"line_end":987,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32179,"byte_end":32234,"line_start":971,"line_end":971,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32243,"byte_end":32246,"line_start":972,"line_end":972,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32255,"byte_end":32295,"line_start":973,"line_end":973,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32304,"byte_end":32307,"line_start":974,"line_end":974,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32316,"byte_end":32394,"line_start":975,"line_end":975,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32403,"byte_end":32476,"line_start":976,"line_end":976,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32485,"byte_end":32555,"line_start":977,"line_end":977,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32564,"byte_end":32567,"line_start":978,"line_end":978,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32576,"byte_end":32583,"line_start":979,"line_end":979,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32592,"byte_end":32626,"line_start":980,"line_end":980,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32635,"byte_end":32638,"line_start":981,"line_end":981,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32647,"byte_end":32697,"line_start":982,"line_end":982,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32706,"byte_end":32732,"line_start":983,"line_end":983,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32741,"byte_end":32768,"line_start":984,"line_end":984,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32777,"byte_end":32784,"line_start":985,"line_end":985,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32793,"byte_end":32802,"line_start":986,"line_end":986,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33245,"byte_end":33258,"line_start":999,"line_end":999,"column_start":23,"column_end":36},"name":"get_unchecked","qualname":"<OnceCell<T>>::get_unchecked","value":"unsafe fn get_unchecked(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get the reference to the underlying value, without checking if the\n cell is initialized.","sig":null,"attributes":[{"value":"/ Get the reference to the underlying value, without checking if the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32905,"byte_end":32975,"line_start":991,"line_end":991,"column_start":9,"column_end":79}},{"value":"/ cell is initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":32984,"byte_end":33008,"line_start":992,"line_end":992,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33017,"byte_end":33020,"line_start":993,"line_end":993,"column_start":9,"column_end":12}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33029,"byte_end":33041,"line_start":994,"line_end":994,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33050,"byte_end":33053,"line_start":995,"line_end":995,"column_start":9,"column_end":12}},{"value":"/ Caller must ensure that the cell is in initialized state, and that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33062,"byte_end":33132,"line_start":996,"line_end":996,"column_start":9,"column_end":79}},{"value":"/ the contents are acquired by (synchronized to) this thread.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33141,"byte_end":33204,"line_start":997,"line_end":997,"column_start":9,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33213,"byte_end":33222,"line_start":998,"line_end":998,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34042,"byte_end":34045,"line_start":1026,"line_end":1026,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33328,"byte_end":33374,"line_start":1003,"line_end":1003,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33383,"byte_end":33386,"line_start":1004,"line_end":1004,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33395,"byte_end":33464,"line_start":1005,"line_end":1005,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33473,"byte_end":33482,"line_start":1006,"line_end":1006,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33491,"byte_end":33494,"line_start":1007,"line_end":1007,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33503,"byte_end":33516,"line_start":1008,"line_end":1008,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33525,"byte_end":33528,"line_start":1009,"line_end":1009,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33537,"byte_end":33544,"line_start":1010,"line_end":1010,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33553,"byte_end":33587,"line_start":1011,"line_end":1011,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33596,"byte_end":33599,"line_start":1012,"line_end":1012,"column_start":9,"column_end":12}},{"value":"/ static CELL: OnceCell<i32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33608,"byte_end":33657,"line_start":1013,"line_end":1013,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33666,"byte_end":33669,"line_start":1014,"line_end":1014,"column_start":9,"column_end":12}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33678,"byte_end":33693,"line_start":1015,"line_end":1015,"column_start":9,"column_end":24}},{"value":"/     assert!(CELL.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33702,"byte_end":33740,"line_start":1016,"line_end":1016,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33749,"byte_end":33752,"line_start":1017,"line_end":1017,"column_start":9,"column_end":12}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33761,"byte_end":33792,"line_start":1018,"line_end":1018,"column_start":9,"column_end":40}},{"value":"/         assert_eq!(CELL.set(92), Ok(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33801,"byte_end":33846,"line_start":1019,"line_end":1019,"column_start":9,"column_end":54}},{"value":"/     }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33855,"byte_end":33882,"line_start":1020,"line_end":1020,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33891,"byte_end":33894,"line_start":1021,"line_end":1021,"column_start":9,"column_end":12}},{"value":"/     assert_eq!(CELL.set(62), Err(62));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33903,"byte_end":33945,"line_start":1022,"line_end":1022,"column_start":9,"column_end":51}},{"value":"/     assert_eq!(CELL.get(), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":33954,"byte_end":33996,"line_start":1023,"line_end":1023,"column_start":9,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34005,"byte_end":34010,"line_start":1024,"line_end":1024,"column_start":9,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34019,"byte_end":34026,"line_start":1025,"line_end":1025,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34736,"byte_end":34746,"line_start":1048,"line_end":1048,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert(&Self, T) -> Result<&T, (&T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34238,"byte_end":34320,"line_start":1033,"line_end":1033,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34329,"byte_end":34332,"line_start":1034,"line_end":1034,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34341,"byte_end":34354,"line_start":1035,"line_end":1035,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34363,"byte_end":34366,"line_start":1036,"line_end":1036,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34375,"byte_end":34382,"line_start":1037,"line_end":1037,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34391,"byte_end":34427,"line_start":1038,"line_end":1038,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34436,"byte_end":34439,"line_start":1039,"line_end":1039,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34448,"byte_end":34479,"line_start":1040,"line_end":1040,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34488,"byte_end":34522,"line_start":1041,"line_end":1041,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34531,"byte_end":34534,"line_start":1042,"line_end":1042,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34543,"byte_end":34588,"line_start":1043,"line_end":1043,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34597,"byte_end":34649,"line_start":1044,"line_end":1044,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34658,"byte_end":34661,"line_start":1045,"line_end":1045,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34670,"byte_end":34704,"line_start":1046,"line_end":1046,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":34713,"byte_end":34720,"line_start":1047,"line_end":1047,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36094,"byte_end":36105,"line_start":1083,"line_end":1083,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell\n was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35058,"byte_end":35129,"line_start":1057,"line_end":1057,"column_start":9,"column_end":80}},{"value":"/ was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35138,"byte_end":35152,"line_start":1058,"line_end":1058,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35161,"byte_end":35164,"line_start":1059,"line_end":1059,"column_start":9,"column_end":12}},{"value":"/ Many threads may call `get_or_init` concurrently with different","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35173,"byte_end":35240,"line_start":1060,"line_end":1060,"column_start":9,"column_end":76}},{"value":"/ initializing functions, but it is guaranteed that only one function","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35249,"byte_end":35320,"line_start":1061,"line_end":1061,"column_start":9,"column_end":80}},{"value":"/ will be executed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35329,"byte_end":35350,"line_start":1062,"line_end":1062,"column_start":9,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35359,"byte_end":35362,"line_start":1063,"line_end":1063,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35371,"byte_end":35383,"line_start":1064,"line_end":1064,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35392,"byte_end":35395,"line_start":1065,"line_end":1065,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35404,"byte_end":35474,"line_start":1066,"line_end":1066,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35483,"byte_end":35509,"line_start":1067,"line_end":1067,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35518,"byte_end":35521,"line_start":1068,"line_end":1068,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35530,"byte_end":35597,"line_start":1069,"line_end":1069,"column_start":9,"column_end":76}},{"value":"/ exact outcome is unspecified. Current implementation deadlocks, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35606,"byte_end":35677,"line_start":1070,"line_end":1070,"column_start":9,"column_end":80}},{"value":"/ this may be changed to a panic in the future.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35686,"byte_end":35735,"line_start":1071,"line_end":1071,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35744,"byte_end":35747,"line_start":1072,"line_end":1072,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35756,"byte_end":35769,"line_start":1073,"line_end":1073,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35778,"byte_end":35785,"line_start":1074,"line_end":1074,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35794,"byte_end":35828,"line_start":1075,"line_end":1075,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35837,"byte_end":35840,"line_start":1076,"line_end":1076,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35849,"byte_end":35880,"line_start":1077,"line_end":1077,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35889,"byte_end":35929,"line_start":1078,"line_end":1078,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35938,"byte_end":35965,"line_start":1079,"line_end":1079,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":35974,"byte_end":36026,"line_start":1080,"line_end":1080,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36035,"byte_end":36062,"line_start":1081,"line_end":1081,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36071,"byte_end":36078,"line_start":1082,"line_end":1082,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37412,"byte_end":37427,"line_start":1120,"line_end":1120,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36380,"byte_end":36442,"line_start":1094,"line_end":1094,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36451,"byte_end":36515,"line_start":1095,"line_end":1095,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36524,"byte_end":36546,"line_start":1096,"line_end":1096,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36555,"byte_end":36558,"line_start":1097,"line_end":1097,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36567,"byte_end":36579,"line_start":1098,"line_end":1098,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36588,"byte_end":36591,"line_start":1099,"line_end":1099,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36600,"byte_end":36661,"line_start":1100,"line_end":1100,"column_start":9,"column_end":70}},{"value":"/ the cell remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36670,"byte_end":36705,"line_start":1101,"line_end":1101,"column_start":9,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36714,"byte_end":36717,"line_start":1102,"line_end":1102,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36726,"byte_end":36789,"line_start":1103,"line_end":1103,"column_start":9,"column_end":72}},{"value":"/ The exact outcome is unspecified. Current implementation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36798,"byte_end":36858,"line_start":1104,"line_end":1104,"column_start":9,"column_end":69}},{"value":"/ deadlocks, but this may be changed to a panic in the future.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36867,"byte_end":36931,"line_start":1105,"line_end":1105,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36940,"byte_end":36943,"line_start":1106,"line_end":1106,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36952,"byte_end":36965,"line_start":1107,"line_end":1107,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36974,"byte_end":36981,"line_start":1108,"line_end":1108,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":36990,"byte_end":37024,"line_start":1109,"line_end":1109,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37033,"byte_end":37036,"line_start":1110,"line_end":1110,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37045,"byte_end":37076,"line_start":1111,"line_end":1111,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37085,"byte_end":37143,"line_start":1112,"line_end":1112,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37152,"byte_end":37186,"line_start":1113,"line_end":1113,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37195,"byte_end":37255,"line_start":1114,"line_end":1114,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37264,"byte_end":37278,"line_start":1115,"line_end":1115,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37287,"byte_end":37294,"line_start":1116,"line_end":1116,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37303,"byte_end":37334,"line_start":1117,"line_end":1117,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37343,"byte_end":37380,"line_start":1118,"line_end":1118,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37389,"byte_end":37396,"line_start":1119,"line_end":1119,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38999,"byte_end":39003,"line_start":1165,"line_end":1165,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37856,"byte_end":37941,"line_start":1136,"line_end":1136,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37950,"byte_end":37953,"line_start":1137,"line_end":1137,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":37962,"byte_end":38041,"line_start":1138,"line_end":1138,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38050,"byte_end":38053,"line_start":1139,"line_end":1139,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38062,"byte_end":38076,"line_start":1140,"line_end":1140,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38085,"byte_end":38088,"line_start":1141,"line_end":1141,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38097,"byte_end":38104,"line_start":1142,"line_end":1142,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38113,"byte_end":38147,"line_start":1143,"line_end":1143,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38156,"byte_end":38159,"line_start":1144,"line_end":1144,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38168,"byte_end":38221,"line_start":1145,"line_end":1145,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38230,"byte_end":38264,"line_start":1146,"line_end":1146,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38273,"byte_end":38276,"line_start":1147,"line_end":1147,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38285,"byte_end":38320,"line_start":1148,"line_end":1148,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38329,"byte_end":38372,"line_start":1149,"line_end":1149,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38381,"byte_end":38436,"line_start":1150,"line_end":1150,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38445,"byte_end":38478,"line_start":1151,"line_end":1151,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38487,"byte_end":38494,"line_start":1152,"line_end":1152,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38503,"byte_end":38506,"line_start":1153,"line_end":1153,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38515,"byte_end":38593,"line_start":1154,"line_end":1154,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38602,"byte_end":38675,"line_start":1155,"line_end":1155,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38684,"byte_end":38754,"line_start":1156,"line_end":1156,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38763,"byte_end":38766,"line_start":1157,"line_end":1157,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38775,"byte_end":38782,"line_start":1158,"line_end":1158,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38791,"byte_end":38825,"line_start":1159,"line_end":1159,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38834,"byte_end":38837,"line_start":1160,"line_end":1160,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38846,"byte_end":38896,"line_start":1161,"line_end":1161,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38905,"byte_end":38931,"line_start":1162,"line_end":1162,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38940,"byte_end":38967,"line_start":1163,"line_end":1163,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":38976,"byte_end":38983,"line_start":1164,"line_end":1164,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39666,"byte_end":39676,"line_start":1185,"line_end":1185,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value. Returns\n `None` if the cell was empty.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value. Returns","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39110,"byte_end":39175,"line_start":1169,"line_end":1169,"column_start":9,"column_end":74}},{"value":"/ `None` if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39184,"byte_end":39217,"line_start":1170,"line_end":1170,"column_start":9,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39226,"byte_end":39229,"line_start":1171,"line_end":1171,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39238,"byte_end":39252,"line_start":1172,"line_end":1172,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39261,"byte_end":39264,"line_start":1173,"line_end":1173,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39273,"byte_end":39280,"line_start":1174,"line_end":1174,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39289,"byte_end":39323,"line_start":1175,"line_end":1175,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39332,"byte_end":39335,"line_start":1176,"line_end":1176,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39344,"byte_end":39393,"line_start":1177,"line_end":1177,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39402,"byte_end":39442,"line_start":1178,"line_end":1178,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39451,"byte_end":39454,"line_start":1179,"line_end":1179,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39463,"byte_end":39494,"line_start":1180,"line_end":1180,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39503,"byte_end":39546,"line_start":1181,"line_end":1181,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39555,"byte_end":39616,"line_start":1182,"line_end":1182,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39625,"byte_end":39632,"line_start":1183,"line_end":1183,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39641,"byte_end":39650,"line_start":1184,"line_end":1184,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":276},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40688,"byte_end":40692,"line_start":1223,"line_end":1223,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::sync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39751,"byte_end":39804,"line_start":1190,"line_end":1190,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39809,"byte_end":39812,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39817,"byte_end":39873,"line_start":1192,"line_end":1192,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39878,"byte_end":39881,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39886,"byte_end":39899,"line_start":1194,"line_end":1194,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39904,"byte_end":39907,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39912,"byte_end":39919,"line_start":1196,"line_end":1196,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39924,"byte_end":39958,"line_start":1197,"line_end":1197,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39963,"byte_end":39966,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":39971,"byte_end":40001,"line_start":1199,"line_end":1199,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40006,"byte_end":40009,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40014,"byte_end":40077,"line_start":1201,"line_end":1201,"column_start":5,"column_end":68}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40082,"byte_end":40115,"line_start":1202,"line_end":1202,"column_start":5,"column_end":38}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40120,"byte_end":40155,"line_start":1203,"line_end":1203,"column_start":5,"column_end":40}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40160,"byte_end":40202,"line_start":1204,"line_end":1204,"column_start":5,"column_end":47}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40207,"byte_end":40250,"line_start":1205,"line_end":1205,"column_start":5,"column_end":48}},{"value":"/     m","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40255,"byte_end":40264,"line_start":1206,"line_end":1206,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40269,"byte_end":40276,"line_start":1207,"line_end":1207,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40281,"byte_end":40284,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40289,"byte_end":40304,"line_start":1209,"line_end":1209,"column_start":5,"column_end":20}},{"value":"/     println!(\"ready\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40309,"byte_end":40335,"line_start":1210,"line_end":1210,"column_start":5,"column_end":31}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40340,"byte_end":40371,"line_start":1211,"line_end":1211,"column_start":5,"column_end":36}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40376,"byte_end":40423,"line_start":1212,"line_end":1212,"column_start":5,"column_end":52}},{"value":"/     }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40428,"byte_end":40455,"line_start":1213,"line_end":1213,"column_start":5,"column_end":32}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40460,"byte_end":40503,"line_start":1214,"line_end":1214,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40508,"byte_end":40511,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/     // Prints:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40516,"byte_end":40534,"line_start":1216,"line_end":1216,"column_start":5,"column_end":23}},{"value":"/     //   ready","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40539,"byte_end":40557,"line_start":1217,"line_end":1217,"column_start":5,"column_end":23}},{"value":"/     //   initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40562,"byte_end":40587,"line_start":1218,"line_end":1218,"column_start":5,"column_end":30}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40592,"byte_end":40618,"line_start":1219,"line_end":1219,"column_start":5,"column_end":31}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40623,"byte_end":40650,"line_start":1220,"line_end":1220,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40655,"byte_end":40660,"line_start":1221,"line_end":1221,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40665,"byte_end":40672,"line_start":1222,"line_end":1222,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40844,"byte_end":40847,"line_start":1229,"line_end":1229,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41613,"byte_end":41616,"line_start":1246,"line_end":1246,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41513,"byte_end":41569,"line_start":1244,"line_end":1244,"column_start":9,"column_end":65}},{"value":"/ function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41578,"byte_end":41591,"line_start":1245,"line_end":1245,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41888,"byte_end":41898,"line_start":1253,"line_end":1253,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41727,"byte_end":41779,"line_start":1250,"line_end":1250,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41788,"byte_end":41791,"line_start":1251,"line_end":1251,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41800,"byte_end":41872,"line_start":1252,"line_end":1252,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42668,"byte_end":42673,"line_start":1276,"line_end":1276,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42232,"byte_end":42280,"line_start":1263,"line_end":1263,"column_start":9,"column_end":57}},{"value":"/ returns a reference to the result. This is equivalent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42289,"byte_end":42346,"line_start":1264,"line_end":1264,"column_start":9,"column_end":66}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42355,"byte_end":42396,"line_start":1265,"line_end":1265,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42405,"byte_end":42408,"line_start":1266,"line_end":1266,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42417,"byte_end":42430,"line_start":1267,"line_end":1267,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42439,"byte_end":42446,"line_start":1268,"line_end":1268,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42455,"byte_end":42485,"line_start":1269,"line_end":1269,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42494,"byte_end":42497,"line_start":1270,"line_end":1270,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42506,"byte_end":42538,"line_start":1271,"line_end":1271,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42547,"byte_end":42550,"line_start":1272,"line_end":1272,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42559,"byte_end":42599,"line_start":1273,"line_end":1273,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42608,"byte_end":42636,"line_start":1274,"line_end":1274,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42645,"byte_end":42652,"line_start":1275,"line_end":1275,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43330,"byte_end":43339,"line_start":1295,"line_end":1295,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut(&mut Lazy<T, F>) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a mutable reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42907,"byte_end":42955,"line_start":1283,"line_end":1283,"column_start":9,"column_end":57}},{"value":"/ returns a mutable reference to the result. This is equivalent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42964,"byte_end":43029,"line_start":1284,"line_end":1284,"column_start":9,"column_end":74}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43038,"byte_end":43079,"line_start":1285,"line_end":1285,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43088,"byte_end":43091,"line_start":1286,"line_end":1286,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43100,"byte_end":43113,"line_start":1287,"line_end":1287,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43122,"byte_end":43129,"line_start":1288,"line_end":1288,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43138,"byte_end":43168,"line_start":1289,"line_end":1289,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43177,"byte_end":43180,"line_start":1290,"line_end":1290,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43189,"byte_end":43225,"line_start":1291,"line_end":1291,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43234,"byte_end":43237,"line_start":1292,"line_end":1292,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &mut 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43246,"byte_end":43298,"line_start":1293,"line_end":1293,"column_start":9,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43307,"byte_end":43314,"line_start":1294,"line_end":1294,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43931,"byte_end":43934,"line_start":1313,"line_end":1313,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get(&Lazy<T, F>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43491,"byte_end":43549,"line_start":1300,"line_end":1300,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43558,"byte_end":43607,"line_start":1301,"line_end":1301,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43616,"byte_end":43619,"line_start":1302,"line_end":1302,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43628,"byte_end":43641,"line_start":1303,"line_end":1303,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43650,"byte_end":43657,"line_start":1304,"line_end":1304,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43666,"byte_end":43696,"line_start":1305,"line_end":1305,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43705,"byte_end":43708,"line_start":1306,"line_end":1306,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43717,"byte_end":43749,"line_start":1307,"line_end":1307,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43758,"byte_end":43761,"line_start":1308,"line_end":1308,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43770,"byte_end":43809,"line_start":1309,"line_end":1309,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43818,"byte_end":43846,"line_start":1310,"line_end":1310,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43855,"byte_end":43899,"line_start":1311,"line_end":1311,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":43908,"byte_end":43915,"line_start":1312,"line_end":1312,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44481,"byte_end":44488,"line_start":1330,"line_end":1330,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut(&mut Lazy<T, F>) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44017,"byte_end":44075,"line_start":1317,"line_end":1317,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44084,"byte_end":44133,"line_start":1318,"line_end":1318,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44142,"byte_end":44145,"line_start":1319,"line_end":1319,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44154,"byte_end":44167,"line_start":1320,"line_end":1320,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44176,"byte_end":44183,"line_start":1321,"line_end":1321,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44192,"byte_end":44222,"line_start":1322,"line_end":1322,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44231,"byte_end":44234,"line_start":1323,"line_end":1323,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44243,"byte_end":44279,"line_start":1324,"line_end":1324,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44288,"byte_end":44291,"line_start":1325,"line_end":1325,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44300,"byte_end":44347,"line_start":1326,"line_end":1326,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44356,"byte_end":44384,"line_start":1327,"line_end":1327,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44393,"byte_end":44449,"line_start":1328,"line_end":1328,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44458,"byte_end":44465,"line_start":1329,"line_end":1329,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44670,"byte_end":44675,"line_start":1337,"line_end":1337,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44805,"byte_end":44814,"line_start":1343,"line_end":1343,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":45089,"byte_end":45096,"line_start":1351,"line_end":1351,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":45003,"byte_end":45077,"line_start":1350,"line_end":1350,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":321},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"race","qualname":"::race","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":347},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":358},{"krate":0,"index":371},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":387},{"krate":0,"index":401},{"krate":0,"index":404}],"decl_id":null,"docs":" Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","sig":null,"attributes":[{"value":"cfg(feature = \"race\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":45600,"byte_end":45624,"line_start":1374,"line_end":1374,"column_start":1,"column_end":25}},{"value":"/ Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":58861,"byte_end":58930,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":58931,"byte_end":58934,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ If two threads race to initialize a type from the `race` module, they","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":58935,"byte_end":59008,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ don't block, execute initialization function together, but only one of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59009,"byte_end":59083,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ them stores the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59084,"byte_end":59111,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59112,"byte_end":59115,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This module does not require `std` feature.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59116,"byte_end":59163,"line_start":7,"line_end":7,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59164,"byte_end":59167,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Atomic orderings","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59168,"byte_end":59190,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59191,"byte_end":59194,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ All types in this module use `Acquire` and `Release`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59195,"byte_end":59251,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/ [atomic orderings](Ordering) for all their operations. While this is not","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59252,"byte_end":59328,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ strictly necessary for types other than `OnceBox`, it is useful for users as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59329,"byte_end":59409,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ it allows them to be certain that after `get` or `get_or_init` returns on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59410,"byte_end":59487,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ one thread, any side-effects caused by the setter thread prior to them","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59488,"byte_end":59562,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ calling `set` or `get_or_init` will be made visible to that thread; without","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59563,"byte_end":59642,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ it, it's possible for it to appear as if they haven't happened yet from the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59643,"byte_end":59722,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ getter thread's perspective. This is an acceptable tradeoff to make since","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59723,"byte_end":59800,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ `Acquire` and `Release` have very little performance overhead on most","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59801,"byte_end":59874,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ architectures versus `Relaxed`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":59875,"byte_end":59910,"line_start":20,"line_end":20,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":460},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60294,"byte_end":60310,"line_start":35,"line_end":35,"column_start":12,"column_end":28},"name":"OnceNonZeroUsize","qualname":"::race::OnceNonZeroUsize","value":"OnceNonZeroUsize {  }","parent":null,"children":[{"krate":0,"index":461}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60199,"byte_end":60256,"line_start":33,"line_end":33,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60429,"byte_end":60432,"line_start":42,"line_end":42,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceNonZeroUsize>::new","value":"const fn new() -> OnceNonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60368,"byte_end":60397,"line_start":40,"line_end":40,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60402,"byte_end":60411,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60580,"byte_end":60583,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceNonZeroUsize>::get","value":"fn get(&Self) -> Option<NonZeroUsize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60524,"byte_end":60554,"line_start":46,"line_end":46,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60559,"byte_end":60568,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60878,"byte_end":60881,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceNonZeroUsize>::set","value":"fn set(&Self, NonZeroUsize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60713,"byte_end":60759,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60764,"byte_end":60767,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60772,"byte_end":60838,"line_start":55,"line_end":55,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60843,"byte_end":60852,"line_start":56,"line_end":56,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60857,"byte_end":60866,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61442,"byte_end":61453,"line_start":73,"line_end":73,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceNonZeroUsize>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> NonZeroUsize where F: FnOnce() -> NonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61153,"byte_end":61228,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61233,"byte_end":61243,"line_start":68,"line_end":68,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61248,"byte_end":61251,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61256,"byte_end":61332,"line_start":70,"line_end":70,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61337,"byte_end":61412,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61417,"byte_end":61430,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62077,"byte_end":62092,"line_start":91,"line_end":91,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceNonZeroUsize>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<NonZeroUsize, E> where\nF: FnOnce() -> Result<NonZeroUsize, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61720,"byte_end":61782,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61787,"byte_end":61851,"line_start":85,"line_end":85,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61856,"byte_end":61878,"line_start":86,"line_end":86,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61883,"byte_end":61886,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61891,"byte_end":61967,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":61972,"byte_end":62047,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62052,"byte_end":62065,"line_start":90,"line_end":90,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":466},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62822,"byte_end":62830,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"OnceBool","qualname":"::race::OnceBool","value":"OnceBool {  }","parent":null,"children":[{"krate":0,"index":467}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62727,"byte_end":62784,"line_start":112,"line_end":112,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62946,"byte_end":62949,"line_start":121,"line_end":121,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceBool>::new","value":"const fn new() -> OnceBool","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62885,"byte_end":62914,"line_start":119,"line_end":119,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62919,"byte_end":62928,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63085,"byte_end":63088,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceBool>::get","value":"fn get(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63029,"byte_end":63059,"line_start":125,"line_end":125,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63064,"byte_end":63073,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63341,"byte_end":63344,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceBool>::set","value":"fn set(&Self, bool) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63176,"byte_end":63222,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63227,"byte_end":63230,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63235,"byte_end":63301,"line_start":133,"line_end":133,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63306,"byte_end":63315,"line_start":134,"line_end":134,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63320,"byte_end":63329,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63735,"byte_end":63746,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceBool>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> bool where F: FnOnce() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63446,"byte_end":63521,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63526,"byte_end":63536,"line_start":141,"line_end":141,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63541,"byte_end":63544,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63549,"byte_end":63625,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63630,"byte_end":63705,"line_start":144,"line_end":144,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63710,"byte_end":63723,"line_start":145,"line_end":145,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64265,"byte_end":64280,"line_start":160,"line_end":160,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceBool>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<bool, E> where F: FnOnce() ->\nResult<bool, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63908,"byte_end":63970,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":63975,"byte_end":64039,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64044,"byte_end":64066,"line_start":155,"line_end":155,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64071,"byte_end":64074,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64079,"byte_end":64155,"line_start":157,"line_end":157,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64160,"byte_end":64235,"line_start":158,"line_end":158,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64240,"byte_end":64253,"line_start":159,"line_end":159,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64783,"byte_end":64790,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"OnceRef","qualname":"::race::OnceRef","value":"OnceRef {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64714,"byte_end":64771,"line_start":178,"line_end":178,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65045,"byte_end":65048,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"fmt","qualname":"<OnceRef as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65217,"byte_end":65224,"line_start":194,"line_end":194,"column_start":8,"column_end":15},"name":"default","qualname":"<OnceRef as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65346,"byte_end":65349,"line_start":201,"line_end":201,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceRef>::new","value":"const fn new() -> OnceRef","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65299,"byte_end":65328,"line_start":200,"line_end":200,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65519,"byte_end":65522,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceRef>::get","value":"fn get(&Self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65462,"byte_end":65507,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65800,"byte_end":65803,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceRef>::set","value":"fn set(&Self, &'a T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65646,"byte_end":65692,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65697,"byte_end":65700,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65705,"byte_end":65774,"line_start":213,"line_end":213,"column_start":5,"column_end":74}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65779,"byte_end":65788,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66410,"byte_end":66421,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceRef>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &'a T where F: FnOnce() -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66121,"byte_end":66196,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66201,"byte_end":66211,"line_start":226,"line_end":226,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66216,"byte_end":66219,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66224,"byte_end":66300,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66305,"byte_end":66380,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66385,"byte_end":66398,"line_start":230,"line_end":230,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":67024,"byte_end":67039,"line_start":249,"line_end":249,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceRef>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&'a T, E> where F: FnOnce() ->\nResult<&'a T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66667,"byte_end":66729,"line_start":242,"line_end":242,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66734,"byte_end":66798,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66803,"byte_end":66825,"line_start":244,"line_end":244,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66830,"byte_end":66833,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66838,"byte_end":66914,"line_start":246,"line_end":246,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66919,"byte_end":66994,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":66999,"byte_end":67012,"line_start":248,"line_end":248,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":422},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68387,"byte_end":68394,"line_start":301,"line_end":301,"column_start":16,"column_end":23},"name":"OnceBox","qualname":"::race::once_box::OnceBox","value":"OnceBox {  }","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68314,"byte_end":68371,"line_start":300,"line_end":300,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68537,"byte_end":68540,"line_start":307,"line_end":307,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceBox<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68745,"byte_end":68752,"line_start":313,"line_end":313,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceBox<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68851,"byte_end":68855,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"name":"drop","qualname":"<OnceBox<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69113,"byte_end":69116,"line_start":329,"line_end":329,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceBox<T>>::new","value":"const fn new() -> OnceBox<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69062,"byte_end":69091,"line_start":328,"line_end":328,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69298,"byte_end":69301,"line_start":334,"line_end":334,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceBox<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69237,"byte_end":69282,"line_start":333,"line_end":333,"column_start":9,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69681,"byte_end":69684,"line_start":346,"line_end":346,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceBox<T>>::set","value":"fn set(&Self, Box<T>) -> Result<(), Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69511,"byte_end":69557,"line_start":342,"line_end":342,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69566,"byte_end":69569,"line_start":343,"line_end":343,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69578,"byte_end":69647,"line_start":344,"line_end":344,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69656,"byte_end":69665,"line_start":345,"line_end":345,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70467,"byte_end":70478,"line_start":367,"line_end":367,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceBox<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70154,"byte_end":70229,"line_start":361,"line_end":361,"column_start":9,"column_end":84}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70238,"byte_end":70248,"line_start":362,"line_end":362,"column_start":9,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70257,"byte_end":70260,"line_start":363,"line_end":363,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70269,"byte_end":70345,"line_start":364,"line_end":364,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70354,"byte_end":70429,"line_start":365,"line_end":365,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70438,"byte_end":70451,"line_start":366,"line_end":366,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":71148,"byte_end":71163,"line_start":385,"line_end":385,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceBox<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<Box<T>, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70763,"byte_end":70825,"line_start":378,"line_end":378,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70834,"byte_end":70898,"line_start":379,"line_end":379,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70907,"byte_end":70929,"line_start":380,"line_end":380,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70938,"byte_end":70941,"line_start":381,"line_end":381,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":70950,"byte_end":71026,"line_start":382,"line_end":382,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":71035,"byte_end":71110,"line_start":383,"line_end":383,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":71119,"byte_end":71132,"line_start":384,"line_end":384,"column_start":9,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47022,"byte_end":47030,"line_start":34,"line_end":34,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47067,"byte_end":47075,"line_start":35,"line_end":35,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47137,"byte_end":47145,"line_start":37,"line_end":37,"column_start":55,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47187,"byte_end":47195,"line_start":38,"line_end":38,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47211,"byte_end":47219,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":51278,"byte_end":51283,"line_start":160,"line_end":160,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13129,"byte_end":13137,"line_start":393,"line_end":393,"column_start":59,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13183,"byte_end":13191,"line_start":394,"line_end":394,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13223,"byte_end":13231,"line_start":396,"line_end":396,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13348,"byte_end":13356,"line_start":402,"line_end":402,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13645,"byte_end":13653,"line_start":411,"line_end":411,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14150,"byte_end":14158,"line_start":427,"line_end":427,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14287,"byte_end":14295,"line_start":433,"line_end":433,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14327,"byte_end":14335,"line_start":435,"line_end":435,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14446,"byte_end":14454,"line_start":441,"line_end":441,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23280,"byte_end":23284,"line_start":692,"line_end":692,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23370,"byte_end":23374,"line_start":694,"line_end":694,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23569,"byte_end":23573,"line_start":700,"line_end":700,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24628,"byte_end":24632,"line_start":731,"line_end":731,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27110,"byte_end":27114,"line_start":807,"line_end":807,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27270,"byte_end":27274,"line_start":814,"line_end":814,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27474,"byte_end":27478,"line_start":821,"line_end":821,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29081,"byte_end":29089,"line_start":871,"line_end":871,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29217,"byte_end":29225,"line_start":877,"line_end":877,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29514,"byte_end":29522,"line_start":886,"line_end":886,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29998,"byte_end":30006,"line_start":902,"line_end":902,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30138,"byte_end":30146,"line_start":908,"line_end":908,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30282,"byte_end":30290,"line_start":914,"line_end":914,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30310,"byte_end":30318,"line_start":916,"line_end":916,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40820,"byte_end":40824,"line_start":1228,"line_end":1228,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41303,"byte_end":41307,"line_start":1238,"line_end":1238,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41429,"byte_end":41433,"line_start":1241,"line_end":1241,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41492,"byte_end":41496,"line_start":1243,"line_end":1243,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42211,"byte_end":42215,"line_start":1262,"line_end":1262,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44621,"byte_end":44625,"line_start":1335,"line_end":1335,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44781,"byte_end":44785,"line_start":1342,"line_end":1342,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44985,"byte_end":44989,"line_start":1349,"line_end":1349,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60345,"byte_end":60361,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62870,"byte_end":62878,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64969,"byte_end":64976,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65021,"byte_end":65028,"line_start":187,"line_end":187,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65193,"byte_end":65200,"line_start":193,"line_end":193,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65278,"byte_end":65285,"line_start":199,"line_end":199,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":397},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68513,"byte_end":68520,"line_start":306,"line_end":306,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68721,"byte_end":68728,"line_start":312,"line_end":312,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68827,"byte_end":68834,"line_start":318,"line_end":318,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69041,"byte_end":69048,"line_start":327,"line_end":327,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":71913,"byte_end":71920,"line_start":409,"line_end":409,"column_start":42,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":45633,"byte_end":45637,"line_start":1375,"line_end":1375,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":321}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47022,"byte_end":47030,"line_start":34,"line_end":34,"column_start":38,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47067,"byte_end":47075,"line_start":35,"line_end":35,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47137,"byte_end":47145,"line_start":37,"line_end":37,"column_start":55,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47187,"byte_end":47195,"line_start":38,"line_end":38,"column_start":36,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":9146}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":47211,"byte_end":47219,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/imp_std.rs","byte_start":51278,"byte_end":51283,"line_start":160,"line_end":160,"column_start":15,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13129,"byte_end":13137,"line_start":393,"line_end":393,"column_start":59,"column_end":67},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13183,"byte_end":13191,"line_start":394,"line_end":394,"column_start":40,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":9146}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13223,"byte_end":13231,"line_start":396,"line_end":396,"column_start":25,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13348,"byte_end":13356,"line_start":402,"line_end":402,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":13645,"byte_end":13653,"line_start":411,"line_end":411,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":2801}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14150,"byte_end":14158,"line_start":427,"line_end":427,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14287,"byte_end":14295,"line_start":433,"line_end":433,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":2836}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14327,"byte_end":14335,"line_start":435,"line_end":435,"column_start":25,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":14446,"byte_end":14454,"line_start":441,"line_end":441,"column_start":13,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23280,"byte_end":23284,"line_start":692,"line_end":692,"column_start":49,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23370,"byte_end":23374,"line_start":694,"line_end":694,"column_start":43,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":23569,"byte_end":23573,"line_start":700,"line_end":700,"column_start":16,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":24628,"byte_end":24632,"line_start":731,"line_end":731,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27110,"byte_end":27114,"line_start":807,"line_end":807,"column_start":41,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27270,"byte_end":27274,"line_start":814,"line_end":814,"column_start":44,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":27474,"byte_end":27478,"line_start":821,"line_end":821,"column_start":34,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29081,"byte_end":29089,"line_start":871,"line_end":871,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29217,"byte_end":29225,"line_start":877,"line_end":877,"column_start":40,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29514,"byte_end":29522,"line_start":886,"line_end":886,"column_start":30,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":2801}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":29998,"byte_end":30006,"line_start":902,"line_end":902,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30138,"byte_end":30146,"line_start":908,"line_end":908,"column_start":38,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30282,"byte_end":30290,"line_start":914,"line_end":914,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":2836}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":30310,"byte_end":30318,"line_start":916,"line_end":916,"column_start":13,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":40820,"byte_end":40824,"line_start":1228,"line_end":1228,"column_start":43,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41303,"byte_end":41307,"line_start":1238,"line_end":1238,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41429,"byte_end":41433,"line_start":1241,"line_end":1241,"column_start":49,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":41492,"byte_end":41496,"line_start":1243,"line_end":1243,"column_start":16,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":42211,"byte_end":42215,"line_start":1262,"line_end":1262,"column_start":31,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44621,"byte_end":44625,"line_start":1335,"line_end":1335,"column_start":41,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44781,"byte_end":44785,"line_start":1342,"line_end":1342,"column_start":44,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/lib.rs","byte_start":44985,"byte_end":44989,"line_start":1349,"line_end":1349,"column_start":34,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":60345,"byte_end":60361,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":62870,"byte_end":62878,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":64969,"byte_end":64976,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65021,"byte_end":65028,"line_start":187,"line_end":187,"column_start":34,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65193,"byte_end":65200,"line_start":193,"line_end":193,"column_start":25,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":65278,"byte_end":65285,"line_start":199,"line_end":199,"column_start":13,"column_end":20},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68513,"byte_end":68520,"line_start":306,"line_end":306,"column_start":34,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":422},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68721,"byte_end":68728,"line_start":312,"line_end":312,"column_start":25,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":422},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":68827,"byte_end":68834,"line_start":318,"line_end":318,"column_start":22,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":422},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":69041,"byte_end":69048,"line_start":327,"line_end":327,"column_start":13,"column_end":20},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.17.1/src/race.rs","byte_start":71913,"byte_end":71920,"line_start":409,"line_end":409,"column_start":42,"column_end":49},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":422},"to":{"krate":2,"index":3191}}]}