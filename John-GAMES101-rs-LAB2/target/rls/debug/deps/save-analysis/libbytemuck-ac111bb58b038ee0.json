{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=ac111bb58b038ee0","-C","extra-filename=-ac111bb58b038ee0","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB2/target/rls/debug/deps/libbytemuck-ac111bb58b038ee0.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[637236782545552179,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":11684,"line_start":1,"line_end":399,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":2241,"byte_end":2245,"line_start":58,"line_end":58,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3508,"byte_end":3509,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3546,"byte_end":3563,"line_start":101,"line_end":101,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3613,"byte_end":3614,"line_start":106,"line_end":106,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3668,"byte_end":3669,"line_start":108,"line_end":108,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3694,"byte_end":3695,"line_start":111,"line_end":111,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3739,"byte_end":3740,"line_start":113,"line_end":113,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3777,"byte_end":3778,"line_start":116,"line_end":116,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3817,"byte_end":3818,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3855,"byte_end":3856,"line_start":122,"line_end":122,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3897,"byte_end":3898,"line_start":125,"line_end":125,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":11684,"line_start":1,"line_end":399,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":162},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":407},{"krate":0,"index":859},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":34,"byte_end":77,"line_start":3,"line_end":3,"column_start":1,"column_end":44}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":211,"byte_end":285,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":286,"byte_end":289,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":290,"byte_end":303,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":304,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":308,"byte_end":381,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":382,"byte_end":396,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":397,"byte_end":400,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":401,"byte_end":424,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":425,"byte_end":453,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":454,"byte_end":486,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":487,"byte_end":519,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":520,"byte_end":560,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":561,"byte_end":564,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":565,"byte_end":640,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":641,"byte_end":720,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":721,"byte_end":801,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":802,"byte_end":881,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":882,"byte_end":900,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":901,"byte_end":904,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":905,"byte_end":932,"line_start":26,"line_end":26,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":933,"byte_end":936,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":937,"byte_end":1008,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1009,"byte_end":1049,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1050,"byte_end":1053,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1054,"byte_end":1129,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1130,"byte_end":1207,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1208,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1286,"byte_end":1331,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1332,"byte_end":1335,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1336,"byte_end":1351,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1352,"byte_end":1355,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1356,"byte_end":1436,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1437,"byte_end":1516,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1517,"byte_end":1596,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1597,"byte_end":1667,"line_start":41,"line_end":41,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14713,"byte_end":14726,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12114,"byte_end":12193,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12194,"byte_end":12197,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12198,"byte_end":12255,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12256,"byte_end":12317,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12318,"byte_end":12397,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12398,"byte_end":12471,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12472,"byte_end":12547,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12548,"byte_end":12614,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12615,"byte_end":12618,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12619,"byte_end":12698,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12699,"byte_end":12775,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12776,"byte_end":12779,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12780,"byte_end":12851,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12852,"byte_end":12921,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12922,"byte_end":12956,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12957,"byte_end":12960,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12961,"byte_end":12973,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12974,"byte_end":12977,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":12978,"byte_end":13055,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13056,"byte_end":13133,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13134,"byte_end":13205,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13206,"byte_end":13286,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13287,"byte_end":13365,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13366,"byte_end":13389,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13390,"byte_end":13393,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13394,"byte_end":13474,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13475,"byte_end":13555,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13556,"byte_end":13600,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13601,"byte_end":13604,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13605,"byte_end":13617,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13618,"byte_end":13621,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13622,"byte_end":13699,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13700,"byte_end":13778,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13779,"byte_end":13822,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13823,"byte_end":13826,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13827,"byte_end":13867,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13868,"byte_end":13915,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13916,"byte_end":13987,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":13988,"byte_end":14050,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14051,"byte_end":14131,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14132,"byte_end":14190,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14191,"byte_end":14265,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14266,"byte_end":14343,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14344,"byte_end":14424,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14425,"byte_end":14505,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14506,"byte_end":14585,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14586,"byte_end":14636,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14637,"byte_end":14695,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":462},{"krate":0,"index":466},{"krate":0,"index":470},{"krate":0,"index":474},{"krate":0,"index":478},{"krate":0,"index":482},{"krate":0,"index":486},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":502},{"krate":0,"index":506},{"krate":0,"index":510},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15001,"byte_end":15068,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15069,"byte_end":15114,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19842,"byte_end":19859,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15202,"byte_end":15280,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15281,"byte_end":15360,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15361,"byte_end":15441,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15442,"byte_end":15516,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15517,"byte_end":15545,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15546,"byte_end":15549,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15550,"byte_end":15628,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15629,"byte_end":15705,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15706,"byte_end":15773,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks wheter a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15774,"byte_end":15847,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15848,"byte_end":15924,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":15925,"byte_end":16004,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16005,"byte_end":16082,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16083,"byte_end":16103,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16104,"byte_end":16107,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16108,"byte_end":16188,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16189,"byte_end":16266,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16267,"byte_end":16345,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16346,"byte_end":16422,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16423,"byte_end":16498,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16499,"byte_end":16515,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16516,"byte_end":16519,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16520,"byte_end":16532,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16533,"byte_end":16536,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16537,"byte_end":16610,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16611,"byte_end":16686,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16687,"byte_end":16764,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16765,"byte_end":16837,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16838,"byte_end":16866,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16867,"byte_end":16870,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16871,"byte_end":16884,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16885,"byte_end":16888,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16889,"byte_end":16957,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16958,"byte_end":16961,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16962,"byte_end":16973,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":16974,"byte_end":17022,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17023,"byte_end":17026,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17027,"byte_end":17043,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17044,"byte_end":17070,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17071,"byte_end":17088,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17089,"byte_end":17110,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17111,"byte_end":17132,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17133,"byte_end":17154,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17155,"byte_end":17160,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17161,"byte_end":17164,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17165,"byte_end":17211,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17212,"byte_end":17236,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17237,"byte_end":17240,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17241,"byte_end":17294,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17295,"byte_end":17320,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17321,"byte_end":17355,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17356,"byte_end":17383,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17384,"byte_end":17397,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17398,"byte_end":17407,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17408,"byte_end":17413,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17414,"byte_end":17417,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17418,"byte_end":17506,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17507,"byte_end":17590,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17591,"byte_end":17679,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17680,"byte_end":17718,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17719,"byte_end":17726,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17727,"byte_end":17730,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17731,"byte_end":17790,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17791,"byte_end":17794,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17795,"byte_end":17806,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17807,"byte_end":17857,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17858,"byte_end":17876,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17877,"byte_end":17927,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17928,"byte_end":17947,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17948,"byte_end":17971,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17972,"byte_end":17995,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":17996,"byte_end":18019,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18020,"byte_end":18027,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18028,"byte_end":18068,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18069,"byte_end":18117,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18118,"byte_end":18144,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18145,"byte_end":18200,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18201,"byte_end":18228,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18229,"byte_end":18265,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18266,"byte_end":18295,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18296,"byte_end":18311,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18312,"byte_end":18323,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18324,"byte_end":18331,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18332,"byte_end":18375,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18376,"byte_end":18402,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18403,"byte_end":18406,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18407,"byte_end":18439,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18440,"byte_end":18498,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18499,"byte_end":18545,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18546,"byte_end":18549,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18550,"byte_end":18587,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18588,"byte_end":18622,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18623,"byte_end":18681,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18682,"byte_end":18711,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18712,"byte_end":18715,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18716,"byte_end":18800,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18801,"byte_end":18843,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18844,"byte_end":18870,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18871,"byte_end":18876,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18877,"byte_end":18945,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":18946,"byte_end":18999,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19000,"byte_end":19038,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19039,"byte_end":19044,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19045,"byte_end":19074,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19075,"byte_end":19082,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19083,"byte_end":19086,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19087,"byte_end":19099,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19100,"byte_end":19103,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19104,"byte_end":19179,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19180,"byte_end":19238,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19239,"byte_end":19268,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19269,"byte_end":19348,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19349,"byte_end":19427,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19428,"byte_end":19506,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19507,"byte_end":19531,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19532,"byte_end":19610,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19611,"byte_end":19672,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19673,"byte_end":19726,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19727,"byte_end":19730,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19731,"byte_end":19800,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19801,"byte_end":19824,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20122,"byte_end":20126,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19870,"byte_end":19943,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19946,"byte_end":20004,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20007,"byte_end":20036,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20039,"byte_end":20042,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20045,"byte_end":20114,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20248,"byte_end":20268,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20146,"byte_end":20224,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20227,"byte_end":20242,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20399,"byte_end":20419,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&T) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20376,"byte_end":20393,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20535,"byte_end":20555,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20520,"byte_end":20529,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20711,"byte_end":20731,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20696,"byte_end":20705,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":511},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22318,"byte_end":22330,"line_start":216,"line_end":216,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22235,"byte_end":22283,"line_start":213,"line_end":213,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22286,"byte_end":22289,"line_start":214,"line_end":214,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22292,"byte_end":22315,"line_start":215,"line_end":215,"column_start":3,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22331,"byte_end":22350,"line_start":216,"line_end":216,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22637,"byte_end":22654,"line_start":223,"line_end":223,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22355,"byte_end":22428,"line_start":217,"line_end":217,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22431,"byte_end":22502,"line_start":218,"line_end":218,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22505,"byte_end":22573,"line_start":219,"line_end":219,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22576,"byte_end":22602,"line_start":220,"line_end":220,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22605,"byte_end":22608,"line_start":221,"line_end":221,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22611,"byte_end":22634,"line_start":222,"line_end":222,"column_start":3,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":510},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22214,"byte_end":22230,"line_start":212,"line_end":212,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":514}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22062,"byte_end":22142,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22143,"byte_end":22153,"line_start":210,"line_end":210,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22746,"byte_end":22749,"line_start":228,"line_end":228,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10138},"children":[],"decl_id":{"krate":1,"index":10139},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22988,"byte_end":22992,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23341,"byte_end":23355,"line_start":249,"line_end":249,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23088,"byte_end":23122,"line_start":241,"line_end":241,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23123,"byte_end":23126,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23127,"byte_end":23141,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23142,"byte_end":23145,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23146,"byte_end":23195,"line_start":245,"line_end":245,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23196,"byte_end":23264,"line_start":246,"line_end":246,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23265,"byte_end":23323,"line_start":247,"line_end":247,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23324,"byte_end":23333,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23944,"byte_end":23962,"line_start":269,"line_end":269,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, CheckedCastError> where\nT: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23683,"byte_end":23725,"line_start":261,"line_end":261,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23726,"byte_end":23729,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23730,"byte_end":23744,"line_start":263,"line_end":263,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23745,"byte_end":23748,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23749,"byte_end":23798,"line_start":265,"line_end":265,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23799,"byte_end":23867,"line_start":266,"line_end":266,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23868,"byte_end":23926,"line_start":267,"line_end":267,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":23927,"byte_end":23936,"line_start":268,"line_end":268,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24518,"byte_end":24540,"line_start":287,"line_end":287,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24313,"byte_end":24360,"line_start":281,"line_end":281,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24361,"byte_end":24364,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24365,"byte_end":24379,"line_start":283,"line_end":283,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24380,"byte_end":24441,"line_start":284,"line_end":284,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24442,"byte_end":24500,"line_start":285,"line_end":285,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24501,"byte_end":24510,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25291,"byte_end":25299,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24839,"byte_end":24868,"line_start":299,"line_end":299,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24869,"byte_end":24872,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24873,"byte_end":24950,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":24951,"byte_end":25030,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25031,"byte_end":25109,"line_start":303,"line_end":303,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25110,"byte_end":25129,"line_start":304,"line_end":304,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25130,"byte_end":25133,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25134,"byte_end":25148,"line_start":306,"line_end":306,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25149,"byte_end":25152,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25153,"byte_end":25208,"line_start":308,"line_end":308,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25209,"byte_end":25273,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25274,"byte_end":25283,"line_start":310,"line_end":310,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25843,"byte_end":25855,"line_start":331,"line_end":331,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25585,"byte_end":25621,"line_start":323,"line_end":323,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25622,"byte_end":25625,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25626,"byte_end":25640,"line_start":325,"line_end":325,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25641,"byte_end":25644,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25645,"byte_end":25697,"line_start":327,"line_end":327,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25698,"byte_end":25760,"line_start":328,"line_end":328,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25761,"byte_end":25825,"line_start":329,"line_end":329,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":25826,"byte_end":25835,"line_start":330,"line_end":330,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26293,"byte_end":26305,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, CheckedCastError> where\nA: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26191,"byte_end":26235,"line_start":343,"line_end":343,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26236,"byte_end":26239,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26240,"byte_end":26275,"line_start":345,"line_end":345,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26276,"byte_end":26285,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27548,"byte_end":27562,"line_start":380,"line_end":380,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26683,"byte_end":26756,"line_start":362,"line_end":362,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26757,"byte_end":26760,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26761,"byte_end":26820,"line_start":364,"line_end":364,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26821,"byte_end":26890,"line_start":365,"line_end":365,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26891,"byte_end":26894,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26895,"byte_end":26909,"line_start":367,"line_end":367,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26910,"byte_end":26913,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26914,"byte_end":26994,"line_start":369,"line_end":369,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":26995,"byte_end":27015,"line_start":370,"line_end":370,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27016,"byte_end":27093,"line_start":371,"line_end":371,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27094,"byte_end":27170,"line_start":372,"line_end":372,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27171,"byte_end":27251,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27252,"byte_end":27276,"line_start":374,"line_end":374,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27277,"byte_end":27402,"line_start":375,"line_end":375,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27403,"byte_end":27423,"line_start":376,"line_end":376,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27424,"byte_end":27504,"line_start":377,"line_end":377,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27505,"byte_end":27530,"line_start":378,"line_end":378,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27531,"byte_end":27540,"line_start":379,"line_end":379,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28086,"byte_end":28104,"line_start":399,"line_end":399,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], CheckedCastError>\nwhere A: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":27940,"byte_end":28012,"line_start":394,"line_end":394,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28013,"byte_end":28025,"line_start":395,"line_end":395,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28026,"byte_end":28029,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28030,"byte_end":28068,"line_start":397,"line_end":397,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28069,"byte_end":28078,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28664,"byte_end":28674,"line_start":422,"line_end":422,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28534,"byte_end":28568,"line_start":416,"line_end":416,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28569,"byte_end":28572,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28573,"byte_end":28586,"line_start":418,"line_end":418,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28587,"byte_end":28590,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28591,"byte_end":28646,"line_start":420,"line_end":420,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28647,"byte_end":28656,"line_start":421,"line_end":421,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28961,"byte_end":28975,"line_start":435,"line_end":435,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28819,"byte_end":28861,"line_start":429,"line_end":429,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28862,"byte_end":28865,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28866,"byte_end":28879,"line_start":431,"line_end":431,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28880,"byte_end":28883,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28884,"byte_end":28943,"line_start":433,"line_end":433,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":28944,"byte_end":28953,"line_start":434,"line_end":434,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29291,"byte_end":29309,"line_start":447,"line_end":447,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29147,"byte_end":29184,"line_start":442,"line_end":442,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29185,"byte_end":29188,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29189,"byte_end":29202,"line_start":444,"line_end":444,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29203,"byte_end":29273,"line_start":445,"line_end":445,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29274,"byte_end":29283,"line_start":446,"line_end":446,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29616,"byte_end":29620,"line_start":460,"line_end":460,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29477,"byte_end":29498,"line_start":454,"line_end":454,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29499,"byte_end":29502,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29503,"byte_end":29516,"line_start":456,"line_end":456,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29517,"byte_end":29520,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29521,"byte_end":29598,"line_start":458,"line_end":458,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29599,"byte_end":29608,"line_start":459,"line_end":459,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29887,"byte_end":29895,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29761,"byte_end":29793,"line_start":467,"line_end":467,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29794,"byte_end":29797,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29798,"byte_end":29811,"line_start":469,"line_end":469,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29812,"byte_end":29815,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29816,"byte_end":29869,"line_start":471,"line_end":471,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":29870,"byte_end":29879,"line_start":472,"line_end":472,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":95},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30211,"byte_end":30219,"line_start":491,"line_end":491,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30093,"byte_end":30117,"line_start":485,"line_end":485,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30118,"byte_end":30121,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30122,"byte_end":30135,"line_start":487,"line_end":487,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30136,"byte_end":30139,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30140,"byte_end":30193,"line_start":489,"line_end":489,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30194,"byte_end":30203,"line_start":490,"line_end":490,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30494,"byte_end":30504,"line_start":504,"line_end":504,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30370,"byte_end":30398,"line_start":498,"line_end":498,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30399,"byte_end":30402,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30403,"byte_end":30416,"line_start":500,"line_end":500,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30417,"byte_end":30420,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30421,"byte_end":30476,"line_start":502,"line_end":502,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30477,"byte_end":30486,"line_start":503,"line_end":503,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30799,"byte_end":30813,"line_start":517,"line_end":517,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30663,"byte_end":30699,"line_start":511,"line_end":511,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30700,"byte_end":30703,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30704,"byte_end":30717,"line_start":513,"line_end":513,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30718,"byte_end":30721,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30722,"byte_end":30781,"line_start":515,"line_end":515,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":30782,"byte_end":30791,"line_start":516,"line_end":516,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":164},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44647,"byte_end":44655,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":165}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43751,"byte_end":43802,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43803,"byte_end":43837,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43838,"byte_end":43841,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43842,"byte_end":43905,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43906,"byte_end":43962,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43963,"byte_end":43966,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43967,"byte_end":43980,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43981,"byte_end":43984,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":43985,"byte_end":44026,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44027,"byte_end":44074,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44075,"byte_end":44148,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44149,"byte_end":44191,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44192,"byte_end":44195,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44196,"byte_end":44211,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44212,"byte_end":44215,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some `impl`s are feature gated due to the MSRV policy:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44216,"byte_end":44274,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44275,"byte_end":44278,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * `MaybeUninit<T>` was not available in 1.34.0, but is available under the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44279,"byte_end":44357,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/   `zeroable_maybe_uninit` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44358,"byte_end":44401,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ * `Atomic*` types require Rust 1.60.0 or later to work on certain platforms, but is available","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44402,"byte_end":44499,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/   under the `zeroable_atomics` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44500,"byte_end":44548,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ * `[T; N]` for arbitrary `N` requires the `min_const_generics` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44549,"byte_end":44629,"line_start":24,"line_end":24,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44935,"byte_end":44941,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44667,"byte_end":44707,"line_start":26,"line_end":26,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44710,"byte_end":44713,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44716,"byte_end":44791,"line_start":28,"line_end":28,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44794,"byte_end":44872,"line_start":29,"line_end":29,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44875,"byte_end":44917,"line_start":30,"line_end":30,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44920,"byte_end":44929,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":255},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52450,"byte_end":52466,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52220,"byte_end":52286,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52287,"byte_end":52322,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52323,"byte_end":52326,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52327,"byte_end":52340,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52341,"byte_end":52344,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52345,"byte_end":52404,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52405,"byte_end":52432,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":277},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55339,"byte_end":55342,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53445,"byte_end":53483,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53484,"byte_end":53487,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53488,"byte_end":53565,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53566,"byte_end":53645,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53646,"byte_end":53726,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53727,"byte_end":53745,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53746,"byte_end":53749,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53750,"byte_end":53826,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53827,"byte_end":53898,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53899,"byte_end":53973,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53974,"byte_end":53992,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53993,"byte_end":53996,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":53997,"byte_end":54010,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54011,"byte_end":54014,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54015,"byte_end":54055,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54056,"byte_end":54103,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54104,"byte_end":54182,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54183,"byte_end":54211,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54212,"byte_end":54288,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54289,"byte_end":54367,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54368,"byte_end":54448,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54449,"byte_end":54479,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54480,"byte_end":54534,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54535,"byte_end":54610,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54611,"byte_end":54690,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54691,"byte_end":54735,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54736,"byte_end":54816,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54817,"byte_end":54875,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54876,"byte_end":54950,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":54951,"byte_end":55028,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55029,"byte_end":55109,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55110,"byte_end":55190,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55191,"byte_end":55270,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55271,"byte_end":55321,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59986,"byte_end":59997,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59660,"byte_end":59716,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59717,"byte_end":59752,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59753,"byte_end":59756,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59757,"byte_end":59770,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59771,"byte_end":59774,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59775,"byte_end":59839,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59840,"byte_end":59918,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59919,"byte_end":59968,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63846,"byte_end":63854,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":60762,"byte_end":60840,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":60841,"byte_end":60844,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":60845,"byte_end":60902,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":60903,"byte_end":60982,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":60983,"byte_end":61057,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61058,"byte_end":61137,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61138,"byte_end":61218,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61219,"byte_end":61299,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61300,"byte_end":61377,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61378,"byte_end":61393,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61394,"byte_end":61397,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61398,"byte_end":61472,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61473,"byte_end":61552,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61553,"byte_end":61633,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61634,"byte_end":61702,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61703,"byte_end":61755,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61756,"byte_end":61759,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61760,"byte_end":61772,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61773,"byte_end":61776,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61777,"byte_end":61854,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61855,"byte_end":61927,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":61928,"byte_end":61999,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62000,"byte_end":62080,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62081,"byte_end":62159,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62160,"byte_end":62183,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62184,"byte_end":62187,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62188,"byte_end":62200,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62201,"byte_end":62204,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62205,"byte_end":62271,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62272,"byte_end":62326,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62327,"byte_end":62402,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62403,"byte_end":62467,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62468,"byte_end":62471,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62472,"byte_end":62512,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62513,"byte_end":62560,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62561,"byte_end":62637,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62638,"byte_end":62716,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62717,"byte_end":62797,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62798,"byte_end":62828,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62829,"byte_end":62886,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62887,"byte_end":62960,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":62961,"byte_end":63040,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63041,"byte_end":63085,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63086,"byte_end":63137,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63138,"byte_end":63183,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63184,"byte_end":63264,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63265,"byte_end":63323,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63324,"byte_end":63398,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63399,"byte_end":63476,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63477,"byte_end":63557,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63558,"byte_end":63638,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63639,"byte_end":63718,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63719,"byte_end":63769,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63770,"byte_end":63828,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67526,"byte_end":67536,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64558,"byte_end":64586,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64587,"byte_end":64590,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64591,"byte_end":64666,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64667,"byte_end":64733,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64734,"byte_end":64778,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64779,"byte_end":64782,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64783,"byte_end":64862,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64863,"byte_end":64943,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":64944,"byte_end":65006,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65007,"byte_end":65010,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65011,"byte_end":65089,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65090,"byte_end":65165,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65166,"byte_end":65194,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65195,"byte_end":65198,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65199,"byte_end":65212,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65213,"byte_end":65216,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65217,"byte_end":65224,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65225,"byte_end":65256,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65257,"byte_end":65272,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65273,"byte_end":65317,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65318,"byte_end":65332,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65333,"byte_end":65345,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65346,"byte_end":65358,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65359,"byte_end":65371,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65372,"byte_end":65384,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65385,"byte_end":65397,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65398,"byte_end":65403,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65404,"byte_end":65440,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65441,"byte_end":65461,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65462,"byte_end":65503,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65504,"byte_end":65545,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65546,"byte_end":65551,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65552,"byte_end":65606,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65607,"byte_end":65650,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65651,"byte_end":65692,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65693,"byte_end":65700,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65701,"byte_end":65713,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65714,"byte_end":65717,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65718,"byte_end":65791,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65792,"byte_end":65805,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65806,"byte_end":65809,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65810,"byte_end":65887,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65888,"byte_end":65967,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":65968,"byte_end":66022,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66023,"byte_end":66026,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66027,"byte_end":66107,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66108,"byte_end":66130,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66131,"byte_end":66134,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66135,"byte_end":66215,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66216,"byte_end":66272,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66273,"byte_end":66276,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66277,"byte_end":66352,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66353,"byte_end":66425,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66426,"byte_end":66495,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66496,"byte_end":66499,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66500,"byte_end":66578,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66579,"byte_end":66655,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66656,"byte_end":66667,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66668,"byte_end":66671,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66672,"byte_end":66744,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66745,"byte_end":66823,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66824,"byte_end":66900,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66901,"byte_end":66980,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66981,"byte_end":66984,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":66985,"byte_end":67057,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67058,"byte_end":67123,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67124,"byte_end":67127,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67128,"byte_end":67205,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67206,"byte_end":67228,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67229,"byte_end":67232,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67233,"byte_end":67312,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67313,"byte_end":67346,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67347,"byte_end":67350,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67351,"byte_end":67428,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67429,"byte_end":67508,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":381},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68361,"byte_end":68364,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67557,"byte_end":67628,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67631,"byte_end":67640,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67643,"byte_end":67646,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67649,"byte_end":67721,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67724,"byte_end":67790,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67793,"byte_end":67861,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67864,"byte_end":67906,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67909,"byte_end":67912,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67915,"byte_end":67992,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67995,"byte_end":68017,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68020,"byte_end":68023,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68026,"byte_end":68095,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68098,"byte_end":68174,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68177,"byte_end":68246,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68249,"byte_end":68287,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68290,"byte_end":68293,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68296,"byte_end":68353,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":382},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68455,"byte_end":68464,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68381,"byte_end":68446,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":383},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68554,"byte_end":68563,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68480,"byte_end":68545,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69228,"byte_end":69240,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68579,"byte_end":68647,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68650,"byte_end":68713,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68716,"byte_end":68719,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68722,"byte_end":68796,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68799,"byte_end":68866,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68869,"byte_end":68937,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68940,"byte_end":68943,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68946,"byte_end":68958,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68961,"byte_end":68964,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":68967,"byte_end":69040,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69043,"byte_end":69089,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69092,"byte_end":69095,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69098,"byte_end":69172,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69175,"byte_end":69210,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":69213,"byte_end":69222,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70763,"byte_end":70775,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70079,"byte_end":70154,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70157,"byte_end":70233,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70236,"byte_end":70248,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70251,"byte_end":70254,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70257,"byte_end":70331,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70334,"byte_end":70401,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70404,"byte_end":70472,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70475,"byte_end":70478,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70481,"byte_end":70493,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70496,"byte_end":70499,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70502,"byte_end":70575,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70578,"byte_end":70624,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70627,"byte_end":70630,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70633,"byte_end":70707,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70710,"byte_end":70745,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":70748,"byte_end":70757,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":393},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80909,"byte_end":80927,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":77820,"byte_end":77895,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":77896,"byte_end":77925,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":77926,"byte_end":77929,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":77930,"byte_end":78002,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78003,"byte_end":78081,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78082,"byte_end":78160,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78161,"byte_end":78237,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78238,"byte_end":78314,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78315,"byte_end":78363,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78364,"byte_end":78367,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78368,"byte_end":78380,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78381,"byte_end":78384,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78385,"byte_end":78454,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78455,"byte_end":78458,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78459,"byte_end":78530,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78531,"byte_end":78534,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78535,"byte_end":78607,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78608,"byte_end":78670,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78671,"byte_end":78750,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78751,"byte_end":78830,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78831,"byte_end":78861,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78862,"byte_end":78865,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78866,"byte_end":78946,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":78947,"byte_end":79008,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79009,"byte_end":79012,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79013,"byte_end":79087,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79088,"byte_end":79103,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79104,"byte_end":79182,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79183,"byte_end":79261,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79262,"byte_end":79265,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79266,"byte_end":79337,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79338,"byte_end":79341,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79342,"byte_end":79356,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79357,"byte_end":79360,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79361,"byte_end":79440,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79441,"byte_end":79520,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79521,"byte_end":79596,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79597,"byte_end":79666,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79667,"byte_end":79704,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79705,"byte_end":79708,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79709,"byte_end":79787,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79788,"byte_end":79856,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79857,"byte_end":79860,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79861,"byte_end":79875,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79876,"byte_end":79879,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79880,"byte_end":79892,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79893,"byte_end":79896,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79897,"byte_end":79904,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79905,"byte_end":79942,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79943,"byte_end":79967,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79968,"byte_end":79997,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":79998,"byte_end":80001,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80002,"byte_end":80026,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80027,"byte_end":80060,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80061,"byte_end":80064,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80065,"byte_end":80128,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80129,"byte_end":80132,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80133,"byte_end":80192,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80193,"byte_end":80231,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80232,"byte_end":80292,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80293,"byte_end":80296,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80297,"byte_end":80324,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80325,"byte_end":80371,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80372,"byte_end":80444,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80445,"byte_end":80448,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80449,"byte_end":80506,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80507,"byte_end":80514,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80515,"byte_end":80518,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80519,"byte_end":80558,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80559,"byte_end":80562,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80563,"byte_end":80570,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80571,"byte_end":80608,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80609,"byte_end":80612,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80613,"byte_end":80637,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80638,"byte_end":80663,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80664,"byte_end":80667,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80668,"byte_end":80726,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80727,"byte_end":80730,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80731,"byte_end":80774,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80775,"byte_end":80808,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80809,"byte_end":80812,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80813,"byte_end":80843,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80844,"byte_end":80883,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80884,"byte_end":80891,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81014,"byte_end":81018,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80947,"byte_end":80996,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":80999,"byte_end":81008,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81330,"byte_end":81338,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81227,"byte_end":81300,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81303,"byte_end":81312,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81315,"byte_end":81324,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":82028,"byte_end":82036,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81909,"byte_end":81986,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":81989,"byte_end":82010,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":82013,"byte_end":82022,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":82700,"byte_end":82710,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":82611,"byte_end":82682,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":82685,"byte_end":82694,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83254,"byte_end":83268,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83143,"byte_end":83216,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83219,"byte_end":83236,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83239,"byte_end":83248,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83774,"byte_end":83778,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83707,"byte_end":83756,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83759,"byte_end":83768,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83983,"byte_end":83991,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83880,"byte_end":83953,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83956,"byte_end":83965,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":83968,"byte_end":83977,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":84681,"byte_end":84689,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":84562,"byte_end":84638,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":84641,"byte_end":84663,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":84666,"byte_end":84675,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85353,"byte_end":85363,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85264,"byte_end":85335,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85338,"byte_end":85347,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85908,"byte_end":85922,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85797,"byte_end":85872,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85875,"byte_end":85890,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":85893,"byte_end":85902,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":860},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4346,"byte_end":4386,"line_start":138,"line_end":138,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4223,"byte_end":4295,"line_start":136,"line_end":136,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4298,"byte_end":4343,"line_start":137,"line_end":137,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":862},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4572,"byte_end":4596,"line_start":142,"line_end":142,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4390,"byte_end":4458,"line_start":139,"line_end":139,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4461,"byte_end":4536,"line_start":140,"line_end":140,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4539,"byte_end":4569,"line_start":141,"line_end":141,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":864},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4817,"byte_end":4829,"line_start":146,"line_end":146,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4600,"byte_end":4675,"line_start":143,"line_end":143,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4678,"byte_end":4751,"line_start":144,"line_end":144,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4754,"byte_end":4814,"line_start":145,"line_end":145,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":866},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5120,"byte_end":5137,"line_start":153,"line_end":153,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4833,"byte_end":4907,"line_start":147,"line_end":147,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4910,"byte_end":4941,"line_start":148,"line_end":148,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4944,"byte_end":4947,"line_start":149,"line_end":149,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4950,"byte_end":5026,"line_start":150,"line_end":150,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5029,"byte_end":5104,"line_start":151,"line_end":151,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5107,"byte_end":5117,"line_start":152,"line_end":152,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":859},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4206,"byte_end":4218,"line_start":135,"line_end":135,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4072,"byte_end":4145,"line_start":133,"line_end":133,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5224,"byte_end":5227,"line_start":157,"line_end":157,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10138},"children":[],"decl_id":{"krate":1,"index":10139},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5612,"byte_end":5620,"line_start":169,"line_end":169,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T>(&T) -> &[u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5403,"byte_end":5437,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5438,"byte_end":5441,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5442,"byte_end":5520,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5521,"byte_end":5594,"line_start":167,"line_end":167,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5595,"byte_end":5604,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5907,"byte_end":5919,"line_start":178,"line_end":178,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T>(&mut T) -> &mut [u8] where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5690,"byte_end":5732,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5733,"byte_end":5736,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5737,"byte_end":5815,"line_start":175,"line_end":175,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5816,"byte_end":5889,"line_start":176,"line_end":176,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5890,"byte_end":5899,"line_start":177,"line_end":177,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6147,"byte_end":6157,"line_start":188,"line_end":188,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6017,"byte_end":6051,"line_start":182,"line_end":182,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6052,"byte_end":6055,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6056,"byte_end":6069,"line_start":184,"line_end":184,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6070,"byte_end":6073,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6074,"byte_end":6129,"line_start":186,"line_end":186,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6130,"byte_end":6139,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":416},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6376,"byte_end":6390,"line_start":198,"line_end":198,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6234,"byte_end":6276,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6277,"byte_end":6280,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6281,"byte_end":6294,"line_start":194,"line_end":194,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6295,"byte_end":6298,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6299,"byte_end":6358,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6359,"byte_end":6368,"line_start":197,"line_end":197,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6636,"byte_end":6658,"line_start":207,"line_end":207,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6490,"byte_end":6537,"line_start":202,"line_end":202,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6538,"byte_end":6541,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6542,"byte_end":6556,"line_start":204,"line_end":204,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6557,"byte_end":6618,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6619,"byte_end":6628,"line_start":206,"line_end":206,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6925,"byte_end":6943,"line_start":218,"line_end":218,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6781,"byte_end":6818,"line_start":213,"line_end":213,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6819,"byte_end":6822,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6823,"byte_end":6836,"line_start":215,"line_end":215,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6837,"byte_end":6907,"line_start":216,"line_end":216,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6908,"byte_end":6917,"line_start":217,"line_end":217,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7229,"byte_end":7243,"line_start":229,"line_end":229,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, PodCastError> where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7035,"byte_end":7069,"line_start":222,"line_end":222,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7070,"byte_end":7073,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7074,"byte_end":7088,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7089,"byte_end":7092,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7093,"byte_end":7142,"line_start":226,"line_end":226,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7143,"byte_end":7211,"line_start":227,"line_end":227,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7212,"byte_end":7221,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":424},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7548,"byte_end":7566,"line_start":240,"line_end":240,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, PodCastError> where\nT: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7346,"byte_end":7388,"line_start":233,"line_end":233,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7389,"byte_end":7392,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7393,"byte_end":7407,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7408,"byte_end":7411,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7412,"byte_end":7461,"line_start":237,"line_end":237,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7462,"byte_end":7530,"line_start":238,"line_end":238,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7531,"byte_end":7540,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7836,"byte_end":7840,"line_start":252,"line_end":252,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7697,"byte_end":7718,"line_start":246,"line_end":246,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7719,"byte_end":7722,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7723,"byte_end":7736,"line_start":248,"line_end":248,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7737,"byte_end":7740,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7741,"byte_end":7818,"line_start":250,"line_end":250,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7819,"byte_end":7828,"line_start":251,"line_end":251,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8045,"byte_end":8053,"line_start":262,"line_end":262,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7919,"byte_end":7951,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7952,"byte_end":7955,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7956,"byte_end":7969,"line_start":258,"line_end":258,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7970,"byte_end":7973,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7974,"byte_end":8027,"line_start":260,"line_end":260,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8028,"byte_end":8037,"line_start":261,"line_end":261,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8296,"byte_end":8304,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8178,"byte_end":8202,"line_start":268,"line_end":268,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8203,"byte_end":8206,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8207,"byte_end":8220,"line_start":270,"line_end":270,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8221,"byte_end":8224,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8225,"byte_end":8278,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8279,"byte_end":8288,"line_start":273,"line_end":273,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8513,"byte_end":8523,"line_start":284,"line_end":284,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8389,"byte_end":8417,"line_start":278,"line_end":278,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8418,"byte_end":8421,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8422,"byte_end":8435,"line_start":280,"line_end":280,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8436,"byte_end":8439,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8440,"byte_end":8495,"line_start":282,"line_end":282,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8496,"byte_end":8505,"line_start":283,"line_end":283,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8750,"byte_end":8764,"line_start":294,"line_end":294,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8614,"byte_end":8650,"line_start":288,"line_end":288,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8651,"byte_end":8654,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8655,"byte_end":8668,"line_start":290,"line_end":290,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8669,"byte_end":8672,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8673,"byte_end":8732,"line_start":292,"line_end":292,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8733,"byte_end":8742,"line_start":293,"line_end":293,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8981,"byte_end":8993,"line_start":305,"line_end":305,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U>(&[T]) -> (&[T], &[U], &[T]) where T: NoUninit,\nU: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8906,"byte_end":8963,"line_start":303,"line_end":303,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8964,"byte_end":8973,"line_start":304,"line_end":304,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9182,"byte_end":9198,"line_start":313,"line_end":313,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U>(&mut [T]) -> (&mut [T], &mut [U], &mut [T]) where\nT: NoUninit + AnyBitPattern, U: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9103,"byte_end":9164,"line_start":311,"line_end":311,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9165,"byte_end":9174,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9749,"byte_end":9757,"line_start":333,"line_end":333,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9362,"byte_end":9391,"line_start":322,"line_end":322,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9392,"byte_end":9395,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9396,"byte_end":9473,"line_start":324,"line_end":324,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9474,"byte_end":9553,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9554,"byte_end":9632,"line_start":326,"line_end":326,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9633,"byte_end":9652,"line_start":327,"line_end":327,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9653,"byte_end":9656,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9657,"byte_end":9671,"line_start":329,"line_end":329,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9672,"byte_end":9675,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9676,"byte_end":9731,"line_start":331,"line_end":331,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9732,"byte_end":9741,"line_start":332,"line_end":332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10060,"byte_end":10072,"line_start":346,"line_end":346,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9867,"byte_end":9903,"line_start":339,"line_end":339,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9904,"byte_end":9907,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9908,"byte_end":9922,"line_start":341,"line_end":341,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9923,"byte_end":9926,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9927,"byte_end":9979,"line_start":343,"line_end":343,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9980,"byte_end":10042,"line_start":344,"line_end":344,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10043,"byte_end":10052,"line_start":345,"line_end":345,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10290,"byte_end":10302,"line_start":356,"line_end":356,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10188,"byte_end":10232,"line_start":352,"line_end":352,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10233,"byte_end":10236,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10237,"byte_end":10272,"line_start":354,"line_end":354,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10273,"byte_end":10282,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11218,"byte_end":11232,"line_start":381,"line_end":381,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10460,"byte_end":10533,"line_start":365,"line_end":365,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10534,"byte_end":10537,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10538,"byte_end":10597,"line_start":367,"line_end":367,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10598,"byte_end":10667,"line_start":368,"line_end":368,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10668,"byte_end":10671,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10672,"byte_end":10686,"line_start":370,"line_end":370,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10687,"byte_end":10690,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10691,"byte_end":10771,"line_start":372,"line_end":372,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10772,"byte_end":10792,"line_start":373,"line_end":373,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10793,"byte_end":10870,"line_start":374,"line_end":374,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10871,"byte_end":10947,"line_start":375,"line_end":375,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10948,"byte_end":11028,"line_start":376,"line_end":376,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11029,"byte_end":11053,"line_start":377,"line_end":377,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11054,"byte_end":11179,"line_start":378,"line_end":378,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11180,"byte_end":11200,"line_start":379,"line_end":379,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11201,"byte_end":11210,"line_start":380,"line_end":380,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":459},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11500,"byte_end":11518,"line_start":392,"line_end":392,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11354,"byte_end":11426,"line_start":387,"line_end":387,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11427,"byte_end":11439,"line_start":388,"line_end":388,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11440,"byte_end":11443,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11444,"byte_end":11482,"line_start":390,"line_end":390,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11483,"byte_end":11492,"line_start":391,"line_end":391,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14807,"byte_end":14808,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20352,"byte_end":20353,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22722,"byte_end":22738,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22964,"byte_end":22980,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":45582,"byte_end":45590,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":45646,"byte_end":45653,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46178,"byte_end":46189,"line_start":67,"line_end":67,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46221,"byte_end":46234,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46276,"byte_end":46288,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46345,"byte_end":46355,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46412,"byte_end":46416,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52206,"byte_end":52212,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52511,"byte_end":52520,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52557,"byte_end":52567,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52604,"byte_end":52614,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52651,"byte_end":52661,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52698,"byte_end":52709,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52746,"byte_end":52758,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52795,"byte_end":52804,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52841,"byte_end":52851,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52888,"byte_end":52898,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52935,"byte_end":52945,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52982,"byte_end":52993,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":53030,"byte_end":53042,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":53163,"byte_end":53170,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55810,"byte_end":55818,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56118,"byte_end":56129,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56156,"byte_end":56169,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56201,"byte_end":56213,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59646,"byte_end":59652,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60065,"byte_end":60074,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60106,"byte_end":60116,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60148,"byte_end":60158,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60190,"byte_end":60200,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60232,"byte_end":60243,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60275,"byte_end":60287,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60319,"byte_end":60328,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60360,"byte_end":60370,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60402,"byte_end":60412,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60444,"byte_end":60454,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60486,"byte_end":60497,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60529,"byte_end":60541,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63916,"byte_end":63917,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64015,"byte_end":64024,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64053,"byte_end":64062,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64091,"byte_end":64101,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64130,"byte_end":64140,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64169,"byte_end":64179,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64208,"byte_end":64218,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64247,"byte_end":64257,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64286,"byte_end":64296,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64325,"byte_end":64336,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64365,"byte_end":64376,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64405,"byte_end":64417,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64446,"byte_end":64458,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":86414,"byte_end":86422,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5204,"byte_end":5216,"line_start":156,"line_end":156,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3520,"byte_end":3527,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":27}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14730,"byte_end":14738,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":164},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14741,"byte_end":14746,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14749,"byte_end":14753,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":14807,"byte_end":14808,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":19861,"byte_end":19865,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":42}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":20352,"byte_end":20353,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":46},"to":{"krate":0,"index":42}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22722,"byte_end":22738,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":510},"to":{"krate":1,"index":10138}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":22964,"byte_end":22980,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":510},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":44657,"byte_end":44662,"line_start":25,"line_end":25,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":45582,"byte_end":45590,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":45646,"byte_end":45653,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":30766},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46178,"byte_end":46189,"line_start":67,"line_end":67,"column_start":39,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46221,"byte_end":46234,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":31986},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46276,"byte_end":46288,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":25433},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46345,"byte_end":46355,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":5091},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":46412,"byte_end":46416,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":4871},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52206,"byte_end":52212,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":40600},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52468,"byte_end":52473,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52511,"byte_end":52520,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52557,"byte_end":52567,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52604,"byte_end":52614,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52651,"byte_end":52661,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52698,"byte_end":52709,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52746,"byte_end":52758,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":47}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52795,"byte_end":52804,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52841,"byte_end":52851,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52888,"byte_end":52898,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52935,"byte_end":52945,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":52982,"byte_end":52993,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":53030,"byte_end":53042,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":53163,"byte_end":53170,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":2320},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55344,"byte_end":55352,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":164},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55355,"byte_end":55359,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":55810,"byte_end":55818,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56118,"byte_end":56129,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56156,"byte_end":56169,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":31986},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":56201,"byte_end":56213,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":25433},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59646,"byte_end":59652,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":40600},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":59999,"byte_end":60015,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":255},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60018,"byte_end":60022,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60065,"byte_end":60074,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60106,"byte_end":60116,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60148,"byte_end":60158,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60190,"byte_end":60200,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60232,"byte_end":60243,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60275,"byte_end":60287,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60319,"byte_end":60328,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60360,"byte_end":60370,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60402,"byte_end":60412,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60444,"byte_end":60454,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60486,"byte_end":60497,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":60529,"byte_end":60541,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63856,"byte_end":63861,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63864,"byte_end":63868,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":63916,"byte_end":63917,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64015,"byte_end":64024,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64053,"byte_end":64062,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64091,"byte_end":64101,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64130,"byte_end":64140,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64169,"byte_end":64179,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64208,"byte_end":64218,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64247,"byte_end":64257,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64286,"byte_end":64296,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64325,"byte_end":64336,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64365,"byte_end":64376,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64405,"byte_end":64417,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":64446,"byte_end":64458,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":100}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":67538,"byte_end":67542,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":380}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":86414,"byte_end":86422,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":120}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":393}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5204,"byte_end":5216,"line_start":156,"line_end":156,"column_start":29,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":859},"to":{"krate":1,"index":10138}}]}