{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=012bd43b1c8f02f3","-C","extra-filename=-012bd43b1c8f02f3","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps/libbytemuck-012bd43b1c8f02f3.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[14153688532421593244,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":0,"byte_end":11725,"line_start":1,"line_end":400,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":2282,"byte_end":2286,"line_start":59,"line_end":59,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3549,"byte_end":3550,"line_start":99,"line_end":99,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3587,"byte_end":3604,"line_start":102,"line_end":102,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3654,"byte_end":3655,"line_start":107,"line_end":107,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3709,"byte_end":3710,"line_start":109,"line_end":109,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3735,"byte_end":3736,"line_start":112,"line_end":112,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3780,"byte_end":3781,"line_start":114,"line_end":114,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3818,"byte_end":3819,"line_start":117,"line_end":117,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3858,"byte_end":3859,"line_start":120,"line_end":120,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3896,"byte_end":3897,"line_start":123,"line_end":123,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3938,"byte_end":3939,"line_start":126,"line_end":126,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":0,"byte_end":11725,"line_start":1,"line_end":400,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":162},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":407},{"krate":0,"index":859},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":34,"byte_end":77,"line_start":3,"line_end":3,"column_start":1,"column_end":44}},{"value":"allow(clippy :: uninlined_format_args)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":78,"byte_end":118,"line_start":4,"line_end":4,"column_start":1,"column_end":41}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":252,"byte_end":326,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":327,"byte_end":330,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":331,"byte_end":344,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":345,"byte_end":348,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":349,"byte_end":422,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":423,"byte_end":437,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":438,"byte_end":441,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":442,"byte_end":465,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":466,"byte_end":494,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":495,"byte_end":527,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":528,"byte_end":560,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":561,"byte_end":601,"line_start":19,"line_end":19,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":602,"byte_end":605,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":606,"byte_end":681,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":682,"byte_end":761,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":762,"byte_end":842,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":843,"byte_end":922,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":923,"byte_end":941,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":942,"byte_end":945,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":946,"byte_end":973,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":974,"byte_end":977,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":978,"byte_end":1049,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1050,"byte_end":1090,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1091,"byte_end":1094,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1095,"byte_end":1170,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1171,"byte_end":1248,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1249,"byte_end":1326,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1327,"byte_end":1372,"line_start":35,"line_end":35,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1373,"byte_end":1376,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1377,"byte_end":1392,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1393,"byte_end":1396,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1397,"byte_end":1477,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1478,"byte_end":1557,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1558,"byte_end":1637,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":1638,"byte_end":1708,"line_start":42,"line_end":42,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14755,"byte_end":14768,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12156,"byte_end":12235,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12236,"byte_end":12239,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12240,"byte_end":12297,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12298,"byte_end":12359,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12360,"byte_end":12439,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12440,"byte_end":12513,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12514,"byte_end":12589,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12590,"byte_end":12656,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12657,"byte_end":12660,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12661,"byte_end":12740,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12741,"byte_end":12817,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12818,"byte_end":12821,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12822,"byte_end":12893,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12894,"byte_end":12963,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12964,"byte_end":12998,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":12999,"byte_end":13002,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13003,"byte_end":13015,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13016,"byte_end":13019,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13020,"byte_end":13097,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13098,"byte_end":13175,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13176,"byte_end":13247,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13248,"byte_end":13328,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13329,"byte_end":13407,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13408,"byte_end":13431,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13432,"byte_end":13435,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13436,"byte_end":13516,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13517,"byte_end":13597,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13598,"byte_end":13642,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13643,"byte_end":13646,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13647,"byte_end":13659,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13660,"byte_end":13663,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13664,"byte_end":13741,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13742,"byte_end":13820,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13821,"byte_end":13864,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13865,"byte_end":13868,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13869,"byte_end":13909,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13910,"byte_end":13957,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":13958,"byte_end":14029,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14030,"byte_end":14092,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14093,"byte_end":14173,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14174,"byte_end":14232,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14233,"byte_end":14307,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14308,"byte_end":14385,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14386,"byte_end":14466,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14467,"byte_end":14547,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14548,"byte_end":14627,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14628,"byte_end":14678,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14679,"byte_end":14737,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":462},{"krate":0,"index":466},{"krate":0,"index":470},{"krate":0,"index":474},{"krate":0,"index":478},{"krate":0,"index":482},{"krate":0,"index":486},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":502},{"krate":0,"index":506},{"krate":0,"index":510},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15043,"byte_end":15110,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15111,"byte_end":15156,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19885,"byte_end":19902,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15244,"byte_end":15322,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15323,"byte_end":15402,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15403,"byte_end":15483,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15484,"byte_end":15558,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15559,"byte_end":15587,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15588,"byte_end":15591,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15592,"byte_end":15670,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15671,"byte_end":15747,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15748,"byte_end":15815,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks whether a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15816,"byte_end":15890,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15891,"byte_end":15967,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":15968,"byte_end":16047,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16048,"byte_end":16125,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16126,"byte_end":16146,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16147,"byte_end":16150,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16151,"byte_end":16231,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16232,"byte_end":16309,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16310,"byte_end":16388,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16389,"byte_end":16465,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16466,"byte_end":16541,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16542,"byte_end":16558,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16559,"byte_end":16562,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16563,"byte_end":16575,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16576,"byte_end":16579,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16580,"byte_end":16653,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16654,"byte_end":16729,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16730,"byte_end":16807,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16808,"byte_end":16880,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16881,"byte_end":16909,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16910,"byte_end":16913,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16914,"byte_end":16927,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16928,"byte_end":16931,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":16932,"byte_end":17000,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17001,"byte_end":17004,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17005,"byte_end":17016,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17017,"byte_end":17065,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17066,"byte_end":17069,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17070,"byte_end":17086,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17087,"byte_end":17113,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17114,"byte_end":17131,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17132,"byte_end":17153,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17154,"byte_end":17175,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17176,"byte_end":17197,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17198,"byte_end":17203,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17204,"byte_end":17207,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17208,"byte_end":17254,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17255,"byte_end":17279,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17280,"byte_end":17283,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17284,"byte_end":17337,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17338,"byte_end":17363,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17364,"byte_end":17398,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17399,"byte_end":17426,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17427,"byte_end":17440,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17441,"byte_end":17450,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17451,"byte_end":17456,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17457,"byte_end":17460,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17461,"byte_end":17549,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17550,"byte_end":17633,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17634,"byte_end":17722,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17723,"byte_end":17761,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17762,"byte_end":17769,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17770,"byte_end":17773,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17774,"byte_end":17833,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17834,"byte_end":17837,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17838,"byte_end":17849,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17850,"byte_end":17900,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17901,"byte_end":17919,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17920,"byte_end":17970,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17971,"byte_end":17990,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":17991,"byte_end":18014,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18015,"byte_end":18038,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18039,"byte_end":18062,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18063,"byte_end":18070,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18071,"byte_end":18111,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18112,"byte_end":18160,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18161,"byte_end":18187,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18188,"byte_end":18243,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18244,"byte_end":18271,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18272,"byte_end":18308,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18309,"byte_end":18338,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18339,"byte_end":18354,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18355,"byte_end":18366,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18367,"byte_end":18374,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18375,"byte_end":18418,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18419,"byte_end":18445,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18446,"byte_end":18449,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18450,"byte_end":18482,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18483,"byte_end":18541,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18542,"byte_end":18588,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18589,"byte_end":18592,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18593,"byte_end":18630,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18631,"byte_end":18665,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18666,"byte_end":18724,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18725,"byte_end":18754,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18755,"byte_end":18758,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18759,"byte_end":18843,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18844,"byte_end":18886,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18887,"byte_end":18913,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18914,"byte_end":18919,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18920,"byte_end":18988,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":18989,"byte_end":19042,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19043,"byte_end":19081,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19082,"byte_end":19087,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19088,"byte_end":19117,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19118,"byte_end":19125,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19126,"byte_end":19129,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19130,"byte_end":19142,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19143,"byte_end":19146,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19147,"byte_end":19222,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19223,"byte_end":19281,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19282,"byte_end":19311,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19312,"byte_end":19391,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19392,"byte_end":19470,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19471,"byte_end":19549,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19550,"byte_end":19574,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19575,"byte_end":19653,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19654,"byte_end":19715,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19716,"byte_end":19769,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19770,"byte_end":19773,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19774,"byte_end":19843,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19844,"byte_end":19867,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20165,"byte_end":20169,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19913,"byte_end":19986,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19989,"byte_end":20047,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20050,"byte_end":20079,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20082,"byte_end":20085,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20088,"byte_end":20157,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20291,"byte_end":20311,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20189,"byte_end":20267,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20270,"byte_end":20285,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20442,"byte_end":20462,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&T) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20419,"byte_end":20436,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20578,"byte_end":20598,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20563,"byte_end":20572,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20754,"byte_end":20774,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":{"krate":0,"index":44},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20739,"byte_end":20748,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":511},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22361,"byte_end":22373,"line_start":216,"line_end":216,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22278,"byte_end":22326,"line_start":213,"line_end":213,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22329,"byte_end":22332,"line_start":214,"line_end":214,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22335,"byte_end":22358,"line_start":215,"line_end":215,"column_start":3,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22374,"byte_end":22393,"line_start":216,"line_end":216,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22680,"byte_end":22697,"line_start":223,"line_end":223,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22398,"byte_end":22471,"line_start":217,"line_end":217,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22474,"byte_end":22545,"line_start":218,"line_end":218,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22548,"byte_end":22616,"line_start":219,"line_end":219,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22619,"byte_end":22645,"line_start":220,"line_end":220,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22648,"byte_end":22651,"line_start":221,"line_end":221,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22654,"byte_end":22677,"line_start":222,"line_end":222,"column_start":3,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":510},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22257,"byte_end":22273,"line_start":212,"line_end":212,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":514}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22105,"byte_end":22185,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22186,"byte_end":22196,"line_start":210,"line_end":210,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22789,"byte_end":22792,"line_start":228,"line_end":228,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10138},"children":[],"decl_id":{"krate":1,"index":10139},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23031,"byte_end":23035,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23384,"byte_end":23398,"line_start":249,"line_end":249,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23131,"byte_end":23165,"line_start":241,"line_end":241,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23166,"byte_end":23169,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23170,"byte_end":23184,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23185,"byte_end":23188,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23189,"byte_end":23238,"line_start":245,"line_end":245,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23239,"byte_end":23307,"line_start":246,"line_end":246,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23308,"byte_end":23366,"line_start":247,"line_end":247,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23367,"byte_end":23376,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23987,"byte_end":24005,"line_start":269,"line_end":269,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, CheckedCastError> where\nT: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23726,"byte_end":23768,"line_start":261,"line_end":261,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23769,"byte_end":23772,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23773,"byte_end":23787,"line_start":263,"line_end":263,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23788,"byte_end":23791,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23792,"byte_end":23841,"line_start":265,"line_end":265,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23842,"byte_end":23910,"line_start":266,"line_end":266,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23911,"byte_end":23969,"line_start":267,"line_end":267,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23970,"byte_end":23979,"line_start":268,"line_end":268,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24561,"byte_end":24583,"line_start":287,"line_end":287,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24356,"byte_end":24403,"line_start":281,"line_end":281,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24404,"byte_end":24407,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24408,"byte_end":24422,"line_start":283,"line_end":283,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24423,"byte_end":24484,"line_start":284,"line_end":284,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24485,"byte_end":24543,"line_start":285,"line_end":285,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24544,"byte_end":24553,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25334,"byte_end":25342,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24882,"byte_end":24911,"line_start":299,"line_end":299,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24912,"byte_end":24915,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24916,"byte_end":24993,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":24994,"byte_end":25073,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25074,"byte_end":25152,"line_start":303,"line_end":303,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25153,"byte_end":25172,"line_start":304,"line_end":304,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25173,"byte_end":25176,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25177,"byte_end":25191,"line_start":306,"line_end":306,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25192,"byte_end":25195,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25196,"byte_end":25251,"line_start":308,"line_end":308,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25252,"byte_end":25316,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25317,"byte_end":25326,"line_start":310,"line_end":310,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25886,"byte_end":25898,"line_start":331,"line_end":331,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25628,"byte_end":25664,"line_start":323,"line_end":323,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25665,"byte_end":25668,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25669,"byte_end":25683,"line_start":325,"line_end":325,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25684,"byte_end":25687,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25688,"byte_end":25740,"line_start":327,"line_end":327,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25741,"byte_end":25803,"line_start":328,"line_end":328,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25804,"byte_end":25868,"line_start":329,"line_end":329,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":25869,"byte_end":25878,"line_start":330,"line_end":330,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26336,"byte_end":26348,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, CheckedCastError> where\nA: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26234,"byte_end":26278,"line_start":343,"line_end":343,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26279,"byte_end":26282,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26283,"byte_end":26318,"line_start":345,"line_end":345,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26319,"byte_end":26328,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27591,"byte_end":27605,"line_start":380,"line_end":380,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26726,"byte_end":26799,"line_start":362,"line_end":362,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26800,"byte_end":26803,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26804,"byte_end":26863,"line_start":364,"line_end":364,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26864,"byte_end":26933,"line_start":365,"line_end":365,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26934,"byte_end":26937,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26938,"byte_end":26952,"line_start":367,"line_end":367,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26953,"byte_end":26956,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":26957,"byte_end":27037,"line_start":369,"line_end":369,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27038,"byte_end":27058,"line_start":370,"line_end":370,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27059,"byte_end":27136,"line_start":371,"line_end":371,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27137,"byte_end":27213,"line_start":372,"line_end":372,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27214,"byte_end":27294,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27295,"byte_end":27319,"line_start":374,"line_end":374,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27320,"byte_end":27445,"line_start":375,"line_end":375,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27446,"byte_end":27466,"line_start":376,"line_end":376,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27467,"byte_end":27547,"line_start":377,"line_end":377,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27548,"byte_end":27573,"line_start":378,"line_end":378,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27574,"byte_end":27583,"line_start":379,"line_end":379,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28129,"byte_end":28147,"line_start":399,"line_end":399,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], CheckedCastError>\nwhere A: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":27983,"byte_end":28055,"line_start":394,"line_end":394,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28056,"byte_end":28068,"line_start":395,"line_end":395,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28069,"byte_end":28072,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28073,"byte_end":28111,"line_start":397,"line_end":397,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28112,"byte_end":28121,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28707,"byte_end":28717,"line_start":422,"line_end":422,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28577,"byte_end":28611,"line_start":416,"line_end":416,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28612,"byte_end":28615,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28616,"byte_end":28629,"line_start":418,"line_end":418,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28630,"byte_end":28633,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28634,"byte_end":28689,"line_start":420,"line_end":420,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28690,"byte_end":28699,"line_start":421,"line_end":421,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29004,"byte_end":29018,"line_start":435,"line_end":435,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28862,"byte_end":28904,"line_start":429,"line_end":429,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28905,"byte_end":28908,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28909,"byte_end":28922,"line_start":431,"line_end":431,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28923,"byte_end":28926,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28927,"byte_end":28986,"line_start":433,"line_end":433,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":28987,"byte_end":28996,"line_start":434,"line_end":434,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29334,"byte_end":29352,"line_start":447,"line_end":447,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29190,"byte_end":29227,"line_start":442,"line_end":442,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29228,"byte_end":29231,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29232,"byte_end":29245,"line_start":444,"line_end":444,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29246,"byte_end":29316,"line_start":445,"line_end":445,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29317,"byte_end":29326,"line_start":446,"line_end":446,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29659,"byte_end":29663,"line_start":460,"line_end":460,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29520,"byte_end":29541,"line_start":454,"line_end":454,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29542,"byte_end":29545,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29546,"byte_end":29559,"line_start":456,"line_end":456,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29560,"byte_end":29563,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29564,"byte_end":29641,"line_start":458,"line_end":458,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29642,"byte_end":29651,"line_start":459,"line_end":459,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29930,"byte_end":29938,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29804,"byte_end":29836,"line_start":467,"line_end":467,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29837,"byte_end":29840,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29841,"byte_end":29854,"line_start":469,"line_end":469,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29855,"byte_end":29858,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29859,"byte_end":29912,"line_start":471,"line_end":471,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":29913,"byte_end":29922,"line_start":472,"line_end":472,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":95},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30254,"byte_end":30262,"line_start":491,"line_end":491,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30136,"byte_end":30160,"line_start":485,"line_end":485,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30161,"byte_end":30164,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30165,"byte_end":30178,"line_start":487,"line_end":487,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30179,"byte_end":30182,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30183,"byte_end":30236,"line_start":489,"line_end":489,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30237,"byte_end":30246,"line_start":490,"line_end":490,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30537,"byte_end":30547,"line_start":504,"line_end":504,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30413,"byte_end":30441,"line_start":498,"line_end":498,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30442,"byte_end":30445,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30446,"byte_end":30459,"line_start":500,"line_end":500,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30460,"byte_end":30463,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30464,"byte_end":30519,"line_start":502,"line_end":502,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30520,"byte_end":30529,"line_start":503,"line_end":503,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30842,"byte_end":30856,"line_start":517,"line_end":517,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30706,"byte_end":30742,"line_start":511,"line_end":511,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30743,"byte_end":30746,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30747,"byte_end":30760,"line_start":513,"line_end":513,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30761,"byte_end":30764,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30765,"byte_end":30824,"line_start":515,"line_end":515,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":30825,"byte_end":30834,"line_start":516,"line_end":516,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":164},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44690,"byte_end":44698,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":165}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":43794,"byte_end":43845,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":43846,"byte_end":43880,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":43881,"byte_end":43884,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":43885,"byte_end":43948,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":43949,"byte_end":44005,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44006,"byte_end":44009,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44010,"byte_end":44023,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44024,"byte_end":44027,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44028,"byte_end":44069,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44070,"byte_end":44117,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44118,"byte_end":44191,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44192,"byte_end":44234,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44235,"byte_end":44238,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44239,"byte_end":44254,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44255,"byte_end":44258,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some `impl`s are feature gated due to the MSRV policy:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44259,"byte_end":44317,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44318,"byte_end":44321,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * `MaybeUninit<T>` was not available in 1.34.0, but is available under the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44322,"byte_end":44400,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/   `zeroable_maybe_uninit` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44401,"byte_end":44444,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ * `Atomic*` types require Rust 1.60.0 or later to work on certain platforms, but is available","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44445,"byte_end":44542,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/   under the `zeroable_atomics` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44543,"byte_end":44591,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ * `[T; N]` for arbitrary `N` requires the `min_const_generics` feature flag.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44592,"byte_end":44672,"line_start":24,"line_end":24,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44978,"byte_end":44984,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44710,"byte_end":44750,"line_start":26,"line_end":26,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44753,"byte_end":44756,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44759,"byte_end":44834,"line_start":28,"line_end":28,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44837,"byte_end":44915,"line_start":29,"line_end":29,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44918,"byte_end":44960,"line_start":30,"line_end":30,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44963,"byte_end":44972,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":255},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52491,"byte_end":52507,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52261,"byte_end":52327,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52328,"byte_end":52363,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52364,"byte_end":52367,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52368,"byte_end":52381,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52382,"byte_end":52385,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52386,"byte_end":52445,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52446,"byte_end":52473,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":277},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55380,"byte_end":55383,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53486,"byte_end":53524,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53525,"byte_end":53528,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53529,"byte_end":53606,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53607,"byte_end":53686,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53687,"byte_end":53767,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53768,"byte_end":53786,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53787,"byte_end":53790,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53791,"byte_end":53867,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53868,"byte_end":53939,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":53940,"byte_end":54014,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54015,"byte_end":54033,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54034,"byte_end":54037,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54038,"byte_end":54051,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54052,"byte_end":54055,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54056,"byte_end":54096,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54097,"byte_end":54144,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54145,"byte_end":54223,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54224,"byte_end":54252,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54253,"byte_end":54329,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54330,"byte_end":54408,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54409,"byte_end":54489,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54490,"byte_end":54520,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54521,"byte_end":54575,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54576,"byte_end":54651,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54652,"byte_end":54731,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54732,"byte_end":54776,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54777,"byte_end":54857,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54858,"byte_end":54916,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54917,"byte_end":54991,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":54992,"byte_end":55069,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55070,"byte_end":55150,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55151,"byte_end":55231,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55232,"byte_end":55311,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55312,"byte_end":55362,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60027,"byte_end":60038,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59701,"byte_end":59757,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59758,"byte_end":59793,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59794,"byte_end":59797,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59798,"byte_end":59811,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59812,"byte_end":59815,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59816,"byte_end":59880,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59881,"byte_end":59959,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59960,"byte_end":60009,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63887,"byte_end":63895,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":60803,"byte_end":60881,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":60882,"byte_end":60885,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":60886,"byte_end":60943,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":60944,"byte_end":61023,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61024,"byte_end":61098,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61099,"byte_end":61178,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61179,"byte_end":61259,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61260,"byte_end":61340,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61341,"byte_end":61418,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61419,"byte_end":61434,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61435,"byte_end":61438,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61439,"byte_end":61513,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61514,"byte_end":61593,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61594,"byte_end":61674,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61675,"byte_end":61743,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61744,"byte_end":61796,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61797,"byte_end":61800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61801,"byte_end":61813,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61814,"byte_end":61817,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61818,"byte_end":61895,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61896,"byte_end":61968,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":61969,"byte_end":62040,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62041,"byte_end":62121,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62122,"byte_end":62200,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62201,"byte_end":62224,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62225,"byte_end":62228,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62229,"byte_end":62241,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62242,"byte_end":62245,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62246,"byte_end":62312,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62313,"byte_end":62367,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62368,"byte_end":62443,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62444,"byte_end":62508,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62509,"byte_end":62512,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62513,"byte_end":62553,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62554,"byte_end":62601,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62602,"byte_end":62678,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62679,"byte_end":62757,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62758,"byte_end":62838,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62839,"byte_end":62869,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62870,"byte_end":62927,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":62928,"byte_end":63001,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63002,"byte_end":63081,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63082,"byte_end":63126,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63127,"byte_end":63178,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63179,"byte_end":63224,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63225,"byte_end":63305,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63306,"byte_end":63364,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63365,"byte_end":63439,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63440,"byte_end":63517,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63518,"byte_end":63598,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63599,"byte_end":63679,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63680,"byte_end":63759,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63760,"byte_end":63810,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63811,"byte_end":63869,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67567,"byte_end":67577,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64599,"byte_end":64627,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64628,"byte_end":64631,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64632,"byte_end":64707,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64708,"byte_end":64774,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64775,"byte_end":64819,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64820,"byte_end":64823,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64824,"byte_end":64903,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64904,"byte_end":64984,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":64985,"byte_end":65047,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65048,"byte_end":65051,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65052,"byte_end":65130,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65131,"byte_end":65206,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65207,"byte_end":65235,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65236,"byte_end":65239,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65240,"byte_end":65253,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65254,"byte_end":65257,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65258,"byte_end":65265,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65266,"byte_end":65297,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65298,"byte_end":65313,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65314,"byte_end":65358,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65359,"byte_end":65373,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65374,"byte_end":65386,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65387,"byte_end":65399,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65400,"byte_end":65412,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65413,"byte_end":65425,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65426,"byte_end":65438,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65439,"byte_end":65444,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65445,"byte_end":65481,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65482,"byte_end":65502,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65503,"byte_end":65544,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65545,"byte_end":65586,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65587,"byte_end":65592,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65593,"byte_end":65647,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65648,"byte_end":65691,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65692,"byte_end":65733,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65734,"byte_end":65741,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65742,"byte_end":65754,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65755,"byte_end":65758,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65759,"byte_end":65832,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65833,"byte_end":65846,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65847,"byte_end":65850,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65851,"byte_end":65928,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":65929,"byte_end":66008,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66009,"byte_end":66063,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66064,"byte_end":66067,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66068,"byte_end":66148,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66149,"byte_end":66171,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66172,"byte_end":66175,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66176,"byte_end":66256,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66257,"byte_end":66313,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66314,"byte_end":66317,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66318,"byte_end":66393,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66394,"byte_end":66466,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66467,"byte_end":66536,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66537,"byte_end":66540,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66541,"byte_end":66619,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66620,"byte_end":66696,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66697,"byte_end":66708,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66709,"byte_end":66712,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66713,"byte_end":66785,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66786,"byte_end":66864,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66865,"byte_end":66941,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":66942,"byte_end":67021,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67022,"byte_end":67025,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67026,"byte_end":67098,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67099,"byte_end":67164,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67165,"byte_end":67168,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67169,"byte_end":67246,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67247,"byte_end":67269,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67270,"byte_end":67273,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67274,"byte_end":67353,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67354,"byte_end":67387,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67388,"byte_end":67391,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67392,"byte_end":67469,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67470,"byte_end":67549,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":381},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68402,"byte_end":68405,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67598,"byte_end":67669,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67672,"byte_end":67681,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67684,"byte_end":67687,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67690,"byte_end":67762,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67765,"byte_end":67831,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67834,"byte_end":67902,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67905,"byte_end":67947,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67950,"byte_end":67953,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67956,"byte_end":68033,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68036,"byte_end":68058,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68061,"byte_end":68064,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68067,"byte_end":68136,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68139,"byte_end":68215,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68218,"byte_end":68287,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68290,"byte_end":68328,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68331,"byte_end":68334,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68337,"byte_end":68394,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":382},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68496,"byte_end":68505,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68422,"byte_end":68487,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":383},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68595,"byte_end":68604,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68521,"byte_end":68586,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69269,"byte_end":69281,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68620,"byte_end":68688,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68691,"byte_end":68754,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68757,"byte_end":68760,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68763,"byte_end":68837,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68840,"byte_end":68907,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68910,"byte_end":68978,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68981,"byte_end":68984,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":68987,"byte_end":68999,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69002,"byte_end":69005,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69008,"byte_end":69081,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69084,"byte_end":69130,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69133,"byte_end":69136,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69139,"byte_end":69213,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69216,"byte_end":69251,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":69254,"byte_end":69263,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70804,"byte_end":70816,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70120,"byte_end":70195,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70198,"byte_end":70274,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70277,"byte_end":70289,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70292,"byte_end":70295,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70298,"byte_end":70372,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70375,"byte_end":70442,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70445,"byte_end":70513,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70516,"byte_end":70519,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70522,"byte_end":70534,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70537,"byte_end":70540,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70543,"byte_end":70616,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70619,"byte_end":70665,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70668,"byte_end":70671,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70674,"byte_end":70748,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70751,"byte_end":70786,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":70789,"byte_end":70798,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":393},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82110,"byte_end":82128,"line_start":126,"line_end":126,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":77861,"byte_end":77936,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":77937,"byte_end":77966,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":77967,"byte_end":77970,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":77971,"byte_end":78043,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78044,"byte_end":78122,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78123,"byte_end":78201,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78202,"byte_end":78278,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78279,"byte_end":78355,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78356,"byte_end":78404,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78405,"byte_end":78408,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78409,"byte_end":78421,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78422,"byte_end":78425,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78426,"byte_end":78495,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78496,"byte_end":78499,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78500,"byte_end":78571,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78572,"byte_end":78575,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78576,"byte_end":78648,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78649,"byte_end":78711,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78712,"byte_end":78791,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78792,"byte_end":78871,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78872,"byte_end":78902,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78903,"byte_end":78906,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78907,"byte_end":78987,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc. (When deriving","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":78988,"byte_end":79064,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/    `TransparentWrapper` on a type with ZST fields, the ZST fields must be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79065,"byte_end":79142,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/    [`Zeroable`]).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79143,"byte_end":79164,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79165,"byte_end":79168,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79169,"byte_end":79243,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79244,"byte_end":79259,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79260,"byte_end":79338,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79339,"byte_end":79417,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79418,"byte_end":79421,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79422,"byte_end":79493,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79494,"byte_end":79497,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79498,"byte_end":79512,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79513,"byte_end":79516,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79517,"byte_end":79596,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79597,"byte_end":79676,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79677,"byte_end":79752,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79753,"byte_end":79822,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79823,"byte_end":79860,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79861,"byte_end":79864,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79865,"byte_end":79943,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":79944,"byte_end":80012,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80013,"byte_end":80016,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80017,"byte_end":80031,"line_start":48,"line_end":48,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80032,"byte_end":80035,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80036,"byte_end":80048,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80049,"byte_end":80052,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80053,"byte_end":80060,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80061,"byte_end":80098,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80099,"byte_end":80123,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80124,"byte_end":80153,"line_start":55,"line_end":55,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80154,"byte_end":80157,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80158,"byte_end":80182,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80183,"byte_end":80216,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80217,"byte_end":80220,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80221,"byte_end":80284,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80285,"byte_end":80288,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80289,"byte_end":80348,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80349,"byte_end":80387,"line_start":63,"line_end":63,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80388,"byte_end":80448,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80449,"byte_end":80452,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80453,"byte_end":80480,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80481,"byte_end":80527,"line_start":67,"line_end":67,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80528,"byte_end":80600,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80601,"byte_end":80604,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80605,"byte_end":80662,"line_start":70,"line_end":70,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80663,"byte_end":80670,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80671,"byte_end":80674,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80675,"byte_end":80714,"line_start":73,"line_end":73,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80715,"byte_end":80718,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80719,"byte_end":80726,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80727,"byte_end":80764,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80765,"byte_end":80768,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80769,"byte_end":80793,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80794,"byte_end":80819,"line_start":79,"line_end":79,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80820,"byte_end":80823,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80824,"byte_end":80882,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80883,"byte_end":80886,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80887,"byte_end":80930,"line_start":83,"line_end":83,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80931,"byte_end":80964,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80965,"byte_end":80968,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":80969,"byte_end":80999,"line_start":86,"line_end":86,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81000,"byte_end":81039,"line_start":87,"line_end":87,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81040,"byte_end":81047,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81048,"byte_end":81051,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ## Deriving","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81052,"byte_end":81067,"line_start":90,"line_end":90,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81068,"byte_end":81071,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ When deriving, the non-wrapped fields must uphold all the normal requirements,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81072,"byte_end":81154,"line_start":92,"line_end":92,"column_start":1,"column_end":83}},{"value":"/ and must also be `Zeroable`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81155,"byte_end":81187,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81188,"byte_end":81191,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81346,"byte_end":81383,"line_start":101,"line_end":101,"column_start":1,"column_end":38}},{"value":"/ use std::marker::PhantomData;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81384,"byte_end":81417,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81418,"byte_end":81421,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ #[derive(TransparentWrapper)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81422,"byte_end":81455,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81456,"byte_end":81480,"line_start":105,"line_end":105,"column_start":1,"column_end":25}},{"value":"/ #[transparent(usize)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81481,"byte_end":81506,"line_start":106,"line_end":106,"column_start":1,"column_end":26}},{"value":"/ struct Wrapper<T: ?Sized>(usize, PhantomData<T>); // PhantomData<T> implements Zeroable for all T","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81507,"byte_end":81608,"line_start":107,"line_end":107,"column_start":1,"column_end":102}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81609,"byte_end":81616,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81617,"byte_end":81620,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Here, an error will occur, because `MyZst` does not implement `Zeroable`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81621,"byte_end":81698,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81699,"byte_end":81702,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81869,"byte_end":81906,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/ struct MyZst;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81907,"byte_end":81924,"line_start":119,"line_end":119,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81925,"byte_end":81928,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ #[derive(TransparentWrapper)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81929,"byte_end":81962,"line_start":121,"line_end":121,"column_start":1,"column_end":34}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81963,"byte_end":81987,"line_start":122,"line_end":122,"column_start":1,"column_end":25}},{"value":"/ #[transparent(usize)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":81988,"byte_end":82013,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"/ struct Wrapper(usize, MyZst); // MyZst does not implement Zeroable","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82014,"byte_end":82084,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82085,"byte_end":82092,"line_start":125,"line_end":125,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82215,"byte_end":82219,"line_start":129,"line_end":129,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82148,"byte_end":82197,"line_start":127,"line_end":127,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82200,"byte_end":82209,"line_start":128,"line_end":128,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82531,"byte_end":82539,"line_start":142,"line_end":142,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82428,"byte_end":82501,"line_start":139,"line_end":139,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82504,"byte_end":82513,"line_start":140,"line_end":140,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":82516,"byte_end":82525,"line_start":141,"line_end":141,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83229,"byte_end":83237,"line_start":160,"line_end":160,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83110,"byte_end":83187,"line_start":157,"line_end":157,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83190,"byte_end":83211,"line_start":158,"line_end":158,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83214,"byte_end":83223,"line_start":159,"line_end":159,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83901,"byte_end":83911,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83812,"byte_end":83883,"line_start":175,"line_end":175,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":83886,"byte_end":83895,"line_start":176,"line_end":176,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84455,"byte_end":84469,"line_start":194,"line_end":194,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84344,"byte_end":84417,"line_start":191,"line_end":191,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84420,"byte_end":84437,"line_start":192,"line_end":192,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84440,"byte_end":84449,"line_start":193,"line_end":193,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84975,"byte_end":84979,"line_start":210,"line_end":210,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84908,"byte_end":84957,"line_start":208,"line_end":208,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":84960,"byte_end":84969,"line_start":209,"line_end":209,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85184,"byte_end":85192,"line_start":221,"line_end":221,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85081,"byte_end":85154,"line_start":218,"line_end":218,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85157,"byte_end":85166,"line_start":219,"line_end":219,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85169,"byte_end":85178,"line_start":220,"line_end":220,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85882,"byte_end":85890,"line_start":239,"line_end":239,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85763,"byte_end":85839,"line_start":236,"line_end":236,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85842,"byte_end":85864,"line_start":237,"line_end":237,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":85867,"byte_end":85876,"line_start":238,"line_end":238,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":86554,"byte_end":86564,"line_start":256,"line_end":256,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":86465,"byte_end":86536,"line_start":254,"line_end":254,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":86539,"byte_end":86548,"line_start":255,"line_end":255,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":87109,"byte_end":87123,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":86998,"byte_end":87073,"line_start":270,"line_end":270,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":87076,"byte_end":87091,"line_start":271,"line_end":271,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":87094,"byte_end":87103,"line_start":272,"line_end":272,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":860},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4387,"byte_end":4427,"line_start":139,"line_end":139,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4264,"byte_end":4336,"line_start":137,"line_end":137,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4339,"byte_end":4384,"line_start":138,"line_end":138,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":862},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4613,"byte_end":4637,"line_start":143,"line_end":143,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4431,"byte_end":4499,"line_start":140,"line_end":140,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4502,"byte_end":4577,"line_start":141,"line_end":141,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4580,"byte_end":4610,"line_start":142,"line_end":142,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":864},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4858,"byte_end":4870,"line_start":147,"line_end":147,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4641,"byte_end":4716,"line_start":144,"line_end":144,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4719,"byte_end":4792,"line_start":145,"line_end":145,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4795,"byte_end":4855,"line_start":146,"line_end":146,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":866},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5161,"byte_end":5178,"line_start":154,"line_end":154,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":859},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4874,"byte_end":4948,"line_start":148,"line_end":148,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4951,"byte_end":4982,"line_start":149,"line_end":149,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4985,"byte_end":4988,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4991,"byte_end":5067,"line_start":151,"line_end":151,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5070,"byte_end":5145,"line_start":152,"line_end":152,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5148,"byte_end":5158,"line_start":153,"line_end":153,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":859},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4247,"byte_end":4259,"line_start":136,"line_end":136,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":4113,"byte_end":4186,"line_start":134,"line_end":134,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5265,"byte_end":5268,"line_start":158,"line_end":158,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10138},"children":[],"decl_id":{"krate":1,"index":10139},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5653,"byte_end":5661,"line_start":170,"line_end":170,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T>(&T) -> &[u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5444,"byte_end":5478,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5479,"byte_end":5482,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5483,"byte_end":5561,"line_start":167,"line_end":167,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5562,"byte_end":5635,"line_start":168,"line_end":168,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5636,"byte_end":5645,"line_start":169,"line_end":169,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5948,"byte_end":5960,"line_start":179,"line_end":179,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T>(&mut T) -> &mut [u8] where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5731,"byte_end":5773,"line_start":174,"line_end":174,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5774,"byte_end":5777,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5778,"byte_end":5856,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5857,"byte_end":5930,"line_start":177,"line_end":177,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5931,"byte_end":5940,"line_start":178,"line_end":178,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6188,"byte_end":6198,"line_start":189,"line_end":189,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6058,"byte_end":6092,"line_start":183,"line_end":183,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6093,"byte_end":6096,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6097,"byte_end":6110,"line_start":185,"line_end":185,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6111,"byte_end":6114,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6115,"byte_end":6170,"line_start":187,"line_end":187,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6171,"byte_end":6180,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":416},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6417,"byte_end":6431,"line_start":199,"line_end":199,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6275,"byte_end":6317,"line_start":193,"line_end":193,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6318,"byte_end":6321,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6322,"byte_end":6335,"line_start":195,"line_end":195,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6336,"byte_end":6339,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6340,"byte_end":6399,"line_start":197,"line_end":197,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6400,"byte_end":6409,"line_start":198,"line_end":198,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6677,"byte_end":6699,"line_start":208,"line_end":208,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6531,"byte_end":6578,"line_start":203,"line_end":203,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6579,"byte_end":6582,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6583,"byte_end":6597,"line_start":205,"line_end":205,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6598,"byte_end":6659,"line_start":206,"line_end":206,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6660,"byte_end":6669,"line_start":207,"line_end":207,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6966,"byte_end":6984,"line_start":219,"line_end":219,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6822,"byte_end":6859,"line_start":214,"line_end":214,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6860,"byte_end":6863,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6864,"byte_end":6877,"line_start":216,"line_end":216,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6878,"byte_end":6948,"line_start":217,"line_end":217,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":6949,"byte_end":6958,"line_start":218,"line_end":218,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7270,"byte_end":7284,"line_start":230,"line_end":230,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, PodCastError> where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7076,"byte_end":7110,"line_start":223,"line_end":223,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7111,"byte_end":7114,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7115,"byte_end":7129,"line_start":225,"line_end":225,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7130,"byte_end":7133,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7134,"byte_end":7183,"line_start":227,"line_end":227,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7184,"byte_end":7252,"line_start":228,"line_end":228,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7253,"byte_end":7262,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":424},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7589,"byte_end":7607,"line_start":241,"line_end":241,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, PodCastError> where\nT: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7387,"byte_end":7429,"line_start":234,"line_end":234,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7430,"byte_end":7433,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7434,"byte_end":7448,"line_start":236,"line_end":236,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7449,"byte_end":7452,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7453,"byte_end":7502,"line_start":238,"line_end":238,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7503,"byte_end":7571,"line_start":239,"line_end":239,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7572,"byte_end":7581,"line_start":240,"line_end":240,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7877,"byte_end":7881,"line_start":253,"line_end":253,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7738,"byte_end":7759,"line_start":247,"line_end":247,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7760,"byte_end":7763,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7764,"byte_end":7777,"line_start":249,"line_end":249,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7778,"byte_end":7781,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7782,"byte_end":7859,"line_start":251,"line_end":251,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7860,"byte_end":7869,"line_start":252,"line_end":252,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8086,"byte_end":8094,"line_start":263,"line_end":263,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7960,"byte_end":7992,"line_start":257,"line_end":257,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7993,"byte_end":7996,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":7997,"byte_end":8010,"line_start":259,"line_end":259,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8011,"byte_end":8014,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8015,"byte_end":8068,"line_start":261,"line_end":261,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8069,"byte_end":8078,"line_start":262,"line_end":262,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8337,"byte_end":8345,"line_start":275,"line_end":275,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8219,"byte_end":8243,"line_start":269,"line_end":269,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8244,"byte_end":8247,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8248,"byte_end":8261,"line_start":271,"line_end":271,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8262,"byte_end":8265,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8266,"byte_end":8319,"line_start":273,"line_end":273,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8320,"byte_end":8329,"line_start":274,"line_end":274,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8554,"byte_end":8564,"line_start":285,"line_end":285,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8430,"byte_end":8458,"line_start":279,"line_end":279,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8459,"byte_end":8462,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8463,"byte_end":8476,"line_start":281,"line_end":281,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8477,"byte_end":8480,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8481,"byte_end":8536,"line_start":283,"line_end":283,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8537,"byte_end":8546,"line_start":284,"line_end":284,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8791,"byte_end":8805,"line_start":295,"line_end":295,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8655,"byte_end":8691,"line_start":289,"line_end":289,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8692,"byte_end":8695,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8696,"byte_end":8709,"line_start":291,"line_end":291,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8710,"byte_end":8713,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8714,"byte_end":8773,"line_start":293,"line_end":293,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8774,"byte_end":8783,"line_start":294,"line_end":294,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9022,"byte_end":9034,"line_start":306,"line_end":306,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U>(&[T]) -> (&[T], &[U], &[T]) where T: NoUninit,\nU: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":8947,"byte_end":9004,"line_start":304,"line_end":304,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9005,"byte_end":9014,"line_start":305,"line_end":305,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9223,"byte_end":9239,"line_start":314,"line_end":314,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U>(&mut [T]) -> (&mut [T], &mut [U], &mut [T]) where\nT: NoUninit + AnyBitPattern, U: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9144,"byte_end":9205,"line_start":312,"line_end":312,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9206,"byte_end":9215,"line_start":313,"line_end":313,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9790,"byte_end":9798,"line_start":334,"line_end":334,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9403,"byte_end":9432,"line_start":323,"line_end":323,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9433,"byte_end":9436,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9437,"byte_end":9514,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9515,"byte_end":9594,"line_start":326,"line_end":326,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9595,"byte_end":9673,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9674,"byte_end":9693,"line_start":328,"line_end":328,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9694,"byte_end":9697,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9698,"byte_end":9712,"line_start":330,"line_end":330,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9713,"byte_end":9716,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9717,"byte_end":9772,"line_start":332,"line_end":332,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9773,"byte_end":9782,"line_start":333,"line_end":333,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10101,"byte_end":10113,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9908,"byte_end":9944,"line_start":340,"line_end":340,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9945,"byte_end":9948,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9949,"byte_end":9963,"line_start":342,"line_end":342,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9964,"byte_end":9967,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":9968,"byte_end":10020,"line_start":344,"line_end":344,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10021,"byte_end":10083,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10084,"byte_end":10093,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10331,"byte_end":10343,"line_start":357,"line_end":357,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10229,"byte_end":10273,"line_start":353,"line_end":353,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10274,"byte_end":10277,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10278,"byte_end":10313,"line_start":355,"line_end":355,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10314,"byte_end":10323,"line_start":356,"line_end":356,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11259,"byte_end":11273,"line_start":382,"line_end":382,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10501,"byte_end":10574,"line_start":366,"line_end":366,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10575,"byte_end":10578,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10579,"byte_end":10638,"line_start":368,"line_end":368,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10639,"byte_end":10708,"line_start":369,"line_end":369,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10709,"byte_end":10712,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10713,"byte_end":10727,"line_start":371,"line_end":371,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10728,"byte_end":10731,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10732,"byte_end":10812,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10813,"byte_end":10833,"line_start":374,"line_end":374,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10834,"byte_end":10911,"line_start":375,"line_end":375,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10912,"byte_end":10988,"line_start":376,"line_end":376,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":10989,"byte_end":11069,"line_start":377,"line_end":377,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11070,"byte_end":11094,"line_start":378,"line_end":378,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11095,"byte_end":11220,"line_start":379,"line_end":379,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11221,"byte_end":11241,"line_start":380,"line_end":380,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11242,"byte_end":11251,"line_start":381,"line_end":381,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":459},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11541,"byte_end":11559,"line_start":393,"line_end":393,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11395,"byte_end":11467,"line_start":388,"line_end":388,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11468,"byte_end":11480,"line_start":389,"line_end":389,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11481,"byte_end":11484,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11485,"byte_end":11523,"line_start":391,"line_end":391,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":11524,"byte_end":11533,"line_start":392,"line_end":392,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14849,"byte_end":14850,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20395,"byte_end":20396,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22765,"byte_end":22781,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23007,"byte_end":23023,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":45625,"byte_end":45633,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":45689,"byte_end":45696,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46219,"byte_end":46230,"line_start":67,"line_end":67,"column_start":37,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46262,"byte_end":46275,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46317,"byte_end":46329,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46386,"byte_end":46396,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46453,"byte_end":46457,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52247,"byte_end":52253,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52552,"byte_end":52561,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52598,"byte_end":52608,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52645,"byte_end":52655,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52692,"byte_end":52702,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52739,"byte_end":52750,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52787,"byte_end":52799,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52836,"byte_end":52845,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52882,"byte_end":52892,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52929,"byte_end":52939,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52976,"byte_end":52986,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53023,"byte_end":53034,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53071,"byte_end":53083,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53204,"byte_end":53211,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55851,"byte_end":55859,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56159,"byte_end":56170,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56197,"byte_end":56210,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56242,"byte_end":56254,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59687,"byte_end":59693,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60106,"byte_end":60115,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60147,"byte_end":60157,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60189,"byte_end":60199,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60231,"byte_end":60241,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60273,"byte_end":60284,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60316,"byte_end":60328,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60360,"byte_end":60369,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60401,"byte_end":60411,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60443,"byte_end":60453,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60485,"byte_end":60495,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60527,"byte_end":60538,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60570,"byte_end":60582,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63957,"byte_end":63958,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64056,"byte_end":64065,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64094,"byte_end":64103,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64132,"byte_end":64142,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64171,"byte_end":64181,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64210,"byte_end":64220,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64249,"byte_end":64259,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64288,"byte_end":64298,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64327,"byte_end":64337,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64366,"byte_end":64377,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64406,"byte_end":64417,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64446,"byte_end":64458,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64487,"byte_end":64499,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":87615,"byte_end":87623,"line_start":288,"line_end":288,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5245,"byte_end":5257,"line_start":157,"line_end":157,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":3561,"byte_end":3568,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":27}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14772,"byte_end":14780,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":164},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14783,"byte_end":14788,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14791,"byte_end":14795,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/anybitpattern.rs","byte_start":14849,"byte_end":14850,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":19904,"byte_end":19908,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":42}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":20395,"byte_end":20396,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":46},"to":{"krate":0,"index":42}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":22765,"byte_end":22781,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":510},"to":{"krate":1,"index":10138}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/checked.rs","byte_start":23007,"byte_end":23023,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":510},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":44700,"byte_end":44705,"line_start":25,"line_end":25,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":45625,"byte_end":45633,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":45689,"byte_end":45696,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":30766},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46219,"byte_end":46230,"line_start":67,"line_end":67,"column_start":37,"column_end":48},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46262,"byte_end":46275,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":31986},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46317,"byte_end":46329,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":25433},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46386,"byte_end":46396,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":5091},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable.rs","byte_start":46453,"byte_end":46457,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":4871},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52247,"byte_end":52253,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":40600},"to":{"krate":0,"index":164}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52509,"byte_end":52514,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52552,"byte_end":52561,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52598,"byte_end":52608,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52645,"byte_end":52655,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52692,"byte_end":52702,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52739,"byte_end":52750,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52787,"byte_end":52799,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":47}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52836,"byte_end":52845,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52882,"byte_end":52892,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52929,"byte_end":52939,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":52976,"byte_end":52986,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53023,"byte_end":53034,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53071,"byte_end":53083,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/zeroable_in_option.rs","byte_start":53204,"byte_end":53211,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":2320},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55385,"byte_end":55393,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":164},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55396,"byte_end":55400,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":55851,"byte_end":55859,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56159,"byte_end":56170,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56197,"byte_end":56210,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":31986},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod.rs","byte_start":56242,"byte_end":56254,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":25433},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":59687,"byte_end":59693,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":40600},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60040,"byte_end":60056,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":255},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60059,"byte_end":60063,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60106,"byte_end":60115,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60147,"byte_end":60157,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60189,"byte_end":60199,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60231,"byte_end":60241,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60273,"byte_end":60284,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60316,"byte_end":60328,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60360,"byte_end":60369,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60401,"byte_end":60411,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60443,"byte_end":60453,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60485,"byte_end":60495,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60527,"byte_end":60538,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/pod_in_option.rs","byte_start":60570,"byte_end":60582,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":305}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63897,"byte_end":63902,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63905,"byte_end":63909,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":63957,"byte_end":63958,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64056,"byte_end":64065,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":17633},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64094,"byte_end":64103,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":17837},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64132,"byte_end":64142,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":17667},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64171,"byte_end":64181,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":17871},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64210,"byte_end":64220,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":17701},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64249,"byte_end":64259,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":17905},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64288,"byte_end":64298,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":17735},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64327,"byte_end":64337,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":17939},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64366,"byte_end":64377,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":17769},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64406,"byte_end":64417,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":17973},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64446,"byte_end":64458,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":1,"index":17803},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/no_uninit.rs","byte_start":64487,"byte_end":64499,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":100}},"from":{"krate":1,"index":18007},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/contiguous.rs","byte_start":67579,"byte_end":67583,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":380}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/transparent.rs","byte_start":87615,"byte_end":87623,"line_start":288,"line_end":288,"column_start":53,"column_end":61},"kind":{"Impl":{"id":120}},"from":{"krate":1,"index":21188},"to":{"krate":0,"index":393}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.1/src/lib.rs","byte_start":5245,"byte_end":5257,"line_start":157,"line_end":157,"column_start":29,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":859},"to":{"krate":1,"index":10138}}]}