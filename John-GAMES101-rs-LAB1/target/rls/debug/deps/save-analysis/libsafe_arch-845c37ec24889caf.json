{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","safe_arch","--edition=2018","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=845c37ec24889caf","-C","extra-filename=-845c37ec24889caf","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","--extern","bytemuck=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps/libbytemuck-012bd43b1c8f02f3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps/libsafe_arch-845c37ec24889caf.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[6148523621216344512,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":0,"byte_end":13733,"line_start":1,"line_end":333,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":0,"byte_end":13733,"line_start":1,"line_end":333,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":60,"byte_end":97,"line_start":4,"line_end":4,"column_start":1,"column_end":38}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":98,"byte_end":137,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":179,"byte_end":242,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":243,"byte_end":246,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":247,"byte_end":318,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":319,"byte_end":393,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":394,"byte_end":473,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":474,"byte_end":554,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":555,"byte_end":591,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":592,"byte_end":595,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":596,"byte_end":675,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":676,"byte_end":754,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":755,"byte_end":835,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":836,"byte_end":905,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":906,"byte_end":922,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":923,"byte_end":926,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":927,"byte_end":1007,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1008,"byte_end":1088,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1089,"byte_end":1121,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1122,"byte_end":1194,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1195,"byte_end":1275,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1276,"byte_end":1316,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1317,"byte_end":1392,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1393,"byte_end":1466,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1467,"byte_end":1499,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1500,"byte_end":1577,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1578,"byte_end":1655,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1656,"byte_end":1731,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1732,"byte_end":1751,"line_start":34,"line_end":34,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1752,"byte_end":1825,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1826,"byte_end":1903,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1904,"byte_end":1983,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":1984,"byte_end":2056,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2057,"byte_end":2096,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2097,"byte_end":2100,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2101,"byte_end":2126,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2127,"byte_end":2202,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2203,"byte_end":2277,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2278,"byte_end":2356,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2357,"byte_end":2404,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2405,"byte_end":2408,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2409,"byte_end":2471,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2472,"byte_end":2521,"line_start":48,"line_end":48,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2522,"byte_end":2525,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2526,"byte_end":2548,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2549,"byte_end":2589,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2590,"byte_end":2657,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2658,"byte_end":2688,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2689,"byte_end":2762,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2763,"byte_end":2799,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2800,"byte_end":2803,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2804,"byte_end":2843,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2844,"byte_end":2847,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2848,"byte_end":2921,"line_start":59,"line_end":59,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2922,"byte_end":2997,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":2998,"byte_end":3078,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3079,"byte_end":3159,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3160,"byte_end":3238,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3239,"byte_end":3314,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3315,"byte_end":3389,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3390,"byte_end":3415,"line_start":66,"line_end":66,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3416,"byte_end":3419,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3420,"byte_end":3500,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3501,"byte_end":3578,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3579,"byte_end":3656,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3657,"byte_end":3668,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3669,"byte_end":3672,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3673,"byte_end":3753,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3754,"byte_end":3831,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3832,"byte_end":3871,"line_start":75,"line_end":75,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3872,"byte_end":3875,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3876,"byte_end":3952,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":3953,"byte_end":4028,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4029,"byte_end":4105,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4106,"byte_end":4184,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4185,"byte_end":4265,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4266,"byte_end":4345,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4346,"byte_end":4411,"line_start":83,"line_end":83,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4412,"byte_end":4415,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4416,"byte_end":4492,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4493,"byte_end":4557,"line_start":86,"line_end":86,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4558,"byte_end":4561,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4562,"byte_end":4642,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4643,"byte_end":4723,"line_start":89,"line_end":89,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4724,"byte_end":4799,"line_start":90,"line_end":90,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4800,"byte_end":4880,"line_start":91,"line_end":91,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4881,"byte_end":4956,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":4957,"byte_end":5033,"line_start":93,"line_end":93,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5034,"byte_end":5113,"line_start":94,"line_end":94,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5114,"byte_end":5188,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5189,"byte_end":5269,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5270,"byte_end":5273,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5274,"byte_end":5293,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5294,"byte_end":5385,"line_start":99,"line_end":99,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5386,"byte_end":5409,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5410,"byte_end":5478,"line_start":101,"line_end":101,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5479,"byte_end":5554,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5555,"byte_end":5558,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5559,"byte_end":5593,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5594,"byte_end":5597,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5598,"byte_end":5637,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5638,"byte_end":5701,"line_start":107,"line_end":107,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5702,"byte_end":5755,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5756,"byte_end":5809,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5810,"byte_end":5868,"line_start":110,"line_end":110,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5869,"byte_end":5872,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5873,"byte_end":5942,"line_start":112,"line_end":112,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":5943,"byte_end":6021,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6022,"byte_end":6102,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6103,"byte_end":6183,"line_start":115,"line_end":115,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6184,"byte_end":6260,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6261,"byte_end":6282,"line_start":117,"line_end":117,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6283,"byte_end":6363,"line_start":118,"line_end":118,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6364,"byte_end":6442,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6443,"byte_end":6501,"line_start":120,"line_end":120,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6502,"byte_end":6505,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6506,"byte_end":6584,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6585,"byte_end":6658,"line_start":123,"line_end":123,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6659,"byte_end":6731,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6732,"byte_end":6809,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":6810,"byte_end":6858,"line_start":126,"line_end":126,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14068,"byte_end":14121,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14122,"byte_end":14125,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14126,"byte_end":14205,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14206,"byte_end":14279,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14280,"byte_end":14348,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14349,"byte_end":14365,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14366,"byte_end":14397,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14398,"byte_end":14401,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14402,"byte_end":14414,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14415,"byte_end":14493,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14494,"byte_end":14560,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14561,"byte_end":14629,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14630,"byte_end":14706,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14707,"byte_end":14750,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14751,"byte_end":14824,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14825,"byte_end":14905,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14906,"byte_end":14980,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":14981,"byte_end":15056,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15057,"byte_end":15134,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15135,"byte_end":15138,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15139,"byte_end":15156,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15157,"byte_end":15234,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15235,"byte_end":15309,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15310,"byte_end":15389,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15390,"byte_end":15446,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15447,"byte_end":15450,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15451,"byte_end":15521,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15522,"byte_end":15601,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15602,"byte_end":15682,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15683,"byte_end":15746,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15747,"byte_end":15750,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15751,"byte_end":15825,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15826,"byte_end":15906,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15907,"byte_end":15981,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":15982,"byte_end":16060,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16061,"byte_end":16123,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16124,"byte_end":16188,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16189,"byte_end":16192,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16193,"byte_end":16218,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16219,"byte_end":16295,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16296,"byte_end":16299,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16300,"byte_end":16339,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16340,"byte_end":16420,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16421,"byte_end":16501,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16502,"byte_end":16538,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16539,"byte_end":16580,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16581,"byte_end":16655,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16656,"byte_end":16733,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16734,"byte_end":16813,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16814,"byte_end":16873,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16874,"byte_end":16919,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16920,"byte_end":16991,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":16992,"byte_end":17048,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17049,"byte_end":17081,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17082,"byte_end":17161,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17162,"byte_end":17241,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17242,"byte_end":17299,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17300,"byte_end":17371,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17372,"byte_end":17439,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17440,"byte_end":17498,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17499,"byte_end":17577,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17578,"byte_end":17657,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17658,"byte_end":17738,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17739,"byte_end":17817,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17818,"byte_end":17863,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17864,"byte_end":17944,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":17945,"byte_end":18021,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18022,"byte_end":18034,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18035,"byte_end":18111,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18112,"byte_end":18190,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18191,"byte_end":18271,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18272,"byte_end":18291,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18292,"byte_end":18314,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18315,"byte_end":18392,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18393,"byte_end":18465,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18466,"byte_end":18546,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18547,"byte_end":18613,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18614,"byte_end":18691,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18692,"byte_end":18740,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18741,"byte_end":18819,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18820,"byte_end":18896,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18897,"byte_end":18976,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":18977,"byte_end":19056,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19057,"byte_end":19118,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19119,"byte_end":19190,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19191,"byte_end":19228,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19229,"byte_end":19308,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19309,"byte_end":19389,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19390,"byte_end":19422,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19423,"byte_end":19487,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19488,"byte_end":19553,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19554,"byte_end":19623,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19624,"byte_end":19701,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19702,"byte_end":19773,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19774,"byte_end":19851,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19852,"byte_end":19931,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":19932,"byte_end":20006,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20007,"byte_end":20019,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20020,"byte_end":20097,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20098,"byte_end":20177,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20178,"byte_end":20209,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20210,"byte_end":20285,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20286,"byte_end":20356,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20357,"byte_end":20437,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20438,"byte_end":20517,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20518,"byte_end":20594,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20595,"byte_end":20668,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20669,"byte_end":20749,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20750,"byte_end":20826,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20827,"byte_end":20905,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20906,"byte_end":20969,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":20970,"byte_end":21046,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21047,"byte_end":21124,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21125,"byte_end":21204,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21205,"byte_end":21267,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21268,"byte_end":21344,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21345,"byte_end":21361,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21362,"byte_end":21441,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21442,"byte_end":21477,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21478,"byte_end":21552,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21553,"byte_end":21606,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21607,"byte_end":21684,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21685,"byte_end":21765,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21766,"byte_end":21844,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21845,"byte_end":21910,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21911,"byte_end":21991,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":21992,"byte_end":22070,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22071,"byte_end":22126,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22127,"byte_end":22207,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22208,"byte_end":22264,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22265,"byte_end":22345,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22346,"byte_end":22421,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22422,"byte_end":22499,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22500,"byte_end":22577,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22578,"byte_end":22656,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22657,"byte_end":22724,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22725,"byte_end":22745,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22746,"byte_end":22826,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22827,"byte_end":22898,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22899,"byte_end":22978,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":22979,"byte_end":23007,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23008,"byte_end":23034,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23035,"byte_end":23091,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23092,"byte_end":23169,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23170,"byte_end":23248,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23249,"byte_end":23308,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23309,"byte_end":23331,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23332,"byte_end":23411,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23412,"byte_end":23492,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23493,"byte_end":23571,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23572,"byte_end":23590,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23591,"byte_end":23655,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23656,"byte_end":23733,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23734,"byte_end":23808,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23809,"byte_end":23848,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23849,"byte_end":23928,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":23929,"byte_end":24009,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24010,"byte_end":24053,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24054,"byte_end":24133,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24134,"byte_end":24214,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24215,"byte_end":24292,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24293,"byte_end":24372,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24373,"byte_end":24396,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24397,"byte_end":24477,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/naming_conventions.rs","byte_start":24478,"byte_end":24524,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.7.0/src/lib.rs","byte_start":7129,"byte_end":7147,"line_start":134,"line_end":134,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[]}