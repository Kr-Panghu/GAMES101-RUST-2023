{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0","program":"/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","once_cell","--edition=2021","/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"race\"","--cfg","feature=\"std\"","-C","metadata=45d46cedb6cc29c2","-C","extra-filename=-45d46cedb6cc29c2","--out-dir","/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","-L","dependency=/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kr/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/kr/Desktop/GAMES101-RUST-2023/John-GAMES101-rs-LAB1/target/rls/debug/deps/libonce_cell-45d46cedb6cc29c2.rmeta"},"prelude":{"crate_id":{"name":"once_cell","disambiguator":[724192191084705746,0]},"crate_root":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src","external_crates":[{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17597776811017068767,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14429041787429074469,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6090486777984981589,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2629364036353529844,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4080074450655046920,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5907259990925294111,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10493878511363669042,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12555285910560445398,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[2828314771408876961,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7582621806116120425,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2324381425420720695,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17777536701376484160,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[15325470721438668960,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[11693887763302245694,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[8512928500809439288,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[14797301622246846764,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[3748356315237825087,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8278577221625794805,0]}},{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[8521860849321575787,0]}}],"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":0,"byte_end":46955,"line_start":1,"line_end":1414,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":68982,"byte_end":68989,"line_start":291,"line_end":291,"column_start":25,"column_end":32},"alias_span":null,"name":"OnceBox","value":"","parent":{"krate":0,"index":309}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":0,"byte_end":46955,"line_start":1,"line_end":1414,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":88},{"krate":0,"index":199},{"krate":0,"index":309}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `once_cell` provides two new cell-like types, [`unsync::OnceCell`] and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19,"byte_end":93,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ [`sync::OnceCell`]. A `OnceCell` might store arbitrary non-`Copy` types, can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":94,"byte_end":174,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ be assigned to at most once and provides direct access to the stored","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":175,"byte_end":247,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"/ contents. The core API looks *roughly* like this (and there's much more","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":248,"byte_end":323,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ inside, read on!):","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":324,"byte_end":346,"line_start":7,"line_end":7,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":347,"byte_end":350,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":351,"byte_end":369,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/ impl<T> OnceCell<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":370,"byte_end":395,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/     const fn new() -> OnceCell<T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":396,"byte_end":441,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/     fn set(&self, value: T) -> Result<(), T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":442,"byte_end":498,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/     fn get(&self) -> Option<&T> { ... }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":499,"byte_end":542,"line_start":13,"line_end":13,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":543,"byte_end":548,"line_start":14,"line_end":14,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":549,"byte_end":556,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":557,"byte_end":560,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Note that, like with [`RefCell`] and [`Mutex`], the `set` method requires","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":561,"byte_end":638,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ only a shared reference. Because of the single assignment restriction `get`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":639,"byte_end":718,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ can return a `&T` instead of `Ref<T>` or `MutexGuard<T>`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":719,"byte_end":780,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":781,"byte_end":784,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The `sync` flavor is thread-safe (that is, implements the [`Sync`] trait),","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":785,"byte_end":863,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ while the `unsync` one is not.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":864,"byte_end":898,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":899,"byte_end":902,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`unsync::OnceCell`]: unsync/struct.OnceCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":903,"byte_end":956,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/ [`sync::OnceCell`]: sync/struct.OnceCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":957,"byte_end":1006,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1007,"byte_end":1078,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ [`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1079,"byte_end":1146,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1147,"byte_end":1213,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1214,"byte_end":1217,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Recipes","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1218,"byte_end":1231,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1232,"byte_end":1235,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ `OnceCell` might be useful for a variety of patterns.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1236,"byte_end":1293,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1294,"byte_end":1297,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Safe Initialization of Global Data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1298,"byte_end":1339,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1340,"byte_end":1343,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1344,"byte_end":1355,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/ use std::{env, io};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1356,"byte_end":1379,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1380,"byte_end":1383,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1384,"byte_end":1418,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1419,"byte_end":1422,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1423,"byte_end":1443,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"/ pub struct Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1444,"byte_end":1467,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/     // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1468,"byte_end":1482,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1483,"byte_end":1488,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ static INSTANCE: OnceCell<Logger> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1489,"byte_end":1545,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1546,"byte_end":1549,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ impl Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1550,"byte_end":1567,"line_start":47,"line_end":47,"column_start":1,"column_end":18}},{"value":"/     pub fn global() -> &'static Logger {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1568,"byte_end":1612,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/         INSTANCE.get().expect(\"logger is not initialized\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1613,"byte_end":1675,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1676,"byte_end":1685,"line_start":50,"line_end":50,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1686,"byte_end":1689,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/     fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1690,"byte_end":1762,"line_start":52,"line_end":52,"column_start":1,"column_end":73}},{"value":"/        // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1763,"byte_end":1780,"line_start":53,"line_end":53,"column_start":1,"column_end":18}},{"value":"/ #      Ok(Logger {})","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1806,"byte_end":1815,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1816,"byte_end":1821,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1822,"byte_end":1825,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1826,"byte_end":1841,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"/     let logger = Logger::from_cli(env::args()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1842,"byte_end":1902,"line_start":59,"line_end":59,"column_start":1,"column_end":61}},{"value":"/     INSTANCE.set(logger).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1903,"byte_end":1941,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/     // use `Logger::global()` from now on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1942,"byte_end":1987,"line_start":61,"line_end":61,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1988,"byte_end":1993,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":1994,"byte_end":2001,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2002,"byte_end":2005,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ## Lazy Initialized Global Data","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2006,"byte_end":2041,"line_start":65,"line_end":65,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2042,"byte_end":2045,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This is essentially the `lazy_static!` macro, but without a macro.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2046,"byte_end":2116,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2117,"byte_end":2120,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2121,"byte_end":2132,"line_start":69,"line_end":69,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2133,"byte_end":2182,"line_start":70,"line_end":70,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2187,"byte_end":2221,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2222,"byte_end":2225,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ fn global_data() -> &'static Mutex<HashMap<i32, String>> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2226,"byte_end":2288,"line_start":74,"line_end":74,"column_start":1,"column_end":63}},{"value":"/     static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2289,"byte_end":2370,"line_start":75,"line_end":75,"column_start":1,"column_end":82}},{"value":"/     INSTANCE.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2371,"byte_end":2404,"line_start":76,"line_end":76,"column_start":1,"column_end":34}},{"value":"/         let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2405,"byte_end":2444,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/         m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2445,"byte_end":2491,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/         m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2492,"byte_end":2539,"line_start":79,"line_end":79,"column_start":1,"column_end":48}},{"value":"/         Mutex::new(m)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2540,"byte_end":2565,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/     })","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2566,"byte_end":2576,"line_start":81,"line_end":81,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2577,"byte_end":2582,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2583,"byte_end":2590,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2591,"byte_end":2594,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ There are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2595,"byte_end":2674,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/ streamline this pattern:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2675,"byte_end":2703,"line_start":86,"line_end":86,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2704,"byte_end":2707,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2708,"byte_end":2719,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2720,"byte_end":2769,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2770,"byte_end":2800,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2801,"byte_end":2804,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ static GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2805,"byte_end":2879,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2880,"byte_end":2915,"line_start":93,"line_end":93,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2916,"byte_end":2958,"line_start":94,"line_end":94,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":2959,"byte_end":3002,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     Mutex::new(m)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3003,"byte_end":3024,"line_start":96,"line_end":96,"column_start":1,"column_end":22}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3025,"byte_end":3032,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3033,"byte_end":3036,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3037,"byte_end":3052,"line_start":99,"line_end":99,"column_start":1,"column_end":16}},{"value":"/     println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3053,"byte_end":3107,"line_start":100,"line_end":100,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3108,"byte_end":3113,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3114,"byte_end":3121,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3122,"byte_end":3125,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Note that the variable that holds `Lazy` is declared as `static`, *not*","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3126,"byte_end":3201,"line_start":104,"line_end":104,"column_start":1,"column_end":76}},{"value":"/ `const`. This is important: using `const` instead compiles, but works wrong.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3202,"byte_end":3282,"line_start":105,"line_end":105,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3283,"byte_end":3286,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ [`sync::Lazy`]: sync/struct.Lazy.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3287,"byte_end":3328,"line_start":107,"line_end":107,"column_start":1,"column_end":42}},{"value":"/ [`unsync::Lazy`]: unsync/struct.Lazy.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3329,"byte_end":3374,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3375,"byte_end":3378,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ## General purpose lazy evaluation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3379,"byte_end":3417,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3418,"byte_end":3421,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Unlike `lazy_static!`, `Lazy` works with local variables.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3422,"byte_end":3483,"line_start":112,"line_end":112,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3484,"byte_end":3487,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3488,"byte_end":3499,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3500,"byte_end":3532,"line_start":115,"line_end":115,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3533,"byte_end":3536,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3537,"byte_end":3552,"line_start":117,"line_end":117,"column_start":1,"column_end":16}},{"value":"/     let ctx = vec![1, 2, 3];","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3553,"byte_end":3585,"line_start":118,"line_end":118,"column_start":1,"column_end":33}},{"value":"/     let thunk = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3586,"byte_end":3620,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/         ctx.iter().sum::<i32>()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3621,"byte_end":3656,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3657,"byte_end":3668,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/     assert_eq!(*thunk, 6);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3669,"byte_end":3699,"line_start":122,"line_end":122,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3700,"byte_end":3705,"line_start":123,"line_end":123,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3706,"byte_end":3713,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3714,"byte_end":3717,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ If you need a lazy field in a struct, you probably should use `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3718,"byte_end":3794,"line_start":126,"line_end":126,"column_start":1,"column_end":77}},{"value":"/ directly, because that will allow you to access `self` during","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3795,"byte_end":3860,"line_start":127,"line_end":127,"column_start":1,"column_end":66}},{"value":"/ initialization.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3861,"byte_end":3880,"line_start":128,"line_end":128,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3881,"byte_end":3884,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3885,"byte_end":3896,"line_start":130,"line_end":130,"column_start":1,"column_end":12}},{"value":"/ use std::{fs, path::PathBuf};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3897,"byte_end":3930,"line_start":131,"line_end":131,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3931,"byte_end":3934,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3935,"byte_end":3971,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3972,"byte_end":3975,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ struct Ctx {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3976,"byte_end":3992,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/     config_path: PathBuf,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":3993,"byte_end":4022,"line_start":136,"line_end":136,"column_start":1,"column_end":30}},{"value":"/     config: OnceCell<String>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4023,"byte_end":4056,"line_start":137,"line_end":137,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4057,"byte_end":4062,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4063,"byte_end":4066,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ impl Ctx {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4067,"byte_end":4081,"line_start":140,"line_end":140,"column_start":1,"column_end":15}},{"value":"/     pub fn get_config(&self) -> Result<&str, std::io::Error> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4082,"byte_end":4148,"line_start":141,"line_end":141,"column_start":1,"column_end":67}},{"value":"/         let cfg = self.config.get_or_try_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4149,"byte_end":4203,"line_start":142,"line_end":142,"column_start":1,"column_end":55}},{"value":"/             fs::read_to_string(&self.config_path)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4204,"byte_end":4257,"line_start":143,"line_end":143,"column_start":1,"column_end":54}},{"value":"/         })?;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4258,"byte_end":4274,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/         Ok(cfg.as_str())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4275,"byte_end":4303,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4304,"byte_end":4313,"line_start":146,"line_end":146,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4314,"byte_end":4319,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4320,"byte_end":4327,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4328,"byte_end":4331,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ## Lazily Compiled Regex","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4332,"byte_end":4360,"line_start":150,"line_end":150,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4361,"byte_end":4364,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ This is a `regex!` macro which takes a string literal and returns an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4365,"byte_end":4437,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ *expression* that evaluates to a `&'static Regex`:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4438,"byte_end":4492,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4493,"byte_end":4496,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4497,"byte_end":4504,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ macro_rules! regex {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4505,"byte_end":4529,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/     ($re:literal $(,)?) => {{","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4530,"byte_end":4563,"line_start":157,"line_end":157,"column_start":1,"column_end":34}},{"value":"/         static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4564,"byte_end":4662,"line_start":158,"line_end":158,"column_start":1,"column_end":99}},{"value":"/         RE.get_or_init(|| regex::Regex::new($re).unwrap())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4663,"byte_end":4725,"line_start":159,"line_end":159,"column_start":1,"column_end":63}},{"value":"/     }};","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4726,"byte_end":4737,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4738,"byte_end":4743,"line_start":161,"line_end":161,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4744,"byte_end":4751,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4752,"byte_end":4755,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This macro can be useful to avoid the \"compile regex on every loop","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4756,"byte_end":4826,"line_start":164,"line_end":164,"column_start":1,"column_end":71}},{"value":"/ iteration\" problem.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4827,"byte_end":4850,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4851,"byte_end":4854,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ## Runtime `include_bytes!`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4855,"byte_end":4886,"line_start":167,"line_end":167,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4887,"byte_end":4890,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ The `include_bytes` macro is useful to include test resources, but it slows","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4891,"byte_end":4970,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ down test compilation a lot. An alternative is to load the resources at","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":4971,"byte_end":5046,"line_start":170,"line_end":170,"column_start":1,"column_end":76}},{"value":"/ runtime:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5047,"byte_end":5059,"line_start":171,"line_end":171,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5060,"byte_end":5063,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5064,"byte_end":5071,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ use std::path::Path;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5072,"byte_end":5096,"line_start":174,"line_end":174,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5097,"byte_end":5100,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5101,"byte_end":5135,"line_start":176,"line_end":176,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5136,"byte_end":5139,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ pub struct TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5140,"byte_end":5169,"line_start":178,"line_end":178,"column_start":1,"column_end":30}},{"value":"/     path: &'static str,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5170,"byte_end":5197,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"/     cell: OnceCell<Vec<u8>>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5198,"byte_end":5230,"line_start":180,"line_end":180,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5231,"byte_end":5236,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5237,"byte_end":5240,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ impl TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5241,"byte_end":5264,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/     pub const fn new(path: &'static str) -> TestResource {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5265,"byte_end":5327,"line_start":184,"line_end":184,"column_start":1,"column_end":63}},{"value":"/         TestResource { path, cell: OnceCell::new() }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5328,"byte_end":5384,"line_start":185,"line_end":185,"column_start":1,"column_end":57}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5385,"byte_end":5394,"line_start":186,"line_end":186,"column_start":1,"column_end":10}},{"value":"/     pub fn bytes(&self) -> &[u8] {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5395,"byte_end":5433,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"/         self.cell.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5434,"byte_end":5472,"line_start":188,"line_end":188,"column_start":1,"column_end":39}},{"value":"/             let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5473,"byte_end":5544,"line_start":189,"line_end":189,"column_start":1,"column_end":72}},{"value":"/             let path = Path::new(dir.as_str()).join(self.path);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5545,"byte_end":5612,"line_start":190,"line_end":190,"column_start":1,"column_end":68}},{"value":"/             std::fs::read(&path).unwrap_or_else(|_err| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5613,"byte_end":5673,"line_start":191,"line_end":191,"column_start":1,"column_end":61}},{"value":"/                 panic!(\"failed to load test resource: {}\", path.display())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5674,"byte_end":5752,"line_start":192,"line_end":192,"column_start":1,"column_end":79}},{"value":"/             })","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5753,"byte_end":5771,"line_start":193,"line_end":193,"column_start":1,"column_end":19}},{"value":"/         }).as_slice()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5772,"byte_end":5797,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5798,"byte_end":5807,"line_start":195,"line_end":195,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5808,"byte_end":5813,"line_start":196,"line_end":196,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5814,"byte_end":5817,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ static TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5818,"byte_end":5896,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5897,"byte_end":5900,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5901,"byte_end":5912,"line_start":200,"line_end":200,"column_start":1,"column_end":12}},{"value":"/ fn test_sobel_filter() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5913,"byte_end":5941,"line_start":201,"line_end":201,"column_start":1,"column_end":29}},{"value":"/     let rgb: &[u8] = TEST_IMAGE.bytes();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5942,"byte_end":5986,"line_start":202,"line_end":202,"column_start":1,"column_end":45}},{"value":"/     // ...","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":5987,"byte_end":6001,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/ # drop(rgb);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6002,"byte_end":6018,"line_start":204,"line_end":204,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6019,"byte_end":6024,"line_start":205,"line_end":205,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6025,"byte_end":6032,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6033,"byte_end":6036,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ ## `lateinit`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6037,"byte_end":6054,"line_start":208,"line_end":208,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6055,"byte_end":6058,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ `LateInit` type for delayed initialization. It is reminiscent of Kotlin's","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6059,"byte_end":6136,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/ `lateinit` keyword and allows construction of cyclic data structures:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6137,"byte_end":6210,"line_start":211,"line_end":211,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6211,"byte_end":6214,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6215,"byte_end":6218,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6219,"byte_end":6226,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6227,"byte_end":6261,"line_start":215,"line_end":215,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6262,"byte_end":6265,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ pub struct LateInit<T> { cell: OnceCell<T> }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6266,"byte_end":6314,"line_start":217,"line_end":217,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6315,"byte_end":6318,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ impl<T> LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6319,"byte_end":6344,"line_start":219,"line_end":219,"column_start":1,"column_end":26}},{"value":"/     pub fn init(&self, value: T) {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6345,"byte_end":6383,"line_start":220,"line_end":220,"column_start":1,"column_end":39}},{"value":"/         assert!(self.cell.set(value).is_ok())","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6384,"byte_end":6433,"line_start":221,"line_end":221,"column_start":1,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6434,"byte_end":6443,"line_start":222,"line_end":222,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6444,"byte_end":6449,"line_start":223,"line_end":223,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6450,"byte_end":6453,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ impl<T> Default for LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6454,"byte_end":6491,"line_start":225,"line_end":225,"column_start":1,"column_end":38}},{"value":"/     fn default() -> Self { LateInit { cell: OnceCell::default() } }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6492,"byte_end":6563,"line_start":226,"line_end":226,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6564,"byte_end":6569,"line_start":227,"line_end":227,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6570,"byte_end":6573,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ impl<T> std::ops::Deref for LateInit<T> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6574,"byte_end":6619,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/     type Target = T;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6620,"byte_end":6644,"line_start":230,"line_end":230,"column_start":1,"column_end":25}},{"value":"/     fn deref(&self) -> &T {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6645,"byte_end":6676,"line_start":231,"line_end":231,"column_start":1,"column_end":32}},{"value":"/         self.cell.get().unwrap()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6677,"byte_end":6713,"line_start":232,"line_end":232,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6714,"byte_end":6723,"line_start":233,"line_end":233,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6724,"byte_end":6729,"line_start":234,"line_end":234,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6730,"byte_end":6733,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6734,"byte_end":6756,"line_start":236,"line_end":236,"column_start":1,"column_end":23}},{"value":"/ struct A<'a> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6757,"byte_end":6775,"line_start":237,"line_end":237,"column_start":1,"column_end":19}},{"value":"/     b: LateInit<&'a B<'a>>,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6776,"byte_end":6807,"line_start":238,"line_end":238,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6808,"byte_end":6813,"line_start":239,"line_end":239,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6814,"byte_end":6817,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default)]","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6818,"byte_end":6840,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/ struct B<'a> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6841,"byte_end":6859,"line_start":242,"line_end":242,"column_start":1,"column_end":19}},{"value":"/     a: LateInit<&'a A<'a>>","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6860,"byte_end":6890,"line_start":243,"line_end":243,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6891,"byte_end":6896,"line_start":244,"line_end":244,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6897,"byte_end":6900,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6901,"byte_end":6904,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ fn build_cycle() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6905,"byte_end":6927,"line_start":247,"line_end":247,"column_start":1,"column_end":23}},{"value":"/     let a = A::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6928,"byte_end":6957,"line_start":248,"line_end":248,"column_start":1,"column_end":30}},{"value":"/     let b = B::default();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6958,"byte_end":6987,"line_start":249,"line_end":249,"column_start":1,"column_end":30}},{"value":"/     a.b.init(&b);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":6988,"byte_end":7009,"line_start":250,"line_end":250,"column_start":1,"column_end":22}},{"value":"/     b.a.init(&a);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7010,"byte_end":7031,"line_start":251,"line_end":251,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7032,"byte_end":7035,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/     let _a = &a.b.a.b.a;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7036,"byte_end":7064,"line_start":253,"line_end":253,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7065,"byte_end":7070,"line_start":254,"line_end":254,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7071,"byte_end":7078,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7079,"byte_end":7082,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ # Comparison with std","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7083,"byte_end":7108,"line_start":257,"line_end":257,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7109,"byte_end":7112,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ |`!Sync` types         | Access Mode            | Drawbacks                                     |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7113,"byte_end":7214,"line_start":259,"line_end":259,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7215,"byte_end":7316,"line_start":260,"line_end":260,"column_start":1,"column_end":102}},{"value":"/ |`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7317,"byte_end":7418,"line_start":261,"line_end":261,"column_start":1,"column_end":102}},{"value":"/ |`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7419,"byte_end":7520,"line_start":262,"line_end":262,"column_start":1,"column_end":102}},{"value":"/ |`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7521,"byte_end":7622,"line_start":263,"line_end":263,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7623,"byte_end":7626,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ |`Sync` types          | Access Mode            | Drawbacks                                     |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7627,"byte_end":7728,"line_start":265,"line_end":265,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7729,"byte_end":7830,"line_start":266,"line_end":266,"column_start":1,"column_end":102}},{"value":"/ |`AtomicT`             | `T`                    | works only with certain `Copy` types          |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7831,"byte_end":7932,"line_start":267,"line_end":267,"column_start":1,"column_end":102}},{"value":"/ |`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":7933,"byte_end":8034,"line_start":268,"line_end":268,"column_start":1,"column_end":102}},{"value":"/ |`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8035,"byte_end":8136,"line_start":269,"line_end":269,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8137,"byte_end":8140,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Technically, calling `get_or_init` will also cause a panic or a deadlock if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8141,"byte_end":8220,"line_start":271,"line_end":271,"column_start":1,"column_end":80}},{"value":"/ it recursively calls itself. However, because the assignment can happen only","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8221,"byte_end":8301,"line_start":272,"line_end":272,"column_start":1,"column_end":81}},{"value":"/ once, such cases should be more rare than equivalents with `RefCell` and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8302,"byte_end":8378,"line_start":273,"line_end":273,"column_start":1,"column_end":77}},{"value":"/ `Mutex`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8379,"byte_end":8391,"line_start":274,"line_end":274,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8392,"byte_end":8395,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported `rustc` Version","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8396,"byte_end":8435,"line_start":276,"line_end":276,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8436,"byte_end":8439,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ This crate's minimum supported `rustc` version is `1.56.0`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8440,"byte_end":8503,"line_start":278,"line_end":278,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8504,"byte_end":8507,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ If only the `std` feature is enabled, MSRV will be updated conservatively,","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8508,"byte_end":8586,"line_start":280,"line_end":280,"column_start":1,"column_end":79}},{"value":"/ supporting at least latest 8 versions of the compiler. When using other","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8587,"byte_end":8662,"line_start":281,"line_end":281,"column_start":1,"column_end":76}},{"value":"/ features, like `parking_lot`, MSRV might be updated more frequently, up to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8663,"byte_end":8741,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/ the latest stable. In both cases, increasing MSRV is *not* considered a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8742,"byte_end":8817,"line_start":283,"line_end":283,"column_start":1,"column_end":76}},{"value":"/ semver-breaking change.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8818,"byte_end":8845,"line_start":284,"line_end":284,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8846,"byte_end":8849,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ # Implementation details","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8850,"byte_end":8878,"line_start":286,"line_end":286,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8879,"byte_end":8882,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ The implementation is based on the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8883,"byte_end":8921,"line_start":288,"line_end":288,"column_start":1,"column_end":39}},{"value":"/ [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/) and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":8922,"byte_end":8999,"line_start":289,"line_end":289,"column_start":1,"column_end":78}},{"value":"/ [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9000,"byte_end":9065,"line_start":290,"line_end":290,"column_start":1,"column_end":66}},{"value":"/ [`std::sync::Once`]. In some sense, `once_cell` just streamlines and unifies","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9066,"byte_end":9146,"line_start":291,"line_end":291,"column_start":1,"column_end":81}},{"value":"/ those APIs.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9147,"byte_end":9162,"line_start":292,"line_end":292,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9163,"byte_end":9166,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ To implement a sync flavor of `OnceCell`, this crates uses either a custom","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9167,"byte_end":9245,"line_start":294,"line_end":294,"column_start":1,"column_end":79}},{"value":"/ re-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9246,"byte_end":9321,"line_start":295,"line_end":295,"column_start":1,"column_end":76}},{"value":"/ controlled by the `parking_lot` feature (disabled by default). Performance","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9322,"byte_end":9400,"line_start":296,"line_end":296,"column_start":1,"column_end":79}},{"value":"/ is the same for both cases, but the `parking_lot` based `OnceCell<T>` is","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9401,"byte_end":9477,"line_start":297,"line_end":297,"column_start":1,"column_end":77}},{"value":"/ smaller by up to 16 bytes.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9478,"byte_end":9508,"line_start":298,"line_end":298,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9509,"byte_end":9512,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ This crate uses `unsafe`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9513,"byte_end":9542,"line_start":300,"line_end":300,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9543,"byte_end":9546,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ [`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9547,"byte_end":9623,"line_start":302,"line_end":302,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9624,"byte_end":9627,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ # F.A.Q.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9628,"byte_end":9640,"line_start":304,"line_end":304,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9641,"byte_end":9644,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ **Should I use the sync or unsync flavor?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9645,"byte_end":9692,"line_start":306,"line_end":306,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9693,"byte_end":9696,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ Because Rust compiler checks thread safety for you, it's impossible to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9697,"byte_end":9771,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/ accidentally use `unsync` where `sync` is required. So, use `unsync` in","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9772,"byte_end":9847,"line_start":309,"line_end":309,"column_start":1,"column_end":76}},{"value":"/ single-threaded code and `sync` in multi-threaded. It's easy to switch","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9848,"byte_end":9922,"line_start":310,"line_end":310,"column_start":1,"column_end":75}},{"value":"/ between the two if code becomes multi-threaded later.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9923,"byte_end":9980,"line_start":311,"line_end":311,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9981,"byte_end":9984,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ At the moment, `unsync` has an additional benefit that reentrant","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":9985,"byte_end":10053,"line_start":313,"line_end":313,"column_start":1,"column_end":69}},{"value":"/ initialization causes a panic, which might be easier to debug than a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10054,"byte_end":10126,"line_start":314,"line_end":314,"column_start":1,"column_end":73}},{"value":"/ deadlock.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10127,"byte_end":10140,"line_start":315,"line_end":315,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10141,"byte_end":10144,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ **Does this crate support async?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10145,"byte_end":10183,"line_start":317,"line_end":317,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10184,"byte_end":10187,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ No, but you can use","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10188,"byte_end":10211,"line_start":319,"line_end":319,"column_start":1,"column_end":24}},{"value":"/ [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10212,"byte_end":10286,"line_start":320,"line_end":320,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10287,"byte_end":10290,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ **Does this crate support `no_std`?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10291,"byte_end":10332,"line_start":322,"line_end":322,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10333,"byte_end":10336,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Yes, but with caveats. `OnceCell` is a synchronization primitive which","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10337,"byte_end":10411,"line_start":324,"line_end":324,"column_start":1,"column_end":75}},{"value":"/ _semantically_ relies on blocking. `OnceCell` guarantees that at most one","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10412,"byte_end":10489,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ `f` will be called to compute the value. If two threads of execution call","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10490,"byte_end":10567,"line_start":326,"line_end":326,"column_start":1,"column_end":78}},{"value":"/ `get_or_init` concurrently, one of them has to wait.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10568,"byte_end":10624,"line_start":327,"line_end":327,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10625,"byte_end":10628,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ Waiting fundamentally requires OS support. Execution environment needs to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10629,"byte_end":10706,"line_start":329,"line_end":329,"column_start":1,"column_end":78}},{"value":"/ understand who waits on whom to prevent deadlocks due to priority inversion.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10707,"byte_end":10787,"line_start":330,"line_end":330,"column_start":1,"column_end":81}},{"value":"/ You _could_ make code to compile by blindly using pure spinlocks, but the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10788,"byte_end":10865,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/ runtime behavior would be subtly wrong.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10866,"byte_end":10909,"line_start":332,"line_end":332,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10910,"byte_end":10913,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ Given these constraints, `once_cell` provides the following options:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10914,"byte_end":10986,"line_start":334,"line_end":334,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10987,"byte_end":10990,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ - The `race` module provides similar, but distinct synchronization primitive","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":10991,"byte_end":11071,"line_start":336,"line_end":336,"column_start":1,"column_end":81}},{"value":"/   which is compatible with `no_std`. With `race`, the `f` function can be","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11072,"byte_end":11149,"line_start":337,"line_end":337,"column_start":1,"column_end":78}},{"value":"/   called multiple times by different threads, but only one thread will win","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11150,"byte_end":11228,"line_start":338,"line_end":338,"column_start":1,"column_end":79}},{"value":"/   to install the value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11229,"byte_end":11256,"line_start":339,"line_end":339,"column_start":1,"column_end":28}},{"value":"/ - `critical-section` feature (with a `-`, not `_`) uses `critical_section`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11257,"byte_end":11335,"line_start":340,"line_end":340,"column_start":1,"column_end":79}},{"value":"/   to implement blocking.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11336,"byte_end":11364,"line_start":341,"line_end":341,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11365,"byte_end":11368,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ **Can I bring my own mutex?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11369,"byte_end":11402,"line_start":343,"line_end":343,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11403,"byte_end":11406,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ There is [generic_once_cell](https://crates.io/crates/generic_once_cell) to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11407,"byte_end":11486,"line_start":345,"line_end":345,"column_start":1,"column_end":80}},{"value":"/ allow just that.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11487,"byte_end":11507,"line_start":346,"line_end":346,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11508,"byte_end":11511,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ **Should I use `std::cell::OnceCell`, `once_cell`, or `lazy_static`?**","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11512,"byte_end":11586,"line_start":348,"line_end":348,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11587,"byte_end":11590,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ If you can use `std` version (your MSRV is at least 1.70, and you don't need","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11591,"byte_end":11671,"line_start":350,"line_end":350,"column_start":1,"column_end":81}},{"value":"/ extra features `once_cell` provides), use `std`. Otherwise, use `once_cell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11672,"byte_end":11752,"line_start":351,"line_end":351,"column_start":1,"column_end":81}},{"value":"/ Don't use `lazy_static`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11753,"byte_end":11781,"line_start":352,"line_end":352,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11782,"byte_end":11785,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ # Related crates","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11786,"byte_end":11806,"line_start":354,"line_end":354,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11807,"byte_end":11810,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ * Most of this crate's functionality is available in `std` starting with","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11811,"byte_end":11887,"line_start":356,"line_end":356,"column_start":1,"column_end":77}},{"value":"/   Rust 1.70. See `std::cell::OnceCell` and `std::sync::OnceLock`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11888,"byte_end":11957,"line_start":357,"line_end":357,"column_start":1,"column_end":70}},{"value":"/ * [double-checked-cell](https://github.com/niklasf/double-checked-cell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":11958,"byte_end":12033,"line_start":358,"line_end":358,"column_start":1,"column_end":76}},{"value":"/ * [lazy-init](https://crates.io/crates/lazy-init)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12034,"byte_end":12087,"line_start":359,"line_end":359,"column_start":1,"column_end":54}},{"value":"/ * [lazycell](https://crates.io/crates/lazycell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12088,"byte_end":12139,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ * [mitochondria](https://crates.io/crates/mitochondria)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12140,"byte_end":12199,"line_start":361,"line_end":361,"column_start":1,"column_end":60}},{"value":"/ * [lazy_static](https://crates.io/crates/lazy_static)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12200,"byte_end":12257,"line_start":362,"line_end":362,"column_start":1,"column_end":58}},{"value":"/ * [async_once_cell](https://crates.io/crates/async_once_cell)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12258,"byte_end":12323,"line_start":363,"line_end":363,"column_start":1,"column_end":66}},{"value":"/ * [generic_once_cell](https://crates.io/crates/generic_once_cell) (bring","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12324,"byte_end":12400,"line_start":364,"line_end":364,"column_start":1,"column_end":77}},{"value":"/   your own mutex)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12401,"byte_end":12422,"line_start":365,"line_end":365,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12840,"byte_end":12846,"line_start":385,"line_end":385,"column_start":9,"column_end":15},"name":"unsync","qualname":"::unsync","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":159},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":178},{"krate":0,"index":187},{"krate":0,"index":192},{"krate":0,"index":196}],"decl_id":null,"docs":" Single-threaded version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Single-threaded version of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":12789,"byte_end":12831,"line_start":384,"line_end":384,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":117},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13668,"byte_end":13676,"line_start":413,"line_end":413,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::unsync::OnceCell","value":"OnceCell {  }","parent":null,"children":[{"krate":0,"index":119}],"decl_id":null,"docs":" A cell which can be written to only once. It is not thread safe.","sig":null,"attributes":[{"value":"/ A cell which can be written to only once. It is not thread safe.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13005,"byte_end":13073,"line_start":393,"line_end":393,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13078,"byte_end":13081,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ Unlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13086,"byte_end":13153,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/ references to the contents.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13158,"byte_end":13189,"line_start":396,"line_end":396,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13194,"byte_end":13197,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ [`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13202,"byte_end":13284,"line_start":398,"line_end":398,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13289,"byte_end":13292,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13297,"byte_end":13310,"line_start":400,"line_end":400,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13315,"byte_end":13322,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13327,"byte_end":13363,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13368,"byte_end":13371,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13376,"byte_end":13407,"line_start":404,"line_end":404,"column_start":5,"column_end":36}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13412,"byte_end":13446,"line_start":405,"line_end":405,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13451,"byte_end":13454,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let value: &String = cell.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13459,"byte_end":13505,"line_start":407,"line_end":407,"column_start":5,"column_end":51}},{"value":"/     \"Hello, World!\".to_string()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13510,"byte_end":13545,"line_start":408,"line_end":408,"column_start":5,"column_end":40}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13550,"byte_end":13557,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13562,"byte_end":13601,"line_start":410,"line_end":410,"column_start":5,"column_end":44}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13606,"byte_end":13640,"line_start":411,"line_end":411,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":13645,"byte_end":13652,"line_start":412,"line_end":412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14174,"byte_end":14181,"line_start":426,"line_end":426,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14299,"byte_end":14302,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14596,"byte_end":14601,"line_start":441,"line_end":441,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> OnceCell<T>","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2802},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14802,"byte_end":14812,"line_start":448,"line_end":448,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2803},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15101,"byte_end":15103,"line_start":457,"line_end":457,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &Self) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15278,"byte_end":15282,"line_start":465,"line_end":465,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15445,"byte_end":15448,"line_start":472,"line_end":472,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15394,"byte_end":15423,"line_start":471,"line_end":471,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15598,"byte_end":15608,"line_start":477,"line_end":477,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15541,"byte_end":15576,"line_start":476,"line_end":476,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15856,"byte_end":15859,"line_start":485,"line_end":485,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15716,"byte_end":15761,"line_start":481,"line_end":481,"column_start":9,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15770,"byte_end":15773,"line_start":482,"line_end":482,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15782,"byte_end":15822,"line_start":483,"line_end":483,"column_start":9,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15831,"byte_end":15840,"line_start":484,"line_end":484,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16917,"byte_end":16924,"line_start":510,"line_end":510,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16224,"byte_end":16277,"line_start":493,"line_end":493,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16286,"byte_end":16289,"line_start":494,"line_end":494,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16298,"byte_end":16338,"line_start":495,"line_end":495,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16347,"byte_end":16350,"line_start":496,"line_end":496,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16359,"byte_end":16437,"line_start":497,"line_end":497,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16446,"byte_end":16519,"line_start":498,"line_end":498,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16528,"byte_end":16598,"line_start":499,"line_end":499,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16607,"byte_end":16610,"line_start":500,"line_end":500,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16619,"byte_end":16626,"line_start":501,"line_end":501,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16635,"byte_end":16671,"line_start":502,"line_end":502,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16680,"byte_end":16683,"line_start":503,"line_end":503,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16692,"byte_end":16742,"line_start":504,"line_end":504,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16751,"byte_end":16777,"line_start":505,"line_end":505,"column_start":9,"column_end":35}},{"value":"/ *cell.get_mut().unwrap() = 93;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16786,"byte_end":16820,"line_start":506,"line_end":506,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(cell.get(), Some(&93));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16829,"byte_end":16867,"line_start":507,"line_end":507,"column_start":9,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16876,"byte_end":16883,"line_start":508,"line_end":508,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":16892,"byte_end":16901,"line_start":509,"line_end":509,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17616,"byte_end":17619,"line_start":532,"line_end":532,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17080,"byte_end":17126,"line_start":515,"line_end":515,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17135,"byte_end":17138,"line_start":516,"line_end":516,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17147,"byte_end":17216,"line_start":517,"line_end":517,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17225,"byte_end":17234,"line_start":518,"line_end":518,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17243,"byte_end":17246,"line_start":519,"line_end":519,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17255,"byte_end":17268,"line_start":520,"line_end":520,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17277,"byte_end":17284,"line_start":521,"line_end":521,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17293,"byte_end":17329,"line_start":522,"line_end":522,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17338,"byte_end":17341,"line_start":523,"line_end":523,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17350,"byte_end":17381,"line_start":524,"line_end":524,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17390,"byte_end":17424,"line_start":525,"line_end":525,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17433,"byte_end":17436,"line_start":526,"line_end":526,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.set(92), Ok(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17445,"byte_end":17482,"line_start":527,"line_end":527,"column_start":9,"column_end":46}},{"value":"/ assert_eq!(cell.set(62), Err(62));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17491,"byte_end":17529,"line_start":528,"line_end":528,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17538,"byte_end":17541,"line_start":529,"line_end":529,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17550,"byte_end":17584,"line_start":530,"line_end":530,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17593,"byte_end":17600,"line_start":531,"line_end":531,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18298,"byte_end":18308,"line_start":553,"line_end":553,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert(&Self, T) -> Result<&T, (&T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17812,"byte_end":17894,"line_start":539,"line_end":539,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17903,"byte_end":17906,"line_start":540,"line_end":540,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17915,"byte_end":17928,"line_start":541,"line_end":541,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17937,"byte_end":17944,"line_start":542,"line_end":542,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17953,"byte_end":17989,"line_start":543,"line_end":543,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":17998,"byte_end":18001,"line_start":544,"line_end":544,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18010,"byte_end":18041,"line_start":545,"line_end":545,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18050,"byte_end":18084,"line_start":546,"line_end":546,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18093,"byte_end":18096,"line_start":547,"line_end":547,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18105,"byte_end":18150,"line_start":548,"line_end":548,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18159,"byte_end":18211,"line_start":549,"line_end":549,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18220,"byte_end":18223,"line_start":550,"line_end":550,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18232,"byte_end":18266,"line_start":551,"line_end":551,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18275,"byte_end":18282,"line_start":552,"line_end":552,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19618,"byte_end":19629,"line_start":588,"line_end":588,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f`\n if the cell was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18879,"byte_end":18938,"line_start":567,"line_end":567,"column_start":9,"column_end":68}},{"value":"/ if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18947,"byte_end":18973,"line_start":568,"line_end":568,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18982,"byte_end":18985,"line_start":569,"line_end":569,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":18994,"byte_end":19006,"line_start":570,"line_end":570,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19015,"byte_end":19018,"line_start":571,"line_end":571,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19027,"byte_end":19097,"line_start":572,"line_end":572,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19106,"byte_end":19132,"line_start":573,"line_end":573,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19141,"byte_end":19144,"line_start":574,"line_end":574,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19153,"byte_end":19222,"line_start":575,"line_end":575,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19231,"byte_end":19257,"line_start":576,"line_end":576,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19266,"byte_end":19269,"line_start":577,"line_end":577,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19278,"byte_end":19291,"line_start":578,"line_end":578,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19300,"byte_end":19307,"line_start":579,"line_end":579,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19316,"byte_end":19352,"line_start":580,"line_end":580,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19361,"byte_end":19364,"line_start":581,"line_end":581,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19373,"byte_end":19404,"line_start":582,"line_end":582,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19413,"byte_end":19453,"line_start":583,"line_end":583,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19462,"byte_end":19489,"line_start":584,"line_end":584,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19498,"byte_end":19550,"line_start":585,"line_end":585,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19559,"byte_end":19586,"line_start":586,"line_end":586,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19595,"byte_end":19602,"line_start":587,"line_end":587,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20837,"byte_end":20852,"line_start":624,"line_end":624,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19904,"byte_end":19966,"line_start":599,"line_end":599,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":19975,"byte_end":20039,"line_start":600,"line_end":600,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20048,"byte_end":20070,"line_start":601,"line_end":601,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20079,"byte_end":20082,"line_start":602,"line_end":602,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20091,"byte_end":20103,"line_start":603,"line_end":603,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20112,"byte_end":20115,"line_start":604,"line_end":604,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20124,"byte_end":20194,"line_start":605,"line_end":605,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20203,"byte_end":20229,"line_start":606,"line_end":606,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20238,"byte_end":20241,"line_start":607,"line_end":607,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20250,"byte_end":20319,"line_start":608,"line_end":608,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20328,"byte_end":20354,"line_start":609,"line_end":609,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20363,"byte_end":20366,"line_start":610,"line_end":610,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20375,"byte_end":20388,"line_start":611,"line_end":611,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20397,"byte_end":20404,"line_start":612,"line_end":612,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20413,"byte_end":20449,"line_start":613,"line_end":613,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20458,"byte_end":20461,"line_start":614,"line_end":614,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20470,"byte_end":20501,"line_start":615,"line_end":615,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20510,"byte_end":20568,"line_start":616,"line_end":616,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20577,"byte_end":20611,"line_start":617,"line_end":617,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20620,"byte_end":20680,"line_start":618,"line_end":618,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20689,"byte_end":20703,"line_start":619,"line_end":619,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20712,"byte_end":20719,"line_start":620,"line_end":620,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20728,"byte_end":20759,"line_start":621,"line_end":621,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20768,"byte_end":20805,"line_start":622,"line_end":622,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":20814,"byte_end":20821,"line_start":623,"line_end":623,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22670,"byte_end":22674,"line_start":669,"line_end":669,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21523,"byte_end":21608,"line_start":640,"line_end":640,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21617,"byte_end":21620,"line_start":641,"line_end":641,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21629,"byte_end":21708,"line_start":642,"line_end":642,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21717,"byte_end":21720,"line_start":643,"line_end":643,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21729,"byte_end":21743,"line_start":644,"line_end":644,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21752,"byte_end":21755,"line_start":645,"line_end":645,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21764,"byte_end":21771,"line_start":646,"line_end":646,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21780,"byte_end":21816,"line_start":647,"line_end":647,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21825,"byte_end":21828,"line_start":648,"line_end":648,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21837,"byte_end":21890,"line_start":649,"line_end":649,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21899,"byte_end":21933,"line_start":650,"line_end":650,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21942,"byte_end":21945,"line_start":651,"line_end":651,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21954,"byte_end":21989,"line_start":652,"line_end":652,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":21998,"byte_end":22041,"line_start":653,"line_end":653,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22050,"byte_end":22105,"line_start":654,"line_end":654,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22114,"byte_end":22147,"line_start":655,"line_end":655,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22156,"byte_end":22163,"line_start":656,"line_end":656,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22172,"byte_end":22175,"line_start":657,"line_end":657,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22184,"byte_end":22262,"line_start":658,"line_end":658,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22271,"byte_end":22344,"line_start":659,"line_end":659,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22353,"byte_end":22423,"line_start":660,"line_end":660,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22432,"byte_end":22435,"line_start":661,"line_end":661,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22444,"byte_end":22451,"line_start":662,"line_end":662,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22460,"byte_end":22496,"line_start":663,"line_end":663,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22505,"byte_end":22508,"line_start":664,"line_end":664,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22517,"byte_end":22567,"line_start":665,"line_end":665,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22576,"byte_end":22602,"line_start":666,"line_end":666,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22611,"byte_end":22638,"line_start":667,"line_end":667,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22647,"byte_end":22654,"line_start":668,"line_end":668,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23313,"byte_end":23323,"line_start":689,"line_end":689,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22761,"byte_end":22818,"line_start":673,"line_end":673,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22827,"byte_end":22830,"line_start":674,"line_end":674,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22839,"byte_end":22880,"line_start":675,"line_end":675,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22889,"byte_end":22892,"line_start":676,"line_end":676,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22901,"byte_end":22915,"line_start":677,"line_end":677,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22924,"byte_end":22927,"line_start":678,"line_end":678,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22936,"byte_end":22943,"line_start":679,"line_end":679,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22952,"byte_end":22988,"line_start":680,"line_end":680,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":22997,"byte_end":23000,"line_start":681,"line_end":681,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23009,"byte_end":23058,"line_start":682,"line_end":682,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23067,"byte_end":23107,"line_start":683,"line_end":683,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23116,"byte_end":23119,"line_start":684,"line_end":684,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23128,"byte_end":23159,"line_start":685,"line_end":685,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23168,"byte_end":23211,"line_start":686,"line_end":686,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23220,"byte_end":23281,"line_start":687,"line_end":687,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23290,"byte_end":23297,"line_start":688,"line_end":688,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":159},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24050,"byte_end":24054,"line_start":716,"line_end":716,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::unsync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23583,"byte_end":23636,"line_start":696,"line_end":696,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23641,"byte_end":23644,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23649,"byte_end":23662,"line_start":698,"line_end":698,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23667,"byte_end":23674,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23679,"byte_end":23711,"line_start":700,"line_end":700,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23716,"byte_end":23719,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let lazy: Lazy<i32> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23724,"byte_end":23764,"line_start":702,"line_end":702,"column_start":5,"column_end":45}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23769,"byte_end":23802,"line_start":703,"line_end":703,"column_start":5,"column_end":38}},{"value":"/     92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23807,"byte_end":23817,"line_start":704,"line_end":704,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23822,"byte_end":23829,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"/ println!(\"ready\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23834,"byte_end":23856,"line_start":706,"line_end":706,"column_start":5,"column_end":27}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23861,"byte_end":23887,"line_start":707,"line_end":707,"column_start":5,"column_end":31}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23892,"byte_end":23918,"line_start":708,"line_end":708,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23923,"byte_end":23926,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ // Prints:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23931,"byte_end":23945,"line_start":710,"line_end":710,"column_start":5,"column_end":19}},{"value":"/ //   ready","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23950,"byte_end":23964,"line_start":711,"line_end":711,"column_start":5,"column_end":19}},{"value":"/ //   initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23969,"byte_end":23990,"line_start":712,"line_end":712,"column_start":5,"column_end":26}},{"value":"/ //   92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":23995,"byte_end":24006,"line_start":713,"line_end":713,"column_start":5,"column_end":16}},{"value":"/ //   92","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24011,"byte_end":24022,"line_start":714,"line_end":714,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24027,"byte_end":24034,"line_start":715,"line_end":715,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24302,"byte_end":24305,"line_start":724,"line_end":724,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24932,"byte_end":24935,"line_start":744,"line_end":744,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing function.","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24498,"byte_end":24564,"line_start":730,"line_end":730,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24573,"byte_end":24576,"line_start":731,"line_end":731,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24585,"byte_end":24598,"line_start":732,"line_end":732,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24607,"byte_end":24614,"line_start":733,"line_end":733,"column_start":9,"column_end":16}},{"value":"/ # fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24623,"byte_end":24640,"line_start":734,"line_end":734,"column_start":9,"column_end":26}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24649,"byte_end":24681,"line_start":735,"line_end":735,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24690,"byte_end":24693,"line_start":736,"line_end":736,"column_start":9,"column_end":12}},{"value":"/ let hello = \"Hello, World!\".to_string();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24702,"byte_end":24746,"line_start":737,"line_end":737,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24755,"byte_end":24758,"line_start":738,"line_end":738,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| hello.to_uppercase());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24767,"byte_end":24817,"line_start":739,"line_end":739,"column_start":9,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24826,"byte_end":24829,"line_start":740,"line_end":740,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(&*lazy, \"HELLO, WORLD!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24838,"byte_end":24878,"line_start":741,"line_end":741,"column_start":9,"column_end":49}},{"value":"/ # }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24887,"byte_end":24894,"line_start":742,"line_end":742,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24903,"byte_end":24910,"line_start":743,"line_end":743,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25213,"byte_end":25223,"line_start":751,"line_end":751,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25052,"byte_end":25104,"line_start":748,"line_end":748,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25113,"byte_end":25116,"line_start":749,"line_end":749,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25125,"byte_end":25197,"line_start":750,"line_end":750,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26007,"byte_end":26012,"line_start":775,"line_end":775,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25557,"byte_end":25628,"line_start":761,"line_end":761,"column_start":9,"column_end":80}},{"value":"/ the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25637,"byte_end":25652,"line_start":762,"line_end":762,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25661,"byte_end":25664,"line_start":763,"line_end":763,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25673,"byte_end":25733,"line_start":764,"line_end":764,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25742,"byte_end":25745,"line_start":765,"line_end":765,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25754,"byte_end":25767,"line_start":766,"line_end":766,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25776,"byte_end":25783,"line_start":767,"line_end":767,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25792,"byte_end":25824,"line_start":768,"line_end":768,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25833,"byte_end":25836,"line_start":769,"line_end":769,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25845,"byte_end":25877,"line_start":770,"line_end":770,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25886,"byte_end":25889,"line_start":771,"line_end":771,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25898,"byte_end":25938,"line_start":772,"line_end":772,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25947,"byte_end":25975,"line_start":773,"line_end":773,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25984,"byte_end":25991,"line_start":774,"line_end":774,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26717,"byte_end":26726,"line_start":796,"line_end":796,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut(&mut Lazy<T, F>) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a mutable reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a mutable reference to","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26246,"byte_end":26325,"line_start":782,"line_end":782,"column_start":9,"column_end":88}},{"value":"/ the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26334,"byte_end":26349,"line_start":783,"line_end":783,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26358,"byte_end":26361,"line_start":784,"line_end":784,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `DerefMut` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26370,"byte_end":26433,"line_start":785,"line_end":785,"column_start":9,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26442,"byte_end":26445,"line_start":786,"line_end":786,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26454,"byte_end":26467,"line_start":787,"line_end":787,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26476,"byte_end":26483,"line_start":788,"line_end":788,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26492,"byte_end":26524,"line_start":789,"line_end":789,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26533,"byte_end":26536,"line_start":790,"line_end":790,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26545,"byte_end":26581,"line_start":791,"line_end":791,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26590,"byte_end":26593,"line_start":792,"line_end":792,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26602,"byte_end":26650,"line_start":793,"line_end":793,"column_start":9,"column_end":57}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26659,"byte_end":26685,"line_start":794,"line_end":794,"column_start":9,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":26694,"byte_end":26701,"line_start":795,"line_end":795,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27607,"byte_end":27610,"line_start":820,"line_end":820,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get(&Lazy<T, F>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27165,"byte_end":27223,"line_start":807,"line_end":807,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27232,"byte_end":27281,"line_start":808,"line_end":808,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27290,"byte_end":27293,"line_start":809,"line_end":809,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27302,"byte_end":27315,"line_start":810,"line_end":810,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27324,"byte_end":27331,"line_start":811,"line_end":811,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27340,"byte_end":27372,"line_start":812,"line_end":812,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27381,"byte_end":27384,"line_start":813,"line_end":813,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27393,"byte_end":27425,"line_start":814,"line_end":814,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27434,"byte_end":27437,"line_start":815,"line_end":815,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27446,"byte_end":27485,"line_start":816,"line_end":816,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27494,"byte_end":27522,"line_start":817,"line_end":817,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27531,"byte_end":27575,"line_start":818,"line_end":818,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27584,"byte_end":27591,"line_start":819,"line_end":819,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28165,"byte_end":28172,"line_start":837,"line_end":837,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut(&mut Lazy<T, F>) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27693,"byte_end":27759,"line_start":824,"line_end":824,"column_start":9,"column_end":75}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27768,"byte_end":27817,"line_start":825,"line_end":825,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27826,"byte_end":27829,"line_start":826,"line_end":826,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27838,"byte_end":27851,"line_start":827,"line_end":827,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27860,"byte_end":27867,"line_start":828,"line_end":828,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27876,"byte_end":27908,"line_start":829,"line_end":829,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27917,"byte_end":27920,"line_start":830,"line_end":830,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27929,"byte_end":27965,"line_start":831,"line_end":831,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27974,"byte_end":27977,"line_start":832,"line_end":832,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":27986,"byte_end":28033,"line_start":833,"line_end":833,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28042,"byte_end":28068,"line_start":834,"line_end":834,"column_start":9,"column_end":35}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28077,"byte_end":28133,"line_start":835,"line_end":835,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28142,"byte_end":28149,"line_start":836,"line_end":836,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28354,"byte_end":28359,"line_start":844,"line_end":844,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28489,"byte_end":28498,"line_start":850,"line_end":850,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28710,"byte_end":28717,"line_start":857,"line_end":857,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28624,"byte_end":28698,"line_start":856,"line_end":856,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":199},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28902,"byte_end":28906,"line_start":865,"line_end":865,"column_start":9,"column_end":13},"name":"sync","qualname":"::sync","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":265},{"krate":0,"index":270},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":287},{"krate":0,"index":296},{"krate":0,"index":301},{"krate":0,"index":305},{"krate":0,"index":308}],"decl_id":null,"docs":" Thread-safe, blocking version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Thread-safe, blocking version of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28786,"byte_end":28834,"line_start":863,"line_end":863,"column_start":1,"column_end":49}},{"value":"cfg(any(feature = \"std\", feature = \"critical-section\"))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28835,"byte_end":28893,"line_start":864,"line_end":864,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":223},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30147,"byte_end":30155,"line_start":903,"line_end":903,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::sync::OnceCell","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29075,"byte_end":29132,"line_start":875,"line_end":875,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29137,"byte_end":29140,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ `OnceCell` provides `&` references to the contents without RAII guards.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29145,"byte_end":29220,"line_start":877,"line_end":877,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29225,"byte_end":29228,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ Reading a non-`None` value out of `OnceCell` establishes a","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29233,"byte_end":29295,"line_start":879,"line_end":879,"column_start":5,"column_end":67}},{"value":"/ happens-before relationship with a corresponding write. For example, if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29300,"byte_end":29375,"line_start":880,"line_end":880,"column_start":5,"column_end":80}},{"value":"/ thread A initializes the cell with `get_or_init(f)`, and thread B","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29380,"byte_end":29449,"line_start":881,"line_end":881,"column_start":5,"column_end":74}},{"value":"/ subsequently reads the result of this call, B also observes all the side","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29454,"byte_end":29530,"line_start":882,"line_end":882,"column_start":5,"column_end":81}},{"value":"/ effects of `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29535,"byte_end":29554,"line_start":883,"line_end":883,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29559,"byte_end":29562,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29567,"byte_end":29580,"line_start":885,"line_end":885,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29585,"byte_end":29592,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29597,"byte_end":29631,"line_start":887,"line_end":887,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29636,"byte_end":29639,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ static CELL: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29644,"byte_end":29696,"line_start":889,"line_end":889,"column_start":5,"column_end":57}},{"value":"/ assert!(CELL.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29701,"byte_end":29735,"line_start":890,"line_end":890,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29740,"byte_end":29743,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29748,"byte_end":29775,"line_start":892,"line_end":892,"column_start":5,"column_end":32}},{"value":"/     let value: &String = CELL.get_or_init(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29780,"byte_end":29830,"line_start":893,"line_end":893,"column_start":5,"column_end":55}},{"value":"/         \"Hello, World!\".to_string()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29835,"byte_end":29874,"line_start":894,"line_end":894,"column_start":5,"column_end":44}},{"value":"/     });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29879,"byte_end":29890,"line_start":895,"line_end":895,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29895,"byte_end":29938,"line_start":896,"line_end":896,"column_start":5,"column_end":48}},{"value":"/ }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29943,"byte_end":29966,"line_start":897,"line_end":897,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29971,"byte_end":29974,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ let value: Option<&String> = CELL.get();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":29979,"byte_end":30023,"line_start":899,"line_end":899,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30028,"byte_end":30057,"line_start":900,"line_end":900,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.unwrap().as_str(), \"Hello, World!\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30062,"byte_end":30119,"line_start":901,"line_end":901,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30124,"byte_end":30131,"line_start":902,"line_end":902,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30218,"byte_end":30225,"line_start":906,"line_end":906,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> OnceCell<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30354,"byte_end":30357,"line_start":912,"line_end":912,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30651,"byte_end":30656,"line_start":921,"line_end":921,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> OnceCell<T>","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2802},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30849,"byte_end":30859,"line_start":928,"line_end":928,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2803},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31135,"byte_end":31139,"line_start":937,"line_end":937,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31275,"byte_end":31277,"line_start":943,"line_end":943,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &OnceCell<T>) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31495,"byte_end":31498,"line_start":952,"line_end":952,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31444,"byte_end":31473,"line_start":951,"line_end":951,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31627,"byte_end":31637,"line_start":957,"line_end":957,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31570,"byte_end":31605,"line_start":956,"line_end":956,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31913,"byte_end":31916,"line_start":965,"line_end":965,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31729,"byte_end":31776,"line_start":961,"line_end":961,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31785,"byte_end":31788,"line_start":962,"line_end":962,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty, or being initialized. This","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31797,"byte_end":31864,"line_start":963,"line_end":963,"column_start":9,"column_end":76}},{"value":"/ method never blocks.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31873,"byte_end":31897,"line_start":964,"line_end":964,"column_start":9,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32957,"byte_end":32961,"line_start":995,"line_end":995,"column_start":16,"column_end":20},"name":"wait","qualname":"<OnceCell<T>>::wait","value":"fn wait(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value, blocking the current\n thread until it is set.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value, blocking the current","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32160,"byte_end":32228,"line_start":974,"line_end":974,"column_start":9,"column_end":77}},{"value":"/ thread until it is set.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32237,"byte_end":32264,"line_start":975,"line_end":975,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32273,"byte_end":32276,"line_start":976,"line_end":976,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32285,"byte_end":32292,"line_start":977,"line_end":977,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32301,"byte_end":32335,"line_start":978,"line_end":978,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32344,"byte_end":32347,"line_start":979,"line_end":979,"column_start":9,"column_end":12}},{"value":"/ let mut cell = std::sync::Arc::new(OnceCell::new());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32356,"byte_end":32412,"line_start":980,"line_end":980,"column_start":9,"column_end":65}},{"value":"/ let t = std::thread::spawn({","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32421,"byte_end":32453,"line_start":981,"line_end":981,"column_start":9,"column_end":41}},{"value":"/     let cell = std::sync::Arc::clone(&cell);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32462,"byte_end":32510,"line_start":982,"line_end":982,"column_start":9,"column_end":57}},{"value":"/     move || cell.set(92).unwrap()","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32519,"byte_end":32556,"line_start":983,"line_end":983,"column_start":9,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32565,"byte_end":32572,"line_start":984,"line_end":984,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32581,"byte_end":32584,"line_start":985,"line_end":985,"column_start":9,"column_end":12}},{"value":"/ // Returns immediately, but might return None.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32593,"byte_end":32643,"line_start":986,"line_end":986,"column_start":9,"column_end":59}},{"value":"/ let _value_or_none = cell.get();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32652,"byte_end":32688,"line_start":987,"line_end":987,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32697,"byte_end":32700,"line_start":988,"line_end":988,"column_start":9,"column_end":12}},{"value":"/ // Will return 92, but might block until the other thread does `.set`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32709,"byte_end":32783,"line_start":989,"line_end":989,"column_start":9,"column_end":83}},{"value":"/ let value: &u32 = cell.wait();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32792,"byte_end":32826,"line_start":990,"line_end":990,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(*value, 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32835,"byte_end":32862,"line_start":991,"line_end":991,"column_start":9,"column_end":36}},{"value":"/ t.join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32871,"byte_end":32893,"line_start":992,"line_end":992,"column_start":9,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32902,"byte_end":32909,"line_start":993,"line_end":993,"column_start":9,"column_end":16}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":32918,"byte_end":32941,"line_start":994,"line_end":994,"column_start":9,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33930,"byte_end":33937,"line_start":1021,"line_end":1021,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33291,"byte_end":33346,"line_start":1005,"line_end":1005,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33355,"byte_end":33358,"line_start":1006,"line_end":1006,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33367,"byte_end":33407,"line_start":1007,"line_end":1007,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33416,"byte_end":33419,"line_start":1008,"line_end":1008,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33428,"byte_end":33506,"line_start":1009,"line_end":1009,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33515,"byte_end":33588,"line_start":1010,"line_end":1010,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33597,"byte_end":33667,"line_start":1011,"line_end":1011,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33676,"byte_end":33679,"line_start":1012,"line_end":1012,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33688,"byte_end":33695,"line_start":1013,"line_end":1013,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33704,"byte_end":33738,"line_start":1014,"line_end":1014,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33747,"byte_end":33750,"line_start":1015,"line_end":1015,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33759,"byte_end":33809,"line_start":1016,"line_end":1016,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33818,"byte_end":33844,"line_start":1017,"line_end":1017,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33853,"byte_end":33880,"line_start":1018,"line_end":1018,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33889,"byte_end":33896,"line_start":1019,"line_end":1019,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":33905,"byte_end":33914,"line_start":1020,"line_end":1020,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34357,"byte_end":34370,"line_start":1033,"line_end":1033,"column_start":23,"column_end":36},"name":"get_unchecked","qualname":"<OnceCell<T>>::get_unchecked","value":"unsafe fn get_unchecked(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get the reference to the underlying value, without checking if the\n cell is initialized.","sig":null,"attributes":[{"value":"/ Get the reference to the underlying value, without checking if the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34017,"byte_end":34087,"line_start":1025,"line_end":1025,"column_start":9,"column_end":79}},{"value":"/ cell is initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34096,"byte_end":34120,"line_start":1026,"line_end":1026,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34129,"byte_end":34132,"line_start":1027,"line_end":1027,"column_start":9,"column_end":12}},{"value":"/ # Safety","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34141,"byte_end":34153,"line_start":1028,"line_end":1028,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34162,"byte_end":34165,"line_start":1029,"line_end":1029,"column_start":9,"column_end":12}},{"value":"/ Caller must ensure that the cell is in initialized state, and that","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34174,"byte_end":34244,"line_start":1030,"line_end":1030,"column_start":9,"column_end":79}},{"value":"/ the contents are acquired by (synchronized to) this thread.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34253,"byte_end":34316,"line_start":1031,"line_end":1031,"column_start":9,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34325,"byte_end":34334,"line_start":1032,"line_end":1032,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35154,"byte_end":35157,"line_start":1060,"line_end":1060,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34440,"byte_end":34486,"line_start":1037,"line_end":1037,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34495,"byte_end":34498,"line_start":1038,"line_end":1038,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34507,"byte_end":34576,"line_start":1039,"line_end":1039,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34585,"byte_end":34594,"line_start":1040,"line_end":1040,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34603,"byte_end":34606,"line_start":1041,"line_end":1041,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34615,"byte_end":34628,"line_start":1042,"line_end":1042,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34637,"byte_end":34640,"line_start":1043,"line_end":1043,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34649,"byte_end":34656,"line_start":1044,"line_end":1044,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34665,"byte_end":34699,"line_start":1045,"line_end":1045,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34708,"byte_end":34711,"line_start":1046,"line_end":1046,"column_start":9,"column_end":12}},{"value":"/ static CELL: OnceCell<i32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34720,"byte_end":34769,"line_start":1047,"line_end":1047,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34778,"byte_end":34781,"line_start":1048,"line_end":1048,"column_start":9,"column_end":12}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34790,"byte_end":34805,"line_start":1049,"line_end":1049,"column_start":9,"column_end":24}},{"value":"/     assert!(CELL.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34814,"byte_end":34852,"line_start":1050,"line_end":1050,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34861,"byte_end":34864,"line_start":1051,"line_end":1051,"column_start":9,"column_end":12}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34873,"byte_end":34904,"line_start":1052,"line_end":1052,"column_start":9,"column_end":40}},{"value":"/         assert_eq!(CELL.set(92), Ok(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34913,"byte_end":34958,"line_start":1053,"line_end":1053,"column_start":9,"column_end":54}},{"value":"/     }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":34967,"byte_end":34994,"line_start":1054,"line_end":1054,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35003,"byte_end":35006,"line_start":1055,"line_end":1055,"column_start":9,"column_end":12}},{"value":"/     assert_eq!(CELL.set(62), Err(62));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35015,"byte_end":35057,"line_start":1056,"line_end":1056,"column_start":9,"column_end":51}},{"value":"/     assert_eq!(CELL.get(), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35066,"byte_end":35108,"line_start":1057,"line_end":1057,"column_start":9,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35117,"byte_end":35122,"line_start":1058,"line_end":1058,"column_start":9,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35131,"byte_end":35138,"line_start":1059,"line_end":1059,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35848,"byte_end":35858,"line_start":1082,"line_end":1082,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert(&Self, T) -> Result<&T, (&T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35350,"byte_end":35432,"line_start":1067,"line_end":1067,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35441,"byte_end":35444,"line_start":1068,"line_end":1068,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35453,"byte_end":35466,"line_start":1069,"line_end":1069,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35475,"byte_end":35478,"line_start":1070,"line_end":1070,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35487,"byte_end":35494,"line_start":1071,"line_end":1071,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35503,"byte_end":35539,"line_start":1072,"line_end":1072,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35548,"byte_end":35551,"line_start":1073,"line_end":1073,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35560,"byte_end":35591,"line_start":1074,"line_end":1074,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35600,"byte_end":35634,"line_start":1075,"line_end":1075,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35643,"byte_end":35646,"line_start":1076,"line_end":1076,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35655,"byte_end":35700,"line_start":1077,"line_end":1077,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35709,"byte_end":35761,"line_start":1078,"line_end":1078,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35770,"byte_end":35773,"line_start":1079,"line_end":1079,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35782,"byte_end":35816,"line_start":1080,"line_end":1080,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":35825,"byte_end":35832,"line_start":1081,"line_end":1081,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37207,"byte_end":37218,"line_start":1117,"line_end":1117,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell\n was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36171,"byte_end":36242,"line_start":1091,"line_end":1091,"column_start":9,"column_end":80}},{"value":"/ was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36251,"byte_end":36265,"line_start":1092,"line_end":1092,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36274,"byte_end":36277,"line_start":1093,"line_end":1093,"column_start":9,"column_end":12}},{"value":"/ Many threads may call `get_or_init` concurrently with different","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36286,"byte_end":36353,"line_start":1094,"line_end":1094,"column_start":9,"column_end":76}},{"value":"/ initializing functions, but it is guaranteed that only one function","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36362,"byte_end":36433,"line_start":1095,"line_end":1095,"column_start":9,"column_end":80}},{"value":"/ will be executed.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36442,"byte_end":36463,"line_start":1096,"line_end":1096,"column_start":9,"column_end":30}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36472,"byte_end":36475,"line_start":1097,"line_end":1097,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36484,"byte_end":36496,"line_start":1098,"line_end":1098,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36505,"byte_end":36508,"line_start":1099,"line_end":1099,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36517,"byte_end":36587,"line_start":1100,"line_end":1100,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36596,"byte_end":36622,"line_start":1101,"line_end":1101,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36631,"byte_end":36634,"line_start":1102,"line_end":1102,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. The","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36643,"byte_end":36710,"line_start":1103,"line_end":1103,"column_start":9,"column_end":76}},{"value":"/ exact outcome is unspecified. Current implementation deadlocks, but","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36719,"byte_end":36790,"line_start":1104,"line_end":1104,"column_start":9,"column_end":80}},{"value":"/ this may be changed to a panic in the future.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36799,"byte_end":36848,"line_start":1105,"line_end":1105,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36857,"byte_end":36860,"line_start":1106,"line_end":1106,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36869,"byte_end":36882,"line_start":1107,"line_end":1107,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36891,"byte_end":36898,"line_start":1108,"line_end":1108,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36907,"byte_end":36941,"line_start":1109,"line_end":1109,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36950,"byte_end":36953,"line_start":1110,"line_end":1110,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":36962,"byte_end":36993,"line_start":1111,"line_end":1111,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37002,"byte_end":37042,"line_start":1112,"line_end":1112,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37051,"byte_end":37078,"line_start":1113,"line_end":1113,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37087,"byte_end":37139,"line_start":1114,"line_end":1114,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37148,"byte_end":37175,"line_start":1115,"line_end":1115,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37184,"byte_end":37191,"line_start":1116,"line_end":1116,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38525,"byte_end":38540,"line_start":1154,"line_end":1154,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37493,"byte_end":37555,"line_start":1128,"line_end":1128,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37564,"byte_end":37628,"line_start":1129,"line_end":1129,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37637,"byte_end":37659,"line_start":1130,"line_end":1130,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37668,"byte_end":37671,"line_start":1131,"line_end":1131,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37680,"byte_end":37692,"line_start":1132,"line_end":1132,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37701,"byte_end":37704,"line_start":1133,"line_end":1133,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37713,"byte_end":37774,"line_start":1134,"line_end":1134,"column_start":9,"column_end":70}},{"value":"/ the cell remains uninitialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37783,"byte_end":37818,"line_start":1135,"line_end":1135,"column_start":9,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37827,"byte_end":37830,"line_start":1136,"line_end":1136,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37839,"byte_end":37902,"line_start":1137,"line_end":1137,"column_start":9,"column_end":72}},{"value":"/ The exact outcome is unspecified. Current implementation","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37911,"byte_end":37971,"line_start":1138,"line_end":1138,"column_start":9,"column_end":69}},{"value":"/ deadlocks, but this may be changed to a panic in the future.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":37980,"byte_end":38044,"line_start":1139,"line_end":1139,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38053,"byte_end":38056,"line_start":1140,"line_end":1140,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38065,"byte_end":38078,"line_start":1141,"line_end":1141,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38087,"byte_end":38094,"line_start":1142,"line_end":1142,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38103,"byte_end":38137,"line_start":1143,"line_end":1143,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38146,"byte_end":38149,"line_start":1144,"line_end":1144,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38158,"byte_end":38189,"line_start":1145,"line_end":1145,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38198,"byte_end":38256,"line_start":1146,"line_end":1146,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38265,"byte_end":38299,"line_start":1147,"line_end":1147,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38308,"byte_end":38368,"line_start":1148,"line_end":1148,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38377,"byte_end":38391,"line_start":1149,"line_end":1149,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38400,"byte_end":38407,"line_start":1150,"line_end":1150,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38416,"byte_end":38447,"line_start":1151,"line_end":1151,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38456,"byte_end":38493,"line_start":1152,"line_end":1152,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38502,"byte_end":38509,"line_start":1153,"line_end":1153,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40112,"byte_end":40116,"line_start":1199,"line_end":1199,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":38969,"byte_end":39054,"line_start":1170,"line_end":1170,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39063,"byte_end":39066,"line_start":1171,"line_end":1171,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39075,"byte_end":39154,"line_start":1172,"line_end":1172,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39163,"byte_end":39166,"line_start":1173,"line_end":1173,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39175,"byte_end":39189,"line_start":1174,"line_end":1174,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39198,"byte_end":39201,"line_start":1175,"line_end":1175,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39210,"byte_end":39217,"line_start":1176,"line_end":1176,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39226,"byte_end":39260,"line_start":1177,"line_end":1177,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39269,"byte_end":39272,"line_start":1178,"line_end":1178,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39281,"byte_end":39334,"line_start":1179,"line_end":1179,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39343,"byte_end":39377,"line_start":1180,"line_end":1180,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39386,"byte_end":39389,"line_start":1181,"line_end":1181,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39398,"byte_end":39433,"line_start":1182,"line_end":1182,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39442,"byte_end":39485,"line_start":1183,"line_end":1183,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39494,"byte_end":39549,"line_start":1184,"line_end":1184,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39558,"byte_end":39591,"line_start":1185,"line_end":1185,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39600,"byte_end":39607,"line_start":1186,"line_end":1186,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39616,"byte_end":39619,"line_start":1187,"line_end":1187,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39628,"byte_end":39706,"line_start":1188,"line_end":1188,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39715,"byte_end":39788,"line_start":1189,"line_end":1189,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39797,"byte_end":39867,"line_start":1190,"line_end":1190,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39876,"byte_end":39879,"line_start":1191,"line_end":1191,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39888,"byte_end":39895,"line_start":1192,"line_end":1192,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39904,"byte_end":39938,"line_start":1193,"line_end":1193,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39947,"byte_end":39950,"line_start":1194,"line_end":1194,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":39959,"byte_end":40009,"line_start":1195,"line_end":1195,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40018,"byte_end":40044,"line_start":1196,"line_end":1196,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40053,"byte_end":40080,"line_start":1197,"line_end":1197,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40089,"byte_end":40096,"line_start":1198,"line_end":1198,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40759,"byte_end":40769,"line_start":1219,"line_end":1219,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value. Returns\n `None` if the cell was empty.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value. Returns","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40203,"byte_end":40268,"line_start":1203,"line_end":1203,"column_start":9,"column_end":74}},{"value":"/ `None` if the cell was empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40277,"byte_end":40310,"line_start":1204,"line_end":1204,"column_start":9,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40319,"byte_end":40322,"line_start":1205,"line_end":1205,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40331,"byte_end":40345,"line_start":1206,"line_end":1206,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40354,"byte_end":40357,"line_start":1207,"line_end":1207,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40366,"byte_end":40373,"line_start":1208,"line_end":1208,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40382,"byte_end":40416,"line_start":1209,"line_end":1209,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40425,"byte_end":40428,"line_start":1210,"line_end":1210,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40437,"byte_end":40486,"line_start":1211,"line_end":1211,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40495,"byte_end":40535,"line_start":1212,"line_end":1212,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40544,"byte_end":40547,"line_start":1213,"line_end":1213,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40556,"byte_end":40587,"line_start":1214,"line_end":1214,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40596,"byte_end":40639,"line_start":1215,"line_end":1215,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40648,"byte_end":40709,"line_start":1216,"line_end":1216,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40718,"byte_end":40725,"line_start":1217,"line_end":1217,"column_start":9,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40734,"byte_end":40743,"line_start":1218,"line_end":1218,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41781,"byte_end":41785,"line_start":1257,"line_end":1257,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::sync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40844,"byte_end":40897,"line_start":1224,"line_end":1224,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40902,"byte_end":40905,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40910,"byte_end":40966,"line_start":1226,"line_end":1226,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40971,"byte_end":40974,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40979,"byte_end":40992,"line_start":1228,"line_end":1228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":40997,"byte_end":41000,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41005,"byte_end":41012,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41017,"byte_end":41051,"line_start":1231,"line_end":1231,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41056,"byte_end":41059,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41064,"byte_end":41094,"line_start":1233,"line_end":1233,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41099,"byte_end":41102,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41107,"byte_end":41170,"line_start":1235,"line_end":1235,"column_start":5,"column_end":68}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41175,"byte_end":41208,"line_start":1236,"line_end":1236,"column_start":5,"column_end":38}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41213,"byte_end":41248,"line_start":1237,"line_end":1237,"column_start":5,"column_end":40}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41253,"byte_end":41295,"line_start":1238,"line_end":1238,"column_start":5,"column_end":47}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41300,"byte_end":41343,"line_start":1239,"line_end":1239,"column_start":5,"column_end":48}},{"value":"/     m","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41348,"byte_end":41357,"line_start":1240,"line_end":1240,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41362,"byte_end":41369,"line_start":1241,"line_end":1241,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41374,"byte_end":41377,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41382,"byte_end":41397,"line_start":1243,"line_end":1243,"column_start":5,"column_end":20}},{"value":"/     println!(\"ready\");","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41402,"byte_end":41428,"line_start":1244,"line_end":1244,"column_start":5,"column_end":31}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41433,"byte_end":41464,"line_start":1245,"line_end":1245,"column_start":5,"column_end":36}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41469,"byte_end":41516,"line_start":1246,"line_end":1246,"column_start":5,"column_end":52}},{"value":"/     }).join().unwrap();","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41521,"byte_end":41548,"line_start":1247,"line_end":1247,"column_start":5,"column_end":32}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41553,"byte_end":41596,"line_start":1248,"line_end":1248,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41601,"byte_end":41604,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/     // Prints:","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41609,"byte_end":41627,"line_start":1250,"line_end":1250,"column_start":5,"column_end":23}},{"value":"/     //   ready","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41632,"byte_end":41650,"line_start":1251,"line_end":1251,"column_start":5,"column_end":23}},{"value":"/     //   initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41655,"byte_end":41680,"line_start":1252,"line_end":1252,"column_start":5,"column_end":30}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41685,"byte_end":41711,"line_start":1253,"line_end":1253,"column_start":5,"column_end":31}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41716,"byte_end":41743,"line_start":1254,"line_end":1254,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41748,"byte_end":41753,"line_start":1255,"line_end":1255,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41758,"byte_end":41765,"line_start":1256,"line_end":1256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41937,"byte_end":41940,"line_start":1263,"line_end":1263,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42706,"byte_end":42709,"line_start":1280,"line_end":1280,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42606,"byte_end":42662,"line_start":1278,"line_end":1278,"column_start":9,"column_end":65}},{"value":"/ function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42671,"byte_end":42684,"line_start":1279,"line_end":1279,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42981,"byte_end":42991,"line_start":1287,"line_end":1287,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42820,"byte_end":42872,"line_start":1284,"line_end":1284,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42881,"byte_end":42884,"line_start":1285,"line_end":1285,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42893,"byte_end":42965,"line_start":1286,"line_end":1286,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43761,"byte_end":43766,"line_start":1310,"line_end":1310,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43325,"byte_end":43373,"line_start":1297,"line_end":1297,"column_start":9,"column_end":57}},{"value":"/ returns a reference to the result. This is equivalent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43382,"byte_end":43439,"line_start":1298,"line_end":1298,"column_start":9,"column_end":66}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43448,"byte_end":43489,"line_start":1299,"line_end":1299,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43498,"byte_end":43501,"line_start":1300,"line_end":1300,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43510,"byte_end":43523,"line_start":1301,"line_end":1301,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43532,"byte_end":43539,"line_start":1302,"line_end":1302,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43548,"byte_end":43578,"line_start":1303,"line_end":1303,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43587,"byte_end":43590,"line_start":1304,"line_end":1304,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43599,"byte_end":43631,"line_start":1305,"line_end":1305,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43640,"byte_end":43643,"line_start":1306,"line_end":1306,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43652,"byte_end":43692,"line_start":1307,"line_end":1307,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43701,"byte_end":43729,"line_start":1308,"line_end":1308,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43738,"byte_end":43745,"line_start":1309,"line_end":1309,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44423,"byte_end":44432,"line_start":1329,"line_end":1329,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut(&mut Lazy<T, F>) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a mutable reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44000,"byte_end":44048,"line_start":1317,"line_end":1317,"column_start":9,"column_end":57}},{"value":"/ returns a mutable reference to the result. This is equivalent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44057,"byte_end":44122,"line_start":1318,"line_end":1318,"column_start":9,"column_end":74}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44131,"byte_end":44172,"line_start":1319,"line_end":1319,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44181,"byte_end":44184,"line_start":1320,"line_end":1320,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44193,"byte_end":44206,"line_start":1321,"line_end":1321,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44215,"byte_end":44222,"line_start":1322,"line_end":1322,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44231,"byte_end":44261,"line_start":1323,"line_end":1323,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44270,"byte_end":44273,"line_start":1324,"line_end":1324,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44282,"byte_end":44318,"line_start":1325,"line_end":1325,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44327,"byte_end":44330,"line_start":1326,"line_end":1326,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &mut 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44339,"byte_end":44391,"line_start":1327,"line_end":1327,"column_start":9,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44400,"byte_end":44407,"line_start":1328,"line_end":1328,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45311,"byte_end":45314,"line_start":1353,"line_end":1353,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get(&Lazy<T, F>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44871,"byte_end":44929,"line_start":1340,"line_end":1340,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44938,"byte_end":44987,"line_start":1341,"line_end":1341,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":44996,"byte_end":44999,"line_start":1342,"line_end":1342,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45008,"byte_end":45021,"line_start":1343,"line_end":1343,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45030,"byte_end":45037,"line_start":1344,"line_end":1344,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45046,"byte_end":45076,"line_start":1345,"line_end":1345,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45085,"byte_end":45088,"line_start":1346,"line_end":1346,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45097,"byte_end":45129,"line_start":1347,"line_end":1347,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45138,"byte_end":45141,"line_start":1348,"line_end":1348,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45150,"byte_end":45189,"line_start":1349,"line_end":1349,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45198,"byte_end":45226,"line_start":1350,"line_end":1350,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45235,"byte_end":45279,"line_start":1351,"line_end":1351,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45288,"byte_end":45295,"line_start":1352,"line_end":1352,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45861,"byte_end":45868,"line_start":1370,"line_end":1370,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut(&mut Lazy<T, F>) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45397,"byte_end":45455,"line_start":1357,"line_end":1357,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45464,"byte_end":45513,"line_start":1358,"line_end":1358,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45522,"byte_end":45525,"line_start":1359,"line_end":1359,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45534,"byte_end":45547,"line_start":1360,"line_end":1360,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45556,"byte_end":45563,"line_start":1361,"line_end":1361,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45572,"byte_end":45602,"line_start":1362,"line_end":1362,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45611,"byte_end":45614,"line_start":1363,"line_end":1363,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45623,"byte_end":45659,"line_start":1364,"line_end":1364,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45668,"byte_end":45671,"line_start":1365,"line_end":1365,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45680,"byte_end":45727,"line_start":1366,"line_end":1366,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45736,"byte_end":45764,"line_start":1367,"line_end":1367,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45773,"byte_end":45829,"line_start":1368,"line_end":1368,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":45838,"byte_end":45845,"line_start":1369,"line_end":1369,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46050,"byte_end":46055,"line_start":1377,"line_end":1377,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46185,"byte_end":46194,"line_start":1383,"line_end":1383,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46406,"byte_end":46413,"line_start":1390,"line_end":1390,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46320,"byte_end":46394,"line_start":1389,"line_end":1389,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":309},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"race","qualname":"::race","value":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":335},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":346},{"krate":0,"index":359},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":375},{"krate":0,"index":389},{"krate":0,"index":392}],"decl_id":null,"docs":" Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","sig":null,"attributes":[{"value":"cfg(feature = \"race\")","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46917,"byte_end":46941,"line_start":1413,"line_end":1413,"column_start":1,"column_end":25}},{"value":"/ Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59701,"byte_end":59770,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59771,"byte_end":59774,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ If two threads race to initialize a type from the `race` module, they","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59775,"byte_end":59848,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ don't block, execute initialization function together, but only one of","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59849,"byte_end":59923,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ them stores the result.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59924,"byte_end":59951,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59952,"byte_end":59955,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This module does not require `std` feature.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":59956,"byte_end":60003,"line_start":7,"line_end":7,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60004,"byte_end":60007,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Atomic orderings","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60008,"byte_end":60030,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60031,"byte_end":60034,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ All types in this module use `Acquire` and `Release`","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60035,"byte_end":60091,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/ [atomic orderings](Ordering) for all their operations. While this is not","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60092,"byte_end":60168,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ strictly necessary for types other than `OnceBox`, it is useful for users as","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60169,"byte_end":60249,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ it allows them to be certain that after `get` or `get_or_init` returns on","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60250,"byte_end":60327,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ one thread, any side-effects caused by the setter thread prior to them","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60328,"byte_end":60402,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ calling `set` or `get_or_init` will be made visible to that thread; without","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60403,"byte_end":60482,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ it, it's possible for it to appear as if they haven't happened yet from the","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60483,"byte_end":60562,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ getter thread's perspective. This is an acceptable tradeoff to make since","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60563,"byte_end":60640,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ `Acquire` and `Release` have very little performance overhead on most","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60641,"byte_end":60714,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ architectures versus `Relaxed`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":60715,"byte_end":60750,"line_start":20,"line_end":20,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":445},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61134,"byte_end":61150,"line_start":35,"line_end":35,"column_start":12,"column_end":28},"name":"OnceNonZeroUsize","qualname":"::race::OnceNonZeroUsize","value":"OnceNonZeroUsize {  }","parent":null,"children":[{"krate":0,"index":446}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61039,"byte_end":61096,"line_start":33,"line_end":33,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61269,"byte_end":61272,"line_start":42,"line_end":42,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceNonZeroUsize>::new","value":"const fn new() -> OnceNonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61208,"byte_end":61237,"line_start":40,"line_end":40,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61242,"byte_end":61251,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61420,"byte_end":61423,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceNonZeroUsize>::get","value":"fn get(&Self) -> Option<NonZeroUsize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61364,"byte_end":61394,"line_start":46,"line_end":46,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61399,"byte_end":61408,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61718,"byte_end":61721,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceNonZeroUsize>::set","value":"fn set(&Self, NonZeroUsize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61553,"byte_end":61599,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61604,"byte_end":61607,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61612,"byte_end":61678,"line_start":55,"line_end":55,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61683,"byte_end":61692,"line_start":56,"line_end":56,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61697,"byte_end":61706,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62282,"byte_end":62293,"line_start":73,"line_end":73,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceNonZeroUsize>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> NonZeroUsize where F: FnOnce() -> NonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61993,"byte_end":62068,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62073,"byte_end":62083,"line_start":68,"line_end":68,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62088,"byte_end":62091,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62096,"byte_end":62172,"line_start":70,"line_end":70,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62177,"byte_end":62252,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62257,"byte_end":62270,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62917,"byte_end":62932,"line_start":91,"line_end":91,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceNonZeroUsize>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<NonZeroUsize, E> where\nF: FnOnce() -> Result<NonZeroUsize, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62560,"byte_end":62622,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62627,"byte_end":62691,"line_start":85,"line_end":85,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62696,"byte_end":62718,"line_start":86,"line_end":86,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62723,"byte_end":62726,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62731,"byte_end":62807,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62812,"byte_end":62887,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":62892,"byte_end":62905,"line_start":90,"line_end":90,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63662,"byte_end":63670,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"OnceBool","qualname":"::race::OnceBool","value":"OnceBool {  }","parent":null,"children":[{"krate":0,"index":452}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63567,"byte_end":63624,"line_start":112,"line_end":112,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63786,"byte_end":63789,"line_start":121,"line_end":121,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceBool>::new","value":"const fn new() -> OnceBool","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63725,"byte_end":63754,"line_start":119,"line_end":119,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63759,"byte_end":63768,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63925,"byte_end":63928,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceBool>::get","value":"fn get(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63869,"byte_end":63899,"line_start":125,"line_end":125,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63904,"byte_end":63913,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64181,"byte_end":64184,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceBool>::set","value":"fn set(&Self, bool) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64016,"byte_end":64062,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64067,"byte_end":64070,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64075,"byte_end":64141,"line_start":133,"line_end":133,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64146,"byte_end":64155,"line_start":134,"line_end":134,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64160,"byte_end":64169,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64575,"byte_end":64586,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceBool>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> bool where F: FnOnce() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64286,"byte_end":64361,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64366,"byte_end":64376,"line_start":141,"line_end":141,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64381,"byte_end":64384,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64389,"byte_end":64465,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64470,"byte_end":64545,"line_start":144,"line_end":144,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64550,"byte_end":64563,"line_start":145,"line_end":145,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65105,"byte_end":65120,"line_start":160,"line_end":160,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceBool>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<bool, E> where F: FnOnce() ->\nResult<bool, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64748,"byte_end":64810,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64815,"byte_end":64879,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64884,"byte_end":64906,"line_start":155,"line_end":155,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64911,"byte_end":64914,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":64919,"byte_end":64995,"line_start":157,"line_end":157,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65000,"byte_end":65075,"line_start":158,"line_end":158,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65080,"byte_end":65093,"line_start":159,"line_end":159,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":359},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65623,"byte_end":65630,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"OnceRef","qualname":"::race::OnceRef","value":"OnceRef {  }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65554,"byte_end":65611,"line_start":178,"line_end":178,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65885,"byte_end":65888,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"fmt","qualname":"<OnceRef as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66057,"byte_end":66064,"line_start":194,"line_end":194,"column_start":8,"column_end":15},"name":"default","qualname":"<OnceRef as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66186,"byte_end":66189,"line_start":201,"line_end":201,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceRef>::new","value":"const fn new() -> OnceRef","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66139,"byte_end":66168,"line_start":200,"line_end":200,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66359,"byte_end":66362,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceRef>::get","value":"fn get(&Self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66302,"byte_end":66347,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66640,"byte_end":66643,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceRef>::set","value":"fn set(&Self, &'a T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66486,"byte_end":66532,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66537,"byte_end":66540,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66545,"byte_end":66614,"line_start":213,"line_end":213,"column_start":5,"column_end":74}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66619,"byte_end":66628,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67250,"byte_end":67261,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceRef>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &'a T where F: FnOnce() -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66961,"byte_end":67036,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67041,"byte_end":67051,"line_start":226,"line_end":226,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67056,"byte_end":67059,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67064,"byte_end":67140,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67145,"byte_end":67220,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67225,"byte_end":67238,"line_start":230,"line_end":230,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67864,"byte_end":67879,"line_start":249,"line_end":249,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceRef>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&'a T, E> where F: FnOnce() ->\nResult<&'a T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67507,"byte_end":67569,"line_start":242,"line_end":242,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67574,"byte_end":67638,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67643,"byte_end":67665,"line_start":244,"line_end":244,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67670,"byte_end":67673,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67678,"byte_end":67754,"line_start":246,"line_end":246,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67759,"byte_end":67834,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":67839,"byte_end":67852,"line_start":248,"line_end":248,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":410},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69227,"byte_end":69234,"line_start":301,"line_end":301,"column_start":16,"column_end":23},"name":"OnceBox","qualname":"::race::once_box::OnceBox","value":"OnceBox {  }","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69154,"byte_end":69211,"line_start":300,"line_end":300,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69377,"byte_end":69380,"line_start":307,"line_end":307,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceBox<T> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":2,"index":10131},"children":[],"decl_id":{"krate":2,"index":10132},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69585,"byte_end":69592,"line_start":313,"line_end":313,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceBox<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69691,"byte_end":69695,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"name":"drop","qualname":"<OnceBox<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69953,"byte_end":69956,"line_start":329,"line_end":329,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceBox<T>>::new","value":"const fn new() -> OnceBox<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69902,"byte_end":69931,"line_start":328,"line_end":328,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70138,"byte_end":70141,"line_start":334,"line_end":334,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceBox<T>>::get","value":"fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70077,"byte_end":70122,"line_start":333,"line_end":333,"column_start":9,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70521,"byte_end":70524,"line_start":346,"line_end":346,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceBox<T>>::set","value":"fn set(&Self, Box<T>) -> Result<(), Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70351,"byte_end":70397,"line_start":342,"line_end":342,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70406,"byte_end":70409,"line_start":343,"line_end":343,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70418,"byte_end":70487,"line_start":344,"line_end":344,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70496,"byte_end":70505,"line_start":345,"line_end":345,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71303,"byte_end":71314,"line_start":367,"line_end":367,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceBox<T>>::get_or_init","value":"fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":70990,"byte_end":71065,"line_start":361,"line_end":361,"column_start":9,"column_end":84}},{"value":"/ empty.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71074,"byte_end":71084,"line_start":362,"line_end":362,"column_start":9,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71093,"byte_end":71096,"line_start":363,"line_end":363,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71105,"byte_end":71181,"line_start":364,"line_end":364,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71190,"byte_end":71265,"line_start":365,"line_end":365,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71274,"byte_end":71287,"line_start":366,"line_end":366,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71984,"byte_end":71999,"line_start":385,"line_end":385,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceBox<T>>::get_or_try_init","value":"fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<Box<T>, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71599,"byte_end":71661,"line_start":378,"line_end":378,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71670,"byte_end":71734,"line_start":379,"line_end":379,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71743,"byte_end":71765,"line_start":380,"line_end":380,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71774,"byte_end":71777,"line_start":381,"line_end":381,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71786,"byte_end":71862,"line_start":382,"line_end":382,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71871,"byte_end":71946,"line_start":383,"line_end":383,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":71955,"byte_end":71968,"line_start":384,"line_end":384,"column_start":9,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48009,"byte_end":48017,"line_start":32,"line_end":32,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48054,"byte_end":48062,"line_start":33,"line_end":33,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48124,"byte_end":48132,"line_start":35,"line_end":35,"column_start":55,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48174,"byte_end":48182,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48198,"byte_end":48206,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":52119,"byte_end":52124,"line_start":150,"line_end":150,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14055,"byte_end":14063,"line_start":422,"line_end":422,"column_start":59,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14109,"byte_end":14117,"line_start":423,"line_end":423,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14149,"byte_end":14157,"line_start":425,"line_end":425,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14274,"byte_end":14282,"line_start":431,"line_end":431,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14571,"byte_end":14579,"line_start":440,"line_end":440,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15076,"byte_end":15084,"line_start":456,"line_end":456,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15213,"byte_end":15221,"line_start":462,"line_end":462,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15253,"byte_end":15261,"line_start":464,"line_end":464,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15372,"byte_end":15380,"line_start":470,"line_end":470,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24188,"byte_end":24192,"line_start":721,"line_end":721,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24278,"byte_end":24282,"line_start":723,"line_end":723,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24477,"byte_end":24481,"line_start":729,"line_end":729,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25536,"byte_end":25540,"line_start":760,"line_end":760,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28305,"byte_end":28309,"line_start":842,"line_end":842,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28465,"byte_end":28469,"line_start":849,"line_end":849,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28606,"byte_end":28610,"line_start":855,"line_end":855,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30193,"byte_end":30201,"line_start":905,"line_end":905,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30329,"byte_end":30337,"line_start":911,"line_end":911,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30626,"byte_end":30634,"line_start":920,"line_end":920,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31110,"byte_end":31118,"line_start":936,"line_end":936,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31250,"byte_end":31258,"line_start":942,"line_end":942,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31394,"byte_end":31402,"line_start":948,"line_end":948,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31422,"byte_end":31430,"line_start":950,"line_end":950,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41913,"byte_end":41917,"line_start":1262,"line_end":1262,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42396,"byte_end":42400,"line_start":1272,"line_end":1272,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42522,"byte_end":42526,"line_start":1275,"line_end":1275,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42585,"byte_end":42589,"line_start":1277,"line_end":1277,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43304,"byte_end":43308,"line_start":1296,"line_end":1296,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46001,"byte_end":46005,"line_start":1375,"line_end":1375,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46161,"byte_end":46165,"line_start":1382,"line_end":1382,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46302,"byte_end":46306,"line_start":1388,"line_end":1388,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61185,"byte_end":61201,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63710,"byte_end":63718,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65809,"byte_end":65816,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65861,"byte_end":65868,"line_start":187,"line_end":187,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66033,"byte_end":66040,"line_start":193,"line_end":193,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66118,"byte_end":66125,"line_start":199,"line_end":199,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":385},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69353,"byte_end":69360,"line_start":306,"line_end":306,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69561,"byte_end":69568,"line_start":312,"line_end":312,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69667,"byte_end":69674,"line_start":318,"line_end":318,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69881,"byte_end":69888,"line_start":327,"line_end":327,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":72749,"byte_end":72756,"line_start":409,"line_end":409,"column_start":42,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46950,"byte_end":46954,"line_start":1414,"line_end":1414,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":309}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48009,"byte_end":48017,"line_start":32,"line_end":32,"column_start":38,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48054,"byte_end":48062,"line_start":33,"line_end":33,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48124,"byte_end":48132,"line_start":35,"line_end":35,"column_start":55,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48174,"byte_end":48182,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":9146}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":48198,"byte_end":48206,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/imp_std.rs","byte_start":52119,"byte_end":52124,"line_start":150,"line_end":150,"column_start":15,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14055,"byte_end":14063,"line_start":422,"line_end":422,"column_start":59,"column_end":67},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14109,"byte_end":14117,"line_start":423,"line_end":423,"column_start":40,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":9146}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14149,"byte_end":14157,"line_start":425,"line_end":425,"column_start":25,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14274,"byte_end":14282,"line_start":431,"line_end":431,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":14571,"byte_end":14579,"line_start":440,"line_end":440,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":2801}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15076,"byte_end":15084,"line_start":456,"line_end":456,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15213,"byte_end":15221,"line_start":462,"line_end":462,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":2836}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15253,"byte_end":15261,"line_start":464,"line_end":464,"column_start":25,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":15372,"byte_end":15380,"line_start":470,"line_end":470,"column_start":13,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24188,"byte_end":24192,"line_start":721,"line_end":721,"column_start":49,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24278,"byte_end":24282,"line_start":723,"line_end":723,"column_start":43,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":24477,"byte_end":24481,"line_start":729,"line_end":729,"column_start":16,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":25536,"byte_end":25540,"line_start":760,"line_end":760,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28305,"byte_end":28309,"line_start":842,"line_end":842,"column_start":41,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28465,"byte_end":28469,"line_start":849,"line_end":849,"column_start":44,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":28606,"byte_end":28610,"line_start":855,"line_end":855,"column_start":34,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30193,"byte_end":30201,"line_start":905,"line_end":905,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30329,"byte_end":30337,"line_start":911,"line_end":911,"column_start":40,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":30626,"byte_end":30634,"line_start":920,"line_end":920,"column_start":30,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":2801}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31110,"byte_end":31118,"line_start":936,"line_end":936,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31250,"byte_end":31258,"line_start":942,"line_end":942,"column_start":38,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31394,"byte_end":31402,"line_start":948,"line_end":948,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":2836}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":31422,"byte_end":31430,"line_start":950,"line_end":950,"column_start":13,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":41913,"byte_end":41917,"line_start":1262,"line_end":1262,"column_start":43,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42396,"byte_end":42400,"line_start":1272,"line_end":1272,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42522,"byte_end":42526,"line_start":1275,"line_end":1275,"column_start":49,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":9147}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":42585,"byte_end":42589,"line_start":1277,"line_end":1277,"column_start":16,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":43304,"byte_end":43308,"line_start":1296,"line_end":1296,"column_start":31,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46001,"byte_end":46005,"line_start":1375,"line_end":1375,"column_start":41,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46161,"byte_end":46165,"line_start":1382,"line_end":1382,"column_start":44,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/lib.rs","byte_start":46302,"byte_end":46306,"line_start":1388,"line_end":1388,"column_start":34,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":61185,"byte_end":61201,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":63710,"byte_end":63718,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65809,"byte_end":65816,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":359},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":65861,"byte_end":65868,"line_start":187,"line_end":187,"column_start":34,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":359},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66033,"byte_end":66040,"line_start":193,"line_end":193,"column_start":25,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":359},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":66118,"byte_end":66125,"line_start":199,"line_end":199,"column_start":13,"column_end":20},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69353,"byte_end":69360,"line_start":306,"line_end":306,"column_start":34,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":10131}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69561,"byte_end":69568,"line_start":312,"line_end":312,"column_start":25,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69667,"byte_end":69674,"line_start":318,"line_end":318,"column_start":22,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":69881,"byte_end":69888,"line_start":327,"line_end":327,"column_start":13,"column_end":20},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kr/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.18.0/src/race.rs","byte_start":72749,"byte_end":72756,"line_start":409,"line_end":409,"column_start":42,"column_end":49},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":3191}}]}